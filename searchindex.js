Search.setIndex({"docnames": ["content/concepts/markdown-notebooks", "content/concepts/mymarkdown", "content/core/markdown", "content/core/mymarkdown", "content/essentials/000_Intro_to_Python", "content/essentials/intro_mathematics", "content/essentials/intro_python", "content/essentials/intro_statistics", "content/essentials/mathematics/1_linear_algebra", "content/essentials/python/advanced/001_Python_Iterators", "content/essentials/python/advanced/002_Python_Generators", "content/essentials/python/advanced/003_Python_Closure", "content/essentials/python/advanced/004_Python_Decorators", "content/essentials/python/advanced/005_Python_Property", "content/essentials/python/advanced/006_Python_RegEx", "content/essentials/python/advanced/Python_args_and_kwargs", "content/essentials/python/advanced/advanced_toc", "content/essentials/python/controlflow/000_Python_Flow_Control_statement", "content/essentials/python/controlflow/001_Python_if_statement", "content/essentials/python/controlflow/002_Python_if_else_statement", "content/essentials/python/controlflow/003_Python_if_elif_else_statement", "content/essentials/python/controlflow/004_Python_Nested_if_statement", "content/essentials/python/controlflow/005_Python_for_Loop", "content/essentials/python/controlflow/006_Python_while_Loop", "content/essentials/python/controlflow/007_Python_break_continue_pass_statements", "content/essentials/python/controlflow/controlflow_toc", "content/essentials/python/datatypes/001_Python_Numbers", "content/essentials/python/datatypes/002_Python_String", "content/essentials/python/datatypes/003_Python_List", "content/essentials/python/datatypes/004_Python_Tuple", "content/essentials/python/datatypes/005_Python_Dictionary", "content/essentials/python/datatypes/006_Python_Sets", "content/essentials/python/datatypes/Python_List_Comprehension", "content/essentials/python/datatypes/datatypes_toc", "content/essentials/python/datetime/001_Python_datetime_Module", "content/essentials/python/datetime/002_Python_strftime", "content/essentials/python/datetime/003_Python_strptime", "content/essentials/python/datetime/004_Python_current_date_and_time", "content/essentials/python/datetime/005_Python_get_current_time", "content/essentials/python/datetime/006_Python_timestamp_to_datetime", "content/essentials/python/datetime/007_Python_time_Module", "content/essentials/python/datetime/008_Python_sleep", "content/essentials/python/datetime/datetime_toc", "content/essentials/python/files/001_Python_File_Input_Output", "content/essentials/python/files/002_Python_File_Directory", "content/essentials/python/files/003_Python_File_Exception", "content/essentials/python/files/004_Python_Exceptions_Handling", "content/essentials/python/files/005_Python_User_defined_Exceptions", "content/essentials/python/files/files_toc", "content/essentials/python/functions/001_Python_Functions", "content/essentials/python/functions/002_Python_Function_Global_Local_Nonlocal", "content/essentials/python/functions/003_Python_Function_global_Keywords", "content/essentials/python/functions/004_Python_Function_Arguments", "content/essentials/python/functions/005_Python_Function_Recursion", "content/essentials/python/functions/006_Python_Function_Anonymous", "content/essentials/python/functions/007_Python_Function_Module", "content/essentials/python/functions/008_Python_Function_random_Module", "content/essentials/python/functions/009_Python_Function_math_Module", "content/essentials/python/functions/010_Python_Function_Package", "content/essentials/python/functions/Python_Docstrings", "content/essentials/python/functions/Python_User_defined_Functions", "content/essentials/python/functions/functions_toc", "content/essentials/python/introduction/002_Hello_World", "content/essentials/python/introduction/003_Python_Keywords_and_Identifiers", "content/essentials/python/introduction/004_Python_Statement_Indentation_Comments", "content/essentials/python/introduction/005_Python_Variables_&_Constants", "content/essentials/python/introduction/006_Python_Literals", "content/essentials/python/introduction/007_Python_Data_Types", "content/essentials/python/introduction/008_Python_Type_Conversion", "content/essentials/python/introduction/009_Python_Input_Output_Import", "content/essentials/python/introduction/010_Python_Operators", "content/essentials/python/introduction/011_Python_Namespace_and_Scope", "content/essentials/python/introduction/1_data_structures_and_agorithms", "content/essentials/python/introduction/Interpreter_Vs_Compiler", "content/essentials/python/introduction/constant", "content/essentials/python/introduction/intro_toc", "content/essentials/python/objects/001_Python_OOPs_Concepts", "content/essentials/python/objects/002_Python_Classes_and_Objects", "content/essentials/python/objects/003_Python_Inheritance", "content/essentials/python/objects/004_Python_Operator_Overloading", "content/essentials/python/objects/objects_toc", "content/essentials/python/objects/self_in_Python_Demystified", "content/essentials/statistics/statistics", "content/markdown", "content/markdown-notebooks", "content/mymarkdown", "content/notebooks", "content/real-world/markdown", "content/real-world/mymarkdown", "content/tools/hf/intro", "content/tools/intro_tools", "content/tools/langchain/intro", "content/tools/langchain/langchain-modules", "content/tools/langchain/langgraph", "content/tools/langchain/langserve", "content/tools/langchain/langsmith", "content/tools/langchain/lcel", "content/tools/numpy/001_Python_NumPy", "content/tools/numpy/002_Python_NumPy_Array_Part1", "content/tools/numpy/003_Python_NumPy_Array_Part2", "content/tools/numpy/004_Python_NumPy_Array_Part3", "content/tools/numpy/005_Python_NumPy_Array_Part4", "content/tools/numpy/Python_Numpy_Exercises_with_hints", "content/tools/numpy/numpy_toc", "content/tools/pandas/001_Python_Pandas_DataFrame", "content/tools/pandas/001_Python_Pandas_Methods/001_Python_Pandas_DataFrame_from_Dictionary", "content/tools/pandas/001_Python_Pandas_Methods/002_Python_Pandas_DataFrame_from_List", "content/tools/pandas/001_Python_Pandas_Methods/003_Python_Pandas_DataFrame_head_and_tail", "content/tools/pandas/001_Python_Pandas_Methods/004_Python_Pandas_DataFrame_drop_columns", "content/tools/pandas/001_Python_Pandas_Methods/005_Python_Pandas_DataFrame_drop_duplicates", "content/tools/pandas/001_Python_Pandas_Methods/006_Python_Pandas_DataFrame_drop_columns_with_NA", "content/tools/pandas/001_Python_Pandas_Methods/007_Python_Pandas_DataFrame_rename_columns", "content/tools/pandas/001_Python_Pandas_Methods/008_Python_Pandas_DataFrame_to_Python_dictionary", "content/tools/pandas/001_Python_Pandas_Methods/009_Python_Pandas_DataFrame_set_index", "content/tools/pandas/001_Python_Pandas_Methods/010_Python_Pandas_DataFrame_reset_index", "content/tools/pandas/002_Python_Pandas_Exercise_1", "content/tools/pandas/003_Python_Pandas_Exercise_2", "content/tools/pandas/pandas_toc", "content/tools/tools-for-llms", "content/tools/tools-for-ml", "content/tools/tools-for-nn", "curriculum", "intro"], "filenames": ["content/concepts/markdown-notebooks.md", "content/concepts/mymarkdown.md", "content/core/markdown.md", "content/core/mymarkdown.md", "content/essentials/000_Intro_to_Python.ipynb", "content/essentials/intro_mathematics.ipynb", "content/essentials/intro_python.ipynb", "content/essentials/intro_statistics.ipynb", "content/essentials/mathematics/1_linear_algebra.ipynb", "content/essentials/python/advanced/001_Python_Iterators.ipynb", "content/essentials/python/advanced/002_Python_Generators.ipynb", "content/essentials/python/advanced/003_Python_Closure.ipynb", "content/essentials/python/advanced/004_Python_Decorators.ipynb", "content/essentials/python/advanced/005_Python_Property.ipynb", "content/essentials/python/advanced/006_Python_RegEx.ipynb", "content/essentials/python/advanced/Python_args_and_kwargs.ipynb", "content/essentials/python/advanced/advanced_toc.md", "content/essentials/python/controlflow/000_Python_Flow_Control_statement.ipynb", "content/essentials/python/controlflow/001_Python_if_statement.ipynb", "content/essentials/python/controlflow/002_Python_if_else_statement.ipynb", "content/essentials/python/controlflow/003_Python_if_elif_else_statement.ipynb", "content/essentials/python/controlflow/004_Python_Nested_if_statement.ipynb", "content/essentials/python/controlflow/005_Python_for_Loop.ipynb", "content/essentials/python/controlflow/006_Python_while_Loop.ipynb", "content/essentials/python/controlflow/007_Python_break_continue_pass_statements.ipynb", "content/essentials/python/controlflow/controlflow_toc.md", "content/essentials/python/datatypes/001_Python_Numbers.ipynb", "content/essentials/python/datatypes/002_Python_String.ipynb", "content/essentials/python/datatypes/003_Python_List.ipynb", "content/essentials/python/datatypes/004_Python_Tuple.ipynb", "content/essentials/python/datatypes/005_Python_Dictionary.ipynb", "content/essentials/python/datatypes/006_Python_Sets.ipynb", "content/essentials/python/datatypes/Python_List_Comprehension.ipynb", "content/essentials/python/datatypes/datatypes_toc.md", "content/essentials/python/datetime/001_Python_datetime_Module.ipynb", "content/essentials/python/datetime/002_Python_strftime.ipynb", "content/essentials/python/datetime/003_Python_strptime.ipynb", "content/essentials/python/datetime/004_Python_current_date_and_time.ipynb", "content/essentials/python/datetime/005_Python_get_current_time.ipynb", "content/essentials/python/datetime/006_Python_timestamp_to_datetime.ipynb", "content/essentials/python/datetime/007_Python_time_Module.ipynb", "content/essentials/python/datetime/008_Python_sleep.ipynb", "content/essentials/python/datetime/datetime_toc.md", "content/essentials/python/files/001_Python_File_Input_Output.ipynb", "content/essentials/python/files/002_Python_File_Directory.ipynb", "content/essentials/python/files/003_Python_File_Exception.ipynb", "content/essentials/python/files/004_Python_Exceptions_Handling.ipynb", "content/essentials/python/files/005_Python_User_defined_Exceptions.ipynb", "content/essentials/python/files/files_toc.md", "content/essentials/python/functions/001_Python_Functions.ipynb", "content/essentials/python/functions/002_Python_Function_Global_Local_Nonlocal.ipynb", "content/essentials/python/functions/003_Python_Function_global_Keywords.ipynb", "content/essentials/python/functions/004_Python_Function_Arguments.ipynb", "content/essentials/python/functions/005_Python_Function_Recursion.ipynb", "content/essentials/python/functions/006_Python_Function_Anonymous.ipynb", "content/essentials/python/functions/007_Python_Function_Module.ipynb", "content/essentials/python/functions/008_Python_Function_random_Module.ipynb", "content/essentials/python/functions/009_Python_Function_math_Module.ipynb", "content/essentials/python/functions/010_Python_Function_Package.ipynb", "content/essentials/python/functions/Python_Docstrings.ipynb", "content/essentials/python/functions/Python_User_defined_Functions.ipynb", "content/essentials/python/functions/functions_toc.md", "content/essentials/python/introduction/002_Hello_World.ipynb", "content/essentials/python/introduction/003_Python_Keywords_and_Identifiers.ipynb", "content/essentials/python/introduction/004_Python_Statement_Indentation_Comments.ipynb", "content/essentials/python/introduction/005_Python_Variables_&_Constants.ipynb", "content/essentials/python/introduction/006_Python_Literals.ipynb", "content/essentials/python/introduction/007_Python_Data_Types.ipynb", "content/essentials/python/introduction/008_Python_Type_Conversion.ipynb", "content/essentials/python/introduction/009_Python_Input_Output_Import.ipynb", "content/essentials/python/introduction/010_Python_Operators.ipynb", "content/essentials/python/introduction/011_Python_Namespace_and_Scope.ipynb", "content/essentials/python/introduction/1_data_structures_and_agorithms.ipynb", "content/essentials/python/introduction/Interpreter_Vs_Compiler.ipynb", "content/essentials/python/introduction/constant.ipynb", "content/essentials/python/introduction/intro_toc.md", "content/essentials/python/objects/001_Python_OOPs_Concepts.ipynb", "content/essentials/python/objects/002_Python_Classes_and_Objects.ipynb", "content/essentials/python/objects/003_Python_Inheritance.ipynb", "content/essentials/python/objects/004_Python_Operator_Overloading.ipynb", "content/essentials/python/objects/objects_toc.md", "content/essentials/python/objects/self_in_Python_Demystified.ipynb", "content/essentials/statistics/statistics.ipynb", "content/markdown.md", "content/markdown-notebooks.md", "content/mymarkdown.md", "content/notebooks.ipynb", "content/real-world/markdown.md", "content/real-world/mymarkdown.md", "content/tools/hf/intro.md", "content/tools/intro_tools.ipynb", "content/tools/langchain/intro.md", "content/tools/langchain/langchain-modules.md", "content/tools/langchain/langgraph.md", "content/tools/langchain/langserve.md", "content/tools/langchain/langsmith.md", "content/tools/langchain/lcel.md", "content/tools/numpy/001_Python_NumPy.ipynb", "content/tools/numpy/002_Python_NumPy_Array_Part1.ipynb", "content/tools/numpy/003_Python_NumPy_Array_Part2.ipynb", "content/tools/numpy/004_Python_NumPy_Array_Part3.ipynb", "content/tools/numpy/005_Python_NumPy_Array_Part4.ipynb", "content/tools/numpy/Python_Numpy_Exercises_with_hints.ipynb", "content/tools/numpy/numpy_toc.md", "content/tools/pandas/001_Python_Pandas_DataFrame.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/001_Python_Pandas_DataFrame_from_Dictionary.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/002_Python_Pandas_DataFrame_from_List.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/003_Python_Pandas_DataFrame_head_and_tail.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/004_Python_Pandas_DataFrame_drop_columns.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/005_Python_Pandas_DataFrame_drop_duplicates.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/006_Python_Pandas_DataFrame_drop_columns_with_NA.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/007_Python_Pandas_DataFrame_rename_columns.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/008_Python_Pandas_DataFrame_to_Python_dictionary.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/009_Python_Pandas_DataFrame_set_index.ipynb", "content/tools/pandas/001_Python_Pandas_Methods/010_Python_Pandas_DataFrame_reset_index.ipynb", "content/tools/pandas/002_Python_Pandas_Exercise_1.ipynb", "content/tools/pandas/003_Python_Pandas_Exercise_2.ipynb", "content/tools/pandas/pandas_toc.md", "content/tools/tools-for-llms.md", "content/tools/tools-for-ml.md", "content/tools/tools-for-nn.md", "curriculum.md", "intro.md"], "titles": ["Notebooks with MyST Markdown", "Here\u2019s my sample title", "Markdown Files", "Here\u2019s my sample title", "Learn Python Programming", "Mathematics for Machine Learning", "Getting Started with Python", "Content with notebooks", "Linear Algebra", "Python Iterators", "Python Python Generators", "Python Closures", "Python Decorators", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;property</span></code> decorator", "Python RegEx", "Python <strong><code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code></strong> and <strong><code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code></strong>", "Python Advanced Topics", "Python Flow-Control (Decision-Making) Statements", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> statement", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">if-else</span></code> statement", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">if-elif-else</span></code> statement", "Python Nested <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> statement", "Loops in Python", "Loops in Python", "Control Statements in Python", "Python Flow Control", "Python Numbers, Type Conversion and Mathematics", "Python Strings", "Python List", "Python Tuple", "Python Dictionary", "Python Sets", "Python List Comprehension", "Python Data Types", "Python datetime", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">strftime()</span></code>", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">strptime()</span></code>", "How to get current date and time in Python?", "Python Get Current time", "Python timestamp to datetime and vice-versa", "Python time Module", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">sleep()</span></code>", "Python Date &amp; Time Module", "Python File I/O", "Python Directory and Files Management", "Python Errors and Built-in Exceptions", "Python Exceptions Handling Using <code class=\"docutils literal notranslate\"><span class=\"pre\">try</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">finally</span></code> statement", "Python Custom Exceptions", "Python Files", "Python Functions", "Python Global, Local and Nonlocal variables", "Python <code class=\"docutils literal notranslate\"><span class=\"pre\">global</span></code> Keyword", "Function Argument and Parameter", "Python Recursion", "Python Anonymous/<strong><code class=\"docutils literal notranslate\"><span class=\"pre\">lambda</span></code></strong> Function", "Python Modules", "Python Random Module", "Python Mathematical Functions", "Python Package", "Python Docstrings", "Python User-defined Functions", "Python Functions", "Python Hello, World", "Python Keywords and Identifiers", "Python Statement, Indentation and Comments", "Python Variables and Constants", "Python Literals", "Python Data Types", "Python Type Conversion and Type Casting", "Python Input, Output and Import", "Python Operators", "Python Namespace and Scope", "Data structures and algorithms", "Differences Between Interpreter and Compiler", "&lt;no title&gt;", "Python Introduction", "Python OOPs Concepts", "Python  Classes and Objects", "Python Inheritance", "Python Operator Overloading", "Python Object Class", "self in Python, Demystified", "Content with notebooks", "Markdown Files", "Notebooks with MyST Markdown", "Here\u2019s my sample title", "Content with notebooks", "Markdown Files", "Here\u2019s my sample title", "Introduction to HuggingFace", "Tools to get a launch \ud83d\ude80\ud83d\udc68\u200d\ud83d\ude80", "Table of Contents", "Langchain modules", "LangGraphs", "LangServe", "LangSmith", "Langchain expression language", "Python NumPy", "Python NumPy Array:", "Array indexing", "Array math", "Arrays reorganizing", "Python NumPy Exercises", "Python Numpy Module", "Python Pandas", "Create Pandas DataFrame from Python Dictionary", "Create Pandas DataFrame from Python List", "Pandas DataFrame head, tail, at, iat", "Drop columns in pandas DataFrame", "Drop duplicates in pandas DataFrame", "Drop columns with NA in pandas DataFrame", "Rename columns in Pandas DataFrame", "Convert Pandas DataFrame to Python dictionary", "Set index in pandas DataFrame", "Reset index in pandas DataFrame", "Python Pandas", "Python Pandas", "Python Pandas Module", "Here\u2019s my sample title", "Notebooks with MyST Markdown", "Here\u2019s my sample title", "AI/ML Learning Path", "Welcome to my technical diary \ud83e\udd2f"], "terms": {"jupyt": [0, 1, 2, 4, 7, 45, 69, 82, 83, 84, 86, 87, 118, 119, 120, 121, 122], "book": [0, 1, 2, 7, 65, 79, 82, 83, 84, 86, 87, 118, 119, 120], "also": [0, 1, 6, 7, 9, 10, 11, 12, 13, 17, 18, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 58, 59, 62, 64, 65, 66, 68, 69, 70, 71, 73, 76, 77, 78, 81, 82, 84, 86, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 122], "let": [0, 1, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 27, 29, 31, 32, 34, 40, 41, 43, 45, 46, 49, 50, 51, 53, 54, 55, 59, 68, 69, 70, 71, 76, 77, 78, 79, 81, 84, 98, 99, 100, 101, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120], "you": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 81, 82, 83, 84, 86, 87, 90, 97, 98, 99, 100, 101, 104, 105, 106, 108, 111, 112, 113, 114, 116, 118, 119, 120, 122], "write": [0, 1, 2, 4, 6, 14, 20, 22, 23, 24, 27, 29, 32, 45, 49, 50, 51, 55, 59, 60, 64, 65, 66, 67, 69, 70, 73, 76, 78, 81, 83, 84, 87, 98, 104, 118, 119, 120], "text": [0, 1, 2, 3, 14, 19, 27, 43, 49, 59, 70, 83, 84, 85, 87, 88, 104, 118, 119, 120, 121], "base": [0, 1, 6, 22, 23, 24, 26, 27, 32, 34, 35, 36, 40, 45, 46, 47, 53, 55, 57, 58, 68, 69, 70, 73, 76, 77, 78, 81, 84, 90, 101, 104, 105, 107, 108, 115, 116, 118, 119, 120], "us": [0, 1, 4, 9, 12, 15, 17, 18, 19, 20, 21, 24, 27, 30, 31, 32, 36, 37, 39, 40, 41, 43, 44, 45, 47, 49, 50, 52, 53, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 77, 78, 79, 84, 98, 99, 100, 101, 104, 109, 110, 114, 115, 118, 119, 120, 121], "see": [0, 1, 2, 7, 9, 10, 11, 12, 13, 14, 15, 19, 22, 23, 24, 26, 27, 30, 32, 41, 43, 45, 46, 49, 50, 51, 52, 54, 55, 56, 59, 62, 63, 64, 67, 68, 69, 70, 73, 76, 78, 79, 81, 82, 83, 84, 86, 87, 97, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120], "document": [0, 1, 7, 43, 44, 49, 59, 64, 76, 77, 82, 84, 86, 87, 98, 99, 100, 118, 119, 120], "more": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 19, 20, 22, 24, 26, 28, 29, 30, 31, 32, 34, 35, 40, 41, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 56, 59, 63, 64, 65, 66, 71, 73, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 98, 99, 100, 101, 104, 105, 110, 113, 115, 116, 118, 119, 120, 122], "detail": [0, 1, 10, 13, 40, 45, 52, 64, 69, 76, 77, 78, 84, 99, 104, 106, 108, 113, 114, 118, 119, 120], "instruct": [0, 1, 18, 41, 46, 64, 84, 118, 119, 120], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122], "page": [0, 41, 56, 57, 64, 79, 84, 119], "show": [0, 2, 9, 23, 24, 27, 35, 36, 40, 50, 52, 53, 54, 55, 66, 73, 76, 77, 79, 83, 84, 87, 104, 105, 107, 110, 111, 112, 114, 119], "off": [0, 2, 27, 43, 83, 84, 87, 104, 119], "written": [0, 6, 18, 26, 27, 32, 43, 46, 49, 55, 59, 60, 62, 63, 65, 66, 67, 73, 83, 84, 87, 119], "With": [0, 6, 18, 29, 32, 46, 79, 84, 101, 119], "can": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 82, 84, 86, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122], "defin": [0, 4, 9, 10, 12, 13, 14, 15, 22, 23, 26, 27, 28, 29, 30, 32, 34, 40, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 78, 79, 84, 101, 104, 108, 112, 119], "code": [0, 4, 5, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 32, 34, 40, 43, 44, 46, 49, 50, 52, 53, 54, 55, 58, 59, 60, 63, 64, 65, 66, 69, 70, 76, 78, 81, 84, 97, 100, 119], "direct": [0, 2, 14, 23, 27, 32, 34, 35, 36, 40, 54, 76, 84, 119], "like": [0, 4, 6, 9, 10, 12, 13, 14, 19, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 49, 52, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 78, 79, 81, 83, 84, 87, 97, 100, 101, 104, 105, 106, 107, 108, 112, 113, 114, 115, 119, 122], "so": [0, 4, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 27, 28, 29, 31, 43, 45, 46, 49, 50, 52, 54, 55, 56, 60, 63, 64, 65, 66, 68, 70, 71, 73, 76, 77, 78, 79, 81, 84, 97, 99, 100, 104, 105, 108, 110, 113, 114, 115, 119], "print": [0, 6, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 64, 65, 66, 67, 68, 70, 71, 72, 76, 77, 78, 79, 81, 84, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119], "2": [0, 4, 6, 9, 11, 15, 17, 18, 19, 23, 26, 32, 40, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 71, 73, 77, 78, 79, 81, 84, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119], "when": [0, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 73, 76, 77, 78, 79, 81, 83, 84, 87, 98, 100, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119], "your": [0, 2, 5, 7, 9, 11, 14, 17, 18, 19, 24, 27, 28, 29, 38, 43, 44, 46, 47, 49, 55, 57, 58, 62, 63, 64, 65, 69, 70, 73, 76, 77, 82, 83, 84, 86, 87, 90, 97, 100, 104, 119, 122], "i": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 24, 26, 32, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 48, 50, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 82, 84, 85, 86, 88, 91, 97, 98, 99, 100, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121], "built": [0, 6, 9, 11, 13, 22, 24, 26, 32, 43, 46, 47, 49, 54, 59, 60, 62, 64, 65, 69, 71, 76, 78, 79, 84, 104, 108, 111, 119], "content": [0, 2, 6, 14, 43, 44, 46, 55, 83, 84, 87, 104, 119], "ani": [0, 4, 6, 9, 10, 12, 13, 21, 22, 23, 24, 26, 27, 29, 31, 32, 39, 45, 46, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 84, 91, 97, 98, 100, 101, 104, 108, 109, 110, 111, 113, 114, 119, 122], "block": [0, 17, 18, 19, 20, 21, 22, 23, 24, 43, 46, 49, 64, 76, 84, 104, 119], "execut": [0, 6, 9, 10, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 32, 40, 41, 43, 46, 49, 50, 55, 60, 62, 64, 69, 71, 73, 76, 77, 84, 108, 111, 113, 114, 119, 122], "default": [0, 11, 34, 51, 53, 57, 59, 62, 69, 77, 78, 84, 97, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119], "kernel": [0, 6, 84, 119], "output": [0, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 24, 26, 27, 28, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 49, 50, 51, 52, 54, 55, 62, 68, 70, 73, 77, 78, 79, 84, 98, 100, 104, 107, 111, 112, 119, 121], "displai": [0, 19, 20, 21, 22, 23, 24, 27, 34, 44, 46, 47, 59, 62, 66, 70, 73, 77, 78, 84, 101, 107, 119], "line": [0, 4, 6, 7, 8, 11, 13, 14, 17, 23, 24, 27, 31, 32, 43, 45, 46, 49, 50, 52, 54, 55, 63, 66, 67, 70, 71, 73, 77, 82, 83, 84, 86, 87, 100, 101, 119], "rest": [0, 22, 24, 27, 28, 43, 46, 49, 59, 84, 108, 111, 119], "jupytext": [0, 84, 119], "convert": [0, 13, 26, 27, 28, 31, 32, 34, 35, 36, 39, 43, 45, 49, 57, 66, 68, 69, 70, 73, 84, 97, 98, 101, 104, 105, 106, 116, 119], "file": [0, 6, 9, 10, 12, 27, 45, 46, 47, 51, 52, 55, 58, 59, 62, 63, 65, 69, 73, 84, 104, 112, 113, 114, 115, 119], "support": [0, 6, 22, 24, 26, 28, 29, 31, 43, 49, 57, 65, 66, 67, 73, 76, 78, 84, 100, 119], "mani": [0, 5, 6, 14, 22, 23, 24, 27, 29, 31, 43, 44, 46, 47, 55, 59, 65, 70, 76, 77, 81, 83, 84, 87, 100, 101, 104, 109, 119, 122], "other": [0, 4, 6, 9, 10, 12, 14, 22, 23, 26, 27, 32, 40, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 59, 60, 62, 63, 64, 65, 66, 67, 70, 73, 76, 77, 78, 79, 81, 84, 97, 98, 100, 101, 104, 105, 109, 110, 112, 119, 121], "ar": [0, 5, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 32, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 83, 84, 87, 90, 98, 99, 100, 101, 104, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 119, 122], "two": [0, 6, 9, 12, 13, 14, 15, 17, 19, 20, 22, 23, 24, 26, 28, 29, 30, 31, 32, 36, 41, 43, 45, 46, 47, 50, 52, 53, 55, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 81, 83, 84, 87, 98, 99, 100, 104, 106, 107, 108, 111, 112, 114, 119], "thing": [0, 6, 10, 12, 17, 22, 24, 27, 32, 44, 55, 64, 71, 77, 78, 81, 84, 98, 101, 104, 119, 122], "need": [0, 6, 10, 13, 14, 17, 19, 22, 23, 26, 27, 28, 29, 32, 34, 36, 37, 38, 40, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 60, 62, 65, 67, 68, 69, 73, 77, 78, 79, 81, 84, 90, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 122], "understand": [0, 4, 5, 8, 11, 12, 14, 17, 22, 23, 24, 26, 32, 59, 60, 64, 71, 73, 76, 81, 84, 90, 104, 105, 119, 121, 122], "how": [0, 6, 9, 10, 11, 12, 13, 14, 17, 19, 22, 23, 24, 26, 29, 30, 32, 34, 40, 43, 45, 46, 47, 50, 51, 52, 54, 56, 57, 59, 68, 69, 70, 73, 76, 77, 78, 79, 84, 104, 105, 106, 108, 110, 111, 112, 113, 114, 119, 122], "should": [0, 10, 11, 12, 14, 15, 18, 19, 22, 26, 30, 32, 43, 44, 46, 49, 55, 59, 64, 65, 69, 73, 77, 81, 84, 99, 100, 104, 105, 108, 109, 112, 113, 114, 119, 121], "includ": [0, 6, 7, 9, 14, 19, 22, 23, 24, 27, 28, 43, 46, 55, 59, 60, 62, 67, 73, 77, 81, 82, 84, 86, 98, 101, 104, 105, 116, 119, 122], "inform": [0, 7, 20, 34, 43, 44, 46, 51, 65, 81, 82, 84, 86, 104, 105, 119], "about": [0, 2, 6, 7, 9, 11, 12, 13, 14, 15, 17, 22, 26, 27, 28, 29, 30, 31, 32, 34, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 57, 59, 63, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 98, 99, 101, 104, 105, 119], "top": [0, 65, 84, 97, 99, 100, 104, 119], "The": [0, 4, 6, 9, 10, 11, 12, 14, 15, 17, 20, 21, 22, 23, 24, 26, 31, 32, 34, 35, 36, 40, 41, 44, 47, 49, 50, 51, 52, 53, 54, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 84, 97, 98, 99, 100, 101, 102, 104, 106, 107, 116, 119], "presenc": [0, 26, 70, 84, 119], "which": [0, 5, 6, 9, 10, 11, 12, 13, 14, 15, 20, 22, 24, 26, 27, 29, 30, 31, 32, 37, 39, 41, 43, 44, 46, 47, 49, 50, 54, 55, 60, 64, 65, 66, 67, 68, 69, 71, 73, 76, 77, 78, 79, 81, 84, 97, 98, 99, 100, 101, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 119, 122], "That": [0, 6, 11, 17, 20, 27, 29, 43, 46, 79, 84, 119], "": [0, 2, 4, 6, 7, 9, 10, 11, 12, 13, 17, 18, 21, 22, 23, 24, 26, 27, 29, 32, 36, 38, 39, 40, 41, 43, 45, 46, 49, 50, 51, 53, 54, 55, 57, 59, 60, 64, 66, 67, 68, 69, 71, 73, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 98, 101, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 119, 122], "all": [0, 6, 9, 10, 11, 13, 14, 20, 21, 22, 23, 24, 26, 29, 31, 34, 35, 36, 41, 43, 44, 45, 46, 47, 49, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 81, 84, 97, 98, 99, 100, 101, 104, 105, 106, 107, 112, 113, 114, 115, 119, 122], "get": [0, 2, 4, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 31, 32, 36, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 54, 55, 64, 65, 70, 71, 76, 77, 78, 79, 81, 83, 84, 87, 98, 99, 101, 105, 107, 111, 112, 114, 116, 119, 122], "start": [0, 2, 4, 9, 10, 12, 17, 18, 22, 23, 27, 28, 29, 41, 43, 46, 49, 56, 58, 63, 64, 65, 67, 71, 83, 84, 87, 90, 97, 99, 101, 104, 105, 106, 107, 108, 110, 111, 113, 115, 119, 122], "If": [0, 6, 9, 10, 12, 14, 17, 18, 19, 20, 22, 23, 24, 27, 29, 31, 32, 34, 36, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 64, 65, 69, 71, 73, 76, 77, 78, 81, 84, 90, 97, 100, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 119, 122], "have": [0, 5, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 41, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 78, 79, 81, 84, 90, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 122], "would": [0, 5, 6, 9, 11, 12, 13, 15, 17, 22, 24, 32, 43, 44, 45, 46, 52, 53, 55, 58, 60, 63, 64, 65, 69, 77, 78, 81, 84, 90, 119, 122], "treat": [0, 11, 14, 45, 50, 51, 76, 84, 100, 119], "run": [0, 4, 5, 6, 9, 10, 11, 12, 22, 23, 24, 26, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 49, 50, 51, 52, 55, 64, 65, 71, 73, 76, 78, 84, 119], "follow": [0, 4, 9, 10, 11, 12, 13, 14, 17, 19, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 43, 45, 46, 47, 49, 52, 53, 55, 56, 58, 59, 60, 62, 64, 65, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 84, 90, 99, 100, 101, 104, 105, 106, 108, 109, 110, 111, 119], "command": [0, 6, 23, 46, 54, 55, 59, 73, 77, 84, 97, 119], "init": [0, 81, 84, 119], "path": [0, 6, 43, 44, 58, 69, 84, 119], "markdownfil": [0, 84, 119], "md": [0, 2, 83, 84, 87, 119], "some": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 43, 45, 46, 49, 51, 53, 55, 59, 62, 65, 67, 69, 70, 73, 76, 78, 81, 82, 83, 85, 86, 87, 88, 99, 100, 101, 104, 105, 108, 110, 111, 112, 118, 120, 122], "label": [1, 85, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 118, 120], "refer": [1, 4, 6, 11, 12, 24, 27, 28, 29, 43, 45, 55, 58, 59, 60, 65, 66, 70, 71, 76, 78, 81, 87, 100, 101, 102, 104, 118, 120], "intro": [1, 15, 118, 120], "notebook": [1, 2, 8, 45, 69, 83, 87, 118, 120, 121, 122], "myst": [1, 118, 120], "markdown": [1, 6, 118, 120], "whether": [2, 17, 18, 19, 24, 43, 46, 47, 51, 59, 70, 78, 83, 87, 99, 104, 108, 109, 110, 111, 113, 114], "ipynb": [2, 6, 44, 55, 83, 87], "regular": [2, 14, 22, 27, 32, 83, 87, 104], "ll": [2, 10, 11, 22, 24, 26, 28, 29, 30, 31, 43, 44, 46, 49, 50, 51, 54, 58, 62, 76, 77, 83, 87, 104], "same": [2, 9, 10, 12, 15, 18, 19, 22, 24, 27, 31, 46, 49, 50, 51, 52, 54, 55, 56, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 83, 87, 97, 98, 99, 100, 101, 104, 107, 108, 109, 111, 112, 114, 115, 116], "flavor": [2, 83, 87], "call": [2, 6, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 23, 27, 28, 29, 30, 31, 32, 36, 41, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 83, 87, 99, 106, 107, 108, 111, 113, 114], "simpl": [2, 4, 6, 9, 10, 11, 12, 13, 23, 27, 30, 34, 43, 46, 47, 55, 62, 66, 70, 72, 73, 77, 81, 83, 87, 106, 108, 111, 112, 114, 121], "help": [2, 6, 14, 17, 22, 23, 24, 28, 34, 35, 36, 39, 40, 46, 47, 49, 53, 55, 60, 63, 65, 71, 76, 81, 83, 87, 97, 104, 105, 122], "syntax": [2, 4, 10, 12, 13, 14, 27, 28, 29, 30, 31, 44, 46, 49, 54, 59, 63, 68, 69, 73, 76, 77, 78, 83, 87, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114], "stand": [2, 12, 43, 83, 87], "markedli": [2, 83, 87], "structur": [2, 6, 12, 17, 22, 28, 43, 45, 58, 59, 63, 76, 83, 87, 104, 105, 106, 112, 113, 114, 115, 116, 121], "It": [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 39, 43, 44, 45, 46, 49, 51, 53, 54, 55, 57, 59, 60, 63, 64, 65, 66, 67, 69, 70, 73, 76, 77, 78, 79, 81, 83, 87, 97, 98, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 121, 122], "slight": [2, 29, 83, 87], "variat": [2, 19, 20, 22, 83, 87], "commonmark": [2, 83, 87], "small": [2, 24, 32, 47, 55, 60, 73, 83, 87], "extens": [2, 6, 11, 55, 59, 62, 64, 69, 83, 87], "allow": [2, 4, 6, 11, 12, 13, 14, 15, 17, 20, 22, 23, 26, 28, 29, 45, 46, 51, 52, 64, 65, 66, 69, 70, 76, 77, 78, 79, 81, 83, 87, 99, 100, 104, 105, 111, 112, 113], "role": [2, 64, 78, 104, 121], "sphinx": [2, 59, 83, 87], "ecosystem": [2, 83, 87], "For": [2, 5, 6, 7, 10, 12, 13, 14, 15, 17, 21, 22, 23, 24, 26, 27, 36, 40, 43, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 69, 70, 71, 73, 76, 77, 78, 79, 82, 83, 86, 87, 98, 99, 100, 101, 104, 105, 106, 107, 109, 110, 113, 114], "overview": [2, 64, 83, 87, 101], "gener": [4, 6, 9, 12, 16, 17, 22, 23, 26, 27, 29, 45, 46, 47, 49, 53, 54, 55, 56, 58, 59, 64, 67, 70, 73, 76, 77, 78, 81, 90, 98, 99, 108, 111, 114, 115, 121, 122], "purpos": [4, 6, 17, 43, 47, 54, 55, 56, 64, 65, 76, 77, 78, 79, 83, 87, 106], "mordern": 4, "dynam": [4, 67, 71, 73], "robust": [4, 73, 101], "high": [4, 5, 6, 56, 97, 98, 104], "level": [4, 6, 21, 26, 58, 90, 104, 105, 107, 108, 113], "interpret": [4, 6, 10, 14, 18, 22, 23, 24, 27, 45, 46, 49, 52, 53, 55, 59, 62, 63, 64, 68, 69, 70, 71, 75], "languag": [4, 6, 12, 13, 14, 22, 23, 24, 27, 28, 30, 32, 43, 45, 49, 62, 63, 64, 65, 69, 70, 76, 77, 81, 83, 87, 121], "web": [4, 6, 73], "develop": [4, 6, 14, 20, 47, 58, 65, 73, 76, 81, 91], "scienc": [4, 6, 27, 30, 43, 49, 55, 104, 107, 117, 122], "creat": [4, 6, 7, 9, 11, 12, 13, 14, 22, 23, 26, 34, 36, 37, 38, 39, 43, 44, 45, 46, 49, 50, 51, 53, 59, 60, 62, 63, 65, 66, 67, 71, 73, 76, 78, 79, 81, 82, 86, 97, 99, 100, 101, 107, 108, 109, 110, 111, 112, 113, 116, 122], "softwar": [4, 6, 20], "prototyp": [4, 77], "fortun": [4, 26], "beginn": [4, 62, 73, 122], "ha": [4, 6, 9, 11, 12, 13, 14, 15, 17, 19, 20, 22, 24, 26, 27, 30, 31, 32, 34, 40, 41, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 64, 65, 66, 67, 68, 70, 71, 73, 76, 77, 78, 81, 99, 100, 101, 104, 105, 106, 107, 110, 113, 114, 115, 116], "easi": [4, 6, 9, 22, 23, 27, 43, 58, 60, 62, 73, 76, 104, 105, 122], "make": [4, 6, 7, 10, 11, 12, 13, 14, 15, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 43, 45, 46, 47, 49, 50, 51, 53, 55, 58, 60, 63, 64, 65, 68, 69, 70, 71, 73, 76, 78, 79, 81, 82, 86, 97, 99, 100, 104, 105, 106, 108, 109, 111, 122], "an": [4, 6, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 32, 35, 39, 40, 41, 43, 44, 45, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 78, 79, 81, 87, 97, 98, 99, 100, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "excel": [4, 10, 43, 104], "what": [4, 10, 11, 12, 13, 14, 15, 18, 24, 26, 32, 39, 46, 50, 56, 59, 63, 64, 70, 77, 79, 116, 121], "keyboard": 4, "shortcut": 4, "practic": [4, 5, 14, 29, 46, 47, 49, 55, 60, 81, 98, 104, 116, 121], "hello": [4, 6, 10, 11, 12, 14, 18, 19, 22, 27, 28, 29, 31, 41, 45, 49, 52, 55, 59, 64, 65, 67, 68, 69, 70, 71, 75, 77, 78], "world": [4, 5, 6, 19, 22, 27, 45, 49, 53, 55, 59, 65, 67, 70, 71, 75, 76, 77, 104, 121], "keyword": [4, 11, 12, 15, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 46, 49, 50, 54, 55, 59, 61, 65, 69, 71, 75, 76, 77, 81], "identifi": [4, 12, 14, 27, 32, 46, 49, 54, 55, 58, 64, 65, 70, 71, 75, 76, 104, 105, 106, 109, 111, 113], "statement": [4, 10, 25, 28, 30, 34, 41, 43, 45, 47, 54, 62, 69, 70, 73, 75, 76, 77, 99], "indent": [4, 18, 19, 21, 22, 24, 43, 45, 49, 51, 75], "comment": [4, 13, 49, 65, 75, 97], "variabl": [4, 6, 10, 13, 14, 15, 18, 19, 20, 22, 23, 24, 26, 27, 28, 32, 34, 35, 37, 39, 45, 46, 49, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 75, 77, 78, 81, 108, 110, 111, 113, 114], "constant": [4, 14, 57, 66, 75, 98, 100], "liter": [4, 27, 35, 36, 45, 46, 52, 59, 64, 65, 68, 69, 70, 75], "datatyp": [4, 27, 29, 57, 67, 68, 75, 104, 105], "convers": [4, 27, 64, 75], "o": [4, 6, 10, 14, 22, 24, 27, 28, 29, 30, 31, 32, 44, 48, 66, 67, 68, 69, 75, 114], "import": [4, 6, 7, 12, 14, 17, 23, 26, 29, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 51, 54, 56, 57, 59, 63, 64, 65, 67, 71, 73, 75, 76, 81, 82, 86, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "oper": [4, 6, 10, 11, 12, 14, 15, 22, 23, 26, 32, 34, 43, 45, 46, 49, 50, 52, 58, 60, 64, 65, 67, 69, 72, 73, 75, 76, 77, 80, 90, 98, 101, 104, 108, 109, 111, 112, 113, 114, 122], "namespac": [4, 11, 13, 54, 55, 58, 64, 75, 77, 81, 97], "scope": [4, 11, 45, 50, 51, 55, 64, 69, 75], "list": [4, 9, 10, 12, 14, 15, 26, 31, 33, 34, 43, 45, 54, 56, 57, 58, 59, 63, 64, 66, 68, 69, 70, 76, 77, 78, 79, 81, 97, 98, 99, 100, 101, 104, 108, 110, 115, 116], "number": [4, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 27, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 56, 57, 59, 60, 63, 64, 65, 68, 70, 72, 77, 78, 79, 81, 97, 104, 105, 106, 107, 111], "string": [4, 9, 10, 11, 12, 13, 18, 24, 26, 29, 31, 33, 37, 38, 39, 40, 43, 44, 45, 46, 49, 54, 62, 64, 65, 68, 70, 76, 77, 79, 104, 105, 111, 113], "tupl": [4, 6, 9, 10, 11, 12, 14, 15, 27, 31, 32, 33, 40, 43, 49, 52, 55, 64, 66, 68, 69, 70, 77, 78, 97, 98, 101, 105, 106, 116], "dictionari": [4, 6, 12, 13, 15, 20, 27, 28, 29, 31, 32, 33, 45, 49, 59, 64, 66, 68, 70, 77, 104, 106, 111, 116], "set": [4, 6, 9, 13, 14, 23, 27, 28, 33, 43, 44, 49, 55, 66, 68, 70, 76, 77, 78, 98, 99, 101, 104, 105, 106, 108, 109, 110, 111, 122], "els": [4, 9, 11, 14, 17, 18, 21, 25, 27, 28, 30, 32, 43, 49, 52, 53, 55, 60, 63, 66, 69, 76, 77, 105, 108, 110, 111], "elif": [4, 11, 17, 21, 24, 25, 47, 63], "nest": [4, 12, 17, 19, 20, 25, 28, 29, 30, 50, 53, 71, 97, 98, 106], "loop": [4, 12, 15, 17, 25, 27, 28, 29, 30, 31, 41, 43, 46, 49, 52, 64, 69, 100, 104], "while": [4, 9, 10, 13, 15, 17, 25, 26, 27, 30, 31, 41, 43, 45, 47, 49, 52, 54, 55, 58, 63, 64, 68, 70, 71, 73, 76, 77, 78, 81, 99, 105, 106, 110, 112, 113], "break": [4, 9, 17, 25, 46, 47, 49, 55, 63, 64, 66, 69], "continu": [4, 10, 17, 25, 46, 63, 64, 77, 78], "pass": [4, 9, 11, 12, 14, 15, 17, 18, 19, 25, 27, 34, 35, 36, 40, 45, 46, 47, 52, 54, 55, 59, 63, 65, 76, 77, 78, 81, 98, 104, 105, 106, 107, 108, 111, 113], "global": [4, 11, 45, 54, 61, 63, 71], "local": [4, 6, 10, 11, 34, 36, 37, 38, 39, 40, 41, 45, 51, 54, 61, 71, 77, 78, 81, 104], "nonloc": [4, 51, 61, 63, 71], "argument": [4, 9, 10, 12, 13, 14, 15, 27, 31, 32, 34, 35, 36, 40, 41, 43, 44, 45, 47, 50, 54, 55, 59, 61, 65, 77, 81, 98, 101], "recurs": [4, 61, 78], "anonym": [4, 10, 32, 61], "random": [4, 7, 26, 31, 43, 61, 82, 86, 97, 104], "math": [4, 7, 26, 30, 45, 61, 69, 82, 86], "packag": [4, 43, 55, 61, 64, 104, 108, 111, 112, 113], "docstr": [4, 27, 61, 77], "user": [4, 6, 9, 12, 17, 19, 20, 22, 23, 26, 30, 32, 44, 45, 46, 48, 49, 52, 55, 61, 64, 65, 68, 70, 79, 102, 108, 111, 116], "directori": [4, 43, 45, 48, 55, 58, 69], "except": [4, 6, 9, 12, 14, 27, 28, 43, 48, 55, 59, 63, 64, 77, 109], "handel": [4, 48], "oop": [4, 46, 80], "concept": [4, 5, 8, 47, 64, 71, 78, 80, 97, 121], "inherit": [4, 46, 47, 80, 81], "overload": [4, 80, 100], "iter": [4, 10, 12, 16, 24, 32, 45, 53, 55, 57, 69, 72, 105], "closur": [4, 16], "decor": [4, 11, 16, 81], "properti": [4, 16, 55, 76, 78, 107], "regex": [4, 16, 115], "datetim": [4, 37, 42, 55, 104], "strftime": [4, 36, 37, 38, 39, 41, 42], "strptime": [4, 35, 42], "current": [4, 11, 22, 23, 24, 35, 39, 40, 41, 42, 43, 46, 51, 55, 56, 59, 62, 71, 76, 77, 78, 113, 114], "timestamp": [4, 42], "sleep": [4, 42, 55, 62], "arrai": [4, 6, 7, 22, 27, 30, 32, 43, 49, 55, 82, 86, 103, 104], "datafram": [4, 98, 115, 116, 117], "exercis": [4, 50, 51, 115, 117], "1": [4, 6, 7, 9, 11, 13, 15, 18, 19, 23, 26, 32, 40, 47, 50, 51, 52, 53, 54, 56, 57, 60, 71, 73, 77, 78, 79, 81, 82, 86, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117], "pyplot": [4, 7, 82, 86], "free": [4, 20, 43, 122], "open": [4, 6, 45, 46, 55, 59, 64, 97, 104, 115, 116, 121], "sourc": [4, 59, 62, 64, 69, 73, 97, 99, 101, 104, 109, 112, 115, 116, 121], "freeli": 4, "distribut": [4, 56, 76, 97, 98, 101], "even": [4, 6, 10, 11, 12, 13, 17, 19, 20, 22, 23, 24, 26, 27, 28, 32, 43, 46, 49, 50, 52, 53, 54, 59, 64, 65, 68, 69, 70, 73, 77, 78, 81, 100, 101, 105, 106, 109, 110], "commerci": 4, "veri": [4, 6, 10, 17, 23, 27, 28, 30, 31, 32, 43, 54, 62, 64, 67, 73, 81, 90, 97, 100, 101, 104, 105, 107, 108, 110], "eleg": [4, 9, 10, 11, 30, 32, 53], "much": [4, 6, 10, 13, 30, 55, 101], "easier": [4, 9, 13, 14, 32, 53, 58, 63, 69, 73, 81, 106], "read": [4, 10, 11, 14, 15, 41, 45, 46, 49, 50, 51, 59, 64, 65, 71, 73, 77, 98, 99, 100, 104, 112, 121], "compar": [4, 10, 19, 26, 27, 28, 29, 30, 31, 65, 70, 73, 79], "c": [4, 6, 12, 13, 14, 20, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 43, 44, 45, 46, 49, 54, 55, 57, 63, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 78, 81, 98, 99, 100, 101, 104, 108, 109, 110, 111, 112, 113, 115, 116], "java": [4, 22, 23, 27, 28, 30, 43, 64, 76, 81], "portabl": [4, 59, 73], "move": [4, 18, 22, 24, 43, 71, 111], "from": [4, 6, 7, 9, 10, 11, 12, 13, 14, 20, 22, 23, 24, 26, 27, 32, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 59, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 76, 77, 78, 79, 81, 82, 86, 90, 97, 98, 99, 100, 111, 112, 113], "one": [4, 6, 9, 10, 11, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 41, 43, 46, 50, 52, 53, 54, 55, 58, 59, 62, 63, 64, 66, 67, 68, 70, 71, 73, 77, 78, 79, 81, 83, 87, 90, 98, 99, 100, 101, 104, 105, 106, 108, 109, 111, 113, 114], "platform": [4, 6, 43, 73], "anoth": [4, 10, 11, 12, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 37, 43, 45, 49, 50, 51, 55, 58, 59, 63, 64, 66, 68, 69, 70, 71, 76, 77, 78, 99, 100, 104, 105, 106, 113], "without": [4, 9, 12, 18, 24, 27, 29, 31, 32, 35, 36, 43, 46, 51, 52, 54, 55, 58, 70, 71, 73, 76, 77, 78, 79, 100, 101, 108, 110, 113, 115, 121], "chang": [4, 6, 12, 18, 22, 23, 26, 31, 32, 39, 45, 46, 49, 50, 51, 52, 55, 67, 68, 69, 73, 76, 77, 78, 79, 98, 99, 101, 104, 107, 108, 109, 110, 111, 113], "Its": [4, 6, 122], "readabl": [4, 17, 32, 43, 54, 55, 64, 73, 81, 105], "lot": [4, 7, 10, 22, 23, 27, 53, 55, 58, 73, 82, 86, 99], "applic": [4, 14, 26, 27, 39, 43, 55, 58, 76, 77, 91, 100, 105, 111, 121, 122], "rapid": 4, "fewer": 4, "than": [4, 6, 10, 11, 14, 15, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 32, 34, 35, 41, 47, 53, 54, 55, 57, 65, 66, 67, 69, 70, 71, 73, 77, 78, 79, 81, 97, 99, 100, 104, 105, 107, 111, 113, 114], "most": [4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 26, 27, 28, 29, 30, 31, 36, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 55, 64, 66, 67, 68, 69, 70, 73, 76, 77, 78, 79, 81, 83, 87, 99, 100, 104, 106, 108, 111, 113], "popular": [4, 6, 27, 41, 55, 59, 73, 76], "grow": [4, 49, 58, 69], "rapidli": 4, "now": [4, 10, 11, 12, 13, 14, 17, 18, 19, 22, 23, 32, 34, 35, 37, 38, 39, 43, 45, 46, 49, 50, 51, 52, 54, 55, 58, 59, 62, 64, 66, 68, 69, 71, 76, 77, 78, 79, 81, 100, 111, 114, 122], "we": [4, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 81, 90, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 122], "provid": [4, 6, 11, 13, 17, 22, 24, 26, 27, 28, 30, 41, 44, 46, 47, 49, 52, 55, 59, 69, 76, 77, 78, 97, 100, 102, 104, 105, 106, 108, 111, 116, 122], "step": [4, 12, 22, 27, 28, 29, 43, 53, 56, 69, 71, 77, 97, 101, 104, 114], "tutori": [4, 9, 12, 19, 27, 43, 65, 71, 78, 79, 97, 116], "exampl": [4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 40, 43, 45, 46, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 71, 72, 76, 77, 79, 81, 82, 86, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 122], "offici": [4, 59], "might": [4, 5, 11, 17, 23, 24, 26, 41, 46, 64, 69, 81, 98], "hard": [4, 14, 43, 53, 64, 69], "visit": [4, 9, 13, 14, 27, 34, 40, 41, 45, 47, 49, 50, 56, 57, 59, 64, 78, 79, 104], "onli": [4, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 59, 62, 64, 65, 67, 70, 71, 73, 76, 77, 78, 79, 81, 98, 99, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116], "wai": [4, 6, 9, 10, 12, 13, 17, 21, 22, 23, 26, 27, 29, 30, 31, 32, 34, 37, 38, 43, 46, 47, 52, 55, 58, 60, 64, 67, 69, 70, 71, 79, 81, 98, 99, 104, 105, 106, 107, 108, 112, 122], "onlin": 4, "compil": [4, 6, 12, 14, 64, 75], "guid": [4, 7, 82, 86], "To": [5, 6, 9, 10, 13, 14, 15, 17, 19, 23, 24, 26, 27, 31, 32, 34, 39, 40, 41, 43, 45, 46, 47, 49, 50, 51, 55, 57, 59, 64, 66, 67, 68, 69, 71, 73, 76, 77, 78, 79, 91, 97, 98, 100, 101, 105, 106, 108, 109, 115], "mechan": [5, 59, 100], "behind": [5, 53, 54], "algorithm": [5, 22, 78, 121, 122], "function": [5, 6, 9, 13, 14, 15, 17, 23, 24, 26, 34, 40, 41, 43, 44, 45, 46, 50, 56, 58, 62, 63, 64, 65, 66, 67, 68, 71, 76, 77, 81, 83, 87, 97, 101, 104, 106], "essenti": [5, 78, 97, 101], "know": [5, 10, 11, 12, 13, 20, 22, 23, 24, 26, 46, 49, 52, 53, 55, 62, 65, 67, 69, 73, 78, 79, 81, 97, 99, 101, 107, 108, 111, 113, 122], "basic": [5, 12, 13, 14, 24, 26, 40, 47, 51, 55, 76, 100, 104, 121, 122], "These": [5, 12, 13, 26, 27, 41, 45, 46, 52, 53, 55, 56, 62, 64, 71, 76, 79, 111, 122], "mai": [5, 6, 10, 14, 20, 24, 26, 27, 28, 29, 31, 34, 35, 41, 43, 46, 47, 49, 51, 52, 58, 62, 68, 71, 73, 76, 77, 78, 81, 99, 104, 105, 106, 108, 109, 113], "new": [5, 6, 12, 13, 14, 17, 23, 27, 29, 31, 32, 35, 36, 38, 39, 43, 47, 51, 54, 62, 65, 69, 71, 76, 77, 78, 79, 81, 99, 101, 104, 105, 108, 109, 110, 111, 113, 116], "alreadi": [5, 11, 12, 20, 27, 28, 31, 43, 45, 55, 60, 73, 81, 104, 105, 114], "studi": [5, 8, 10, 62, 76, 101, 121, 122], "earli": 5, "school": [5, 26, 105], "dai": [5, 14, 26, 27, 35, 36, 37, 38, 39, 40, 49, 51], "linear": [5, 32, 49, 78, 97, 121], "algebra": [5, 97, 121], "calcula": 5, "probabl": [5, 26, 65, 98, 121], "cours": [5, 6, 27, 49, 55, 63, 70], "refresh": 5, "addition": [5, 76], "abl": [5, 9, 11, 52, 68, 71, 78], "relat": [5, 34, 40, 41, 43, 45, 46, 52, 79], "usag": [5, 13, 54, 73, 104, 105], "ml": [5, 122], "intuit": [5, 13, 104], "real": [5, 6, 26, 65, 66, 67, 76, 77, 104, 121], "e": [5, 6, 10, 14, 22, 23, 24, 26, 27, 28, 29, 30, 31, 43, 44, 46, 50, 51, 55, 57, 62, 65, 66, 68, 69, 70, 76, 78, 98, 100, 101, 104, 105, 106, 109, 110, 111, 112, 113, 114, 122], "g": [5, 12, 24, 28, 29, 43, 65, 98, 100, 101, 104], "signific": [5, 26, 65, 104], "dot": [5, 8, 55, 58, 76, 77, 97, 100, 122], "product": [5, 8, 53, 55, 59, 65, 73, 79, 97, 100, 121], "life": [5, 50, 122], "colab": [5, 6, 122], "environ": [5, 55, 73], "interact": [5, 6, 7, 10, 43, 55, 62, 69, 77, 82, 86, 104], "do": [6, 7, 9, 10, 13, 14, 17, 18, 19, 22, 23, 24, 27, 28, 29, 31, 32, 38, 45, 46, 47, 49, 52, 55, 56, 57, 59, 60, 64, 65, 67, 69, 70, 71, 73, 76, 77, 78, 79, 81, 82, 83, 86, 87, 90, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 122], "pretti": [6, 12, 39, 62, 67, 104], "anyth": [6, 18, 27, 49, 77, 81, 108, 111, 113, 114], "autom": [6, 22, 23], "everi": [6, 19, 22, 24, 26, 27, 31, 32, 36, 46, 53, 55, 67, 71, 73, 76, 77, 78, 79, 81, 98, 104], "task": [6, 12, 22, 23, 28, 30, 31, 37, 40, 41, 46, 49, 53, 55, 60, 62, 69, 70, 73, 79, 121], "simpler": [6, 53], "learn": [6, 8, 9, 10, 11, 13, 14, 15, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 76, 77, 78, 79, 90, 97, 104, 106, 107, 109, 111, 112, 113, 114, 116], "offer": [6, 26, 28, 56, 70, 99, 102], "error": [6, 9, 12, 13, 24, 26, 27, 30, 31, 43, 46, 47, 49, 50, 52, 57, 63, 64, 67, 68, 69, 73, 76, 77, 78, 79, 100, 105, 113], "being": [6, 13, 14, 23, 28, 30, 31, 49, 52, 67, 76, 78, 83, 87], "data": [6, 7, 9, 10, 11, 12, 14, 15, 22, 23, 27, 28, 29, 30, 31, 36, 43, 44, 46, 49, 52, 55, 59, 65, 66, 68, 69, 70, 73, 76, 78, 82, 86, 90, 97, 99, 100, 107, 108, 109, 110, 111, 112, 114, 117, 122], "type": [6, 9, 11, 14, 15, 17, 22, 23, 24, 27, 31, 32, 34, 36, 38, 39, 45, 46, 50, 52, 53, 55, 62, 63, 64, 65, 70, 71, 73, 75, 76, 79, 81, 97, 99, 100, 101, 104, 111, 112, 115, 116], "flexibl": [6, 15, 67, 69, 104], "becaus": [6, 10, 12, 22, 23, 24, 27, 35, 45, 46, 49, 50, 51, 52, 54, 62, 63, 64, 65, 66, 67, 68, 70, 76, 77, 78, 81, 105, 107, 108, 109, 110, 111, 113, 114], "its": [6, 10, 11, 12, 22, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 43, 49, 50, 52, 55, 59, 67, 70, 71, 73, 76, 77, 78, 81, 104, 105, 106, 107, 108, 110, 112, 114], "larger": [6, 11, 49, 58, 68, 73, 100], "problem": [6, 11, 13, 15, 27, 46, 53, 76, 122], "domain": 6, "awk": 6, "perl": 6, "yet": [6, 24], "least": [6, 10, 14, 28, 30, 41, 64, 71, 77, 81, 100], "those": [6, 17, 41, 50, 54, 55, 56, 60, 71, 76, 77, 83, 87, 102], "split": [6, 12, 22, 27, 31, 69, 97, 104, 112], "program": [6, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 47, 49, 50, 51, 54, 55, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 71, 77, 78, 79, 81, 121], "modul": [6, 9, 10, 11, 12, 13, 14, 15, 23, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 50, 52, 53, 54, 61, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 81, 99, 100, 108, 111, 113], "reus": [6, 13, 76, 99], "come": [6, 10, 13, 23, 24, 26, 27, 32, 46, 49, 60, 62, 71, 79, 81, 104], "larg": [6, 10, 28, 44, 45, 47, 55, 60, 70, 73, 98, 100, 104, 107, 114, 116], "collect": [6, 9, 22, 23, 30, 31, 41, 44, 45, 55, 67, 71, 77, 102, 112], "standard": [6, 46, 47, 49, 55, 57, 59, 65, 69, 76, 97, 98, 101, 104, 107, 114], "basi": [6, 27, 28], "system": [6, 9, 24, 26, 40, 43, 44, 45, 55, 64, 79, 121], "socket": 6, "interfac": [6, 13, 46, 76], "graphic": [6, 46], "toolkit": 6, "tk": 6, "save": [6, 9, 10, 55, 62, 73], "consider": [6, 32, 121], "time": [6, 9, 10, 12, 17, 21, 22, 23, 24, 26, 27, 29, 36, 50, 53, 54, 55, 63, 64, 65, 71, 73, 77, 78, 79, 81, 100, 104, 108, 109, 121, 122], "dure": [6, 32, 45, 46, 52, 54, 55, 73, 81], "link": [6, 73], "necessari": [6, 9, 21, 23, 59, 113], "experi": [6, 121], "featur": [6, 12, 76, 78, 79, 108, 122], "throw": [6, 46, 50, 73, 105, 107, 108, 111, 113], "awai": [6, 14, 65], "test": [6, 14, 18, 19, 23, 24, 43, 44, 45, 46, 51, 55, 62, 70, 77, 115], "bottom": [6, 99, 104], "up": [6, 9, 13, 17, 22, 23, 24, 26, 43, 46, 49, 50, 52, 53, 60, 62, 64, 67, 68, 69, 73, 97, 104, 115, 122], "handi": [6, 104, 115, 116], "desk": 6, "known": [6, 11, 22, 23, 26, 29, 30, 50, 54, 65, 68, 73, 76, 77, 79, 100], "natur": [6, 12, 23, 55, 57, 71, 97, 121], "almost": 6, "each": [6, 9, 10, 12, 19, 20, 22, 23, 24, 27, 28, 29, 30, 31, 46, 49, 53, 54, 55, 59, 64, 65, 66, 67, 68, 69, 71, 73, 76, 77, 78, 81, 97, 98, 99, 100, 104, 105, 106, 111, 112, 113, 114, 115, 121], "whole": [6, 14, 24, 27, 41, 49, 55, 70, 104, 105, 107], "sphere": 6, "here": [6, 7, 9, 10, 11, 12, 13, 14, 20, 22, 23, 24, 26, 28, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 69, 70, 71, 76, 77, 78, 79, 82, 83, 86, 87, 90, 99, 100, 101, 105, 106, 113, 122], "where": [6, 9, 11, 12, 13, 21, 23, 24, 26, 27, 28, 29, 32, 40, 43, 45, 46, 49, 50, 51, 55, 67, 68, 69, 70, 71, 73, 77, 78, 81, 99, 100, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114], "appli": [6, 12, 13, 45, 54, 107, 108, 110, 111, 112, 114], "librari": [6, 27, 57, 60, 64, 97, 104, 105, 112, 113, 114, 115, 116, 121, 122], "handl": [6, 9, 10, 11, 24, 27, 40, 41, 43, 44, 45, 47, 52, 97, 99, 105, 113], "internet": 6, "protocol": [6, 9], "html": [6, 7, 27, 28, 43, 76, 82, 86, 100, 104], "xml": 6, "json": [6, 55, 104], "email": [6, 14, 15, 43, 72], "process": [6, 10, 23, 24, 29, 32, 41, 46, 53, 68, 73, 76, 77, 78, 81, 104, 106, 110, 121], "request": [6, 99], "beautifulsoup": 6, "feedpars": 6, "etc": [6, 7, 9, 10, 22, 23, 24, 26, 27, 29, 30, 31, 34, 35, 36, 40, 49, 54, 55, 63, 64, 65, 68, 70, 71, 73, 76, 77, 82, 86, 97, 99, 100, 101, 104, 112, 115, 116, 122], "framework": [6, 91], "django": [6, 27], "pyramid": [6, 22, 27], "flask": [6, 27], "design": [6, 12, 104, 122], "delelop": 6, "pythonwikiengin": 6, "pocoo": 6, "pythonblogsoftwar": 6, "ai": [6, 90, 122], "machin": [6, 8, 20, 78, 90, 122], "prebuilt": 6, "numpi": [6, 7, 22, 59, 82, 86, 99, 100, 104, 110, 114, 121], "scientif": [6, 97], "comput": [6, 21, 26, 27, 31, 32, 41, 43, 46, 58, 62, 64, 70, 73, 76, 78, 97, 100, 115], "scipi": [6, 100], "advanc": [6, 24, 52, 65], "pybrain": 6, "best": [6, 10, 12, 22, 24, 27, 28, 43, 60, 73], "desktop": [6, 44], "gui": [6, 46], "wxwidget": 6, "kivi": 6, "pyqt": 6, "useabl": 6, "sever": [6, 10, 14, 20, 28, 40, 41, 46, 55, 69, 99], "multitouch": 6, "work": [6, 7, 10, 11, 12, 14, 15, 22, 23, 24, 26, 28, 30, 32, 34, 43, 44, 46, 50, 53, 55, 60, 67, 69, 70, 73, 76, 77, 78, 79, 82, 86, 97, 99, 100, 104, 107, 111, 122], "build": [6, 10, 13, 14, 76, 77, 83, 87, 104, 121], "control": [6, 10, 18, 19, 26, 27, 64, 76, 79, 81], "numer": [6, 22, 23, 26, 27, 47, 55, 65, 69, 79, 97, 98, 104], "wide": [6, 69, 101, 104, 111], "panda": [6, 22, 121], "ipython": [6, 9, 10, 11, 12, 13, 15, 23, 27, 28, 29, 30, 31, 36, 41, 43, 45, 46, 47, 50, 51, 52, 53, 55, 63, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 81, 99, 100, 108, 111, 113, 116], "group": [6, 104, 116], "engin": [6, 14, 77, 104, 105, 115, 116], "mathemat": [6, 22, 31, 32, 55, 65, 70, 79, 104, 121, 122], "busi": [6, 104], "bussi": 6, "erp": 6, "commerc": 6, "tryton": 6, "consol": [6, 69, 104], "audio": 6, "video": [6, 122], "awesom": 6, "perform": [6, 9, 11, 15, 17, 22, 23, 26, 27, 28, 29, 30, 31, 32, 43, 46, 49, 54, 55, 60, 62, 67, 68, 69, 70, 73, 76, 79, 90, 97, 100, 104, 108, 111, 113, 114, 122], "multipl": [6, 10, 12, 20, 22, 24, 27, 28, 31, 32, 43, 50, 52, 54, 63, 64, 66, 70, 73, 76, 77, 79, 81, 97, 98, 104, 105, 107, 109, 110, 114, 116], "multimedia": 6, "timplay": 6, "cplai": 6, "3d": [6, 99], "cad": 6, "fandango": 6, "full": [6, 34, 35, 36, 43, 44, 49, 55, 58, 65, 70, 98, 100], "enterpris": 6, "within": [6, 9, 14, 23, 24, 29, 43, 44, 49, 51, 58, 67, 76, 78, 101, 104], "organ": [6, 28, 34, 49, 55, 58, 69, 76], "openerp": 6, "picalo": 6, "imag": [6, 7, 43, 53, 66, 77, 82, 86], "vpython": 6, "gogh": 6, "imgseek": 6, "game": [6, 58], "pygam": 6, "pykyra": 6, "apart": [6, 28, 100], "varieti": [6, 27], "render": [6, 44, 83, 87], "re": [6, 23, 27, 28, 49, 55, 104, 113, 114, 115], "out": [6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 43, 45, 47, 49, 52, 54, 55, 62, 63, 64, 65, 66, 67, 70, 79, 82, 86, 99, 101, 102, 104], "pyweek": 6, "semi": [6, 78], "annual": [6, 105], "contest": 6, "go": [6, 12, 13, 21, 22, 24, 26, 46, 49, 53, 64, 70, 71, 73, 76, 79, 81, 97, 115, 122], "websit": [6, 65], "http": [6, 100], "www": 6, "org": [6, 100], "download": [6, 55, 101], "latest": 6, "version": [6, 41, 43, 54, 55, 56, 70, 100, 112], "depend": [6, 11, 17, 24, 43, 47, 55, 56, 79, 83, 87, 97, 104], "sure": [6, 7, 14, 15, 46, 51, 82, 86, 97], "checkbox": 6, "add": [6, 11, 12, 14, 15, 19, 20, 22, 23, 29, 31, 32, 45, 46, 49, 51, 52, 54, 55, 60, 64, 65, 66, 68, 69, 70, 76, 77, 78, 79, 97, 100, 101, 104, 105, 106, 111, 114], "onc": [6, 10, 14, 22, 24, 27, 29, 30, 31, 34, 43, 46, 49, 50, 52, 55, 62, 65, 67, 73, 107, 108, 111, 122], "done": [6, 10, 12, 13, 18, 19, 22, 23, 24, 27, 32, 43, 58, 62, 68, 69, 73, 78, 81, 105, 109, 112], "successful": 6, "directli": [6, 10, 28, 47, 49, 55, 58, 71, 73, 76, 77, 100, 122], "insrantli": 6, "could": [6, 9, 24, 27, 43, 46, 58, 60, 71, 76, 77, 81, 100, 101, 108, 110], "pycharm": 6, "vscode": 6, "intiuit": 6, "ui": 6, "visualstudio": 6, "com": [6, 15, 49, 52, 65, 72], "requir": [6, 8, 9, 10, 13, 17, 22, 23, 26, 32, 45, 46, 47, 49, 52, 54, 58, 64, 65, 66, 68, 73, 76, 77, 78, 81, 90, 104, 108, 110, 111, 114, 122], "experiment": [6, 122], "well": [6, 7, 11, 17, 19, 20, 22, 23, 24, 26, 27, 38, 44, 46, 54, 58, 64, 65, 70, 71, 76, 77, 78, 79, 82, 86, 104, 106, 107, 108, 111], "third": [6, 27, 34, 55, 58, 67, 69, 78, 101, 104, 107], "parti": [6, 34, 58], "pip": [6, 43, 55], "poetri": 6, "conda": [6, 97], "virtualenv": 6, "alwai": [6, 9, 17, 18, 46, 47, 49, 55, 56, 57, 60, 62, 63, 64, 68, 70, 71, 77, 78, 81, 99, 104], "recommend": [6, 13, 14, 15, 35, 36, 41, 43, 58, 64, 65, 77, 97, 98, 121], "isol": [6, 71], "variou": [6, 12, 14, 22, 23, 26, 27, 28, 29, 30, 32, 43, 55, 59, 66, 67, 70, 71, 97, 104, 109, 112, 122], "project": [6, 34, 58, 60, 121], "instead": [6, 10, 11, 13, 15, 19, 23, 45, 55, 65, 73, 76, 77, 78, 79, 100, 104, 106, 116], "them": [6, 9, 11, 26, 27, 28, 29, 30, 31, 41, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 57, 65, 69, 70, 71, 76, 77, 78, 79, 90, 101, 104, 106, 122], "env": 6, "venv": 6, "3": [6, 9, 11, 13, 15, 18, 19, 21, 23, 26, 30, 32, 36, 40, 46, 47, 50, 51, 52, 53, 54, 57, 60, 62, 63, 68, 71, 73, 74, 76, 77, 78, 79, 81, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115], "activ": [6, 39, 121], "script": [6, 46, 55, 70, 73], "12": [6, 10, 14, 15, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 32, 35, 36, 38, 39, 40, 41, 45, 47, 49, 50, 54, 55, 66, 67, 69, 70, 72, 76, 81, 98, 99, 100, 101, 108, 115, 116], "tag": [6, 43], "v3": 6, "2305ca5": 6, "dec": [6, 12, 35, 36, 40, 62], "7": [6, 9, 12, 13, 15, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 38, 40, 41, 43, 46, 49, 50, 51, 52, 54, 55, 64, 65, 66, 67, 68, 69, 70, 77, 78, 79, 81, 98, 99, 100, 101, 104, 105, 111, 115], "2023": 6, "22": [6, 27, 28, 31, 32, 34, 35, 37, 38, 40, 41, 47, 52, 54, 55, 70, 99, 100, 101, 105, 115], "03": [6, 27, 41], "25": [6, 12, 15, 22, 23, 24, 26, 28, 30, 31, 32, 35, 39, 41, 43, 46, 55, 66, 67, 69, 70, 76, 77, 99, 100, 104, 115], "msc": 6, "v": [6, 8, 22, 27, 30, 43, 46, 65, 75, 100], "1937": 6, "64": [6, 22, 23, 24, 28, 32, 54, 100, 115], "bit": [6, 29, 56, 70, 73], "amd64": 6, "win32": [6, 55], "copyright": 6, "credit": 6, "licens": [6, 104, 115, 116], "100": [6, 7, 10, 14, 20, 22, 23, 24, 28, 30, 32, 49, 54, 55, 66, 70, 78, 79, 82, 86, 98, 99, 101, 104, 105, 106, 115, 116], "56": [6, 21, 22, 24, 30, 34, 38, 41, 55, 104, 105, 107, 114, 115, 116], "156": [6, 115, 116], "As": [6, 7, 9, 11, 13, 14, 15, 22, 23, 24, 26, 29, 30, 41, 43, 45, 46, 49, 51, 52, 58, 59, 62, 65, 66, 68, 69, 70, 73, 76, 77, 81, 82, 86, 104, 105, 106, 107, 109, 110, 113, 114], "saw": [6, 77], "abov": [6, 9, 10, 11, 12, 13, 14, 15, 18, 19, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 64, 65, 66, 68, 71, 76, 77, 78, 79, 81, 97, 99, 104, 106, 107, 108, 109, 111, 112, 113, 114], "act": [6, 12, 17, 50, 59, 70, 76, 77], "mode": [6, 43, 46, 55, 56, 76, 77, 115], "x": [6, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 32, 35, 36, 43, 49, 50, 51, 52, 54, 55, 57, 59, 64, 65, 66, 67, 69, 70, 77, 78, 79, 81, 97, 98, 99, 100, 101, 104, 105, 111, 115, 116], "4": [6, 7, 9, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 40, 46, 49, 50, 51, 52, 53, 54, 55, 57, 62, 63, 65, 68, 69, 73, 76, 77, 78, 81, 82, 86, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 111, 113, 115], "5": [6, 7, 9, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 68, 69, 71, 73, 76, 77, 78, 79, 81, 82, 86, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 111, 115], "append": [6, 22, 32, 43, 46, 49, 54, 55, 59, 69, 76, 97, 101, 104, 111, 113, 116], "8": [6, 9, 12, 13, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 40, 41, 43, 46, 47, 49, 50, 51, 52, 54, 55, 62, 64, 65, 67, 68, 69, 70, 74, 76, 77, 79, 81, 98, 99, 100, 101, 104, 105, 107, 108, 111, 113, 115], "There": [6, 7, 9, 10, 13, 14, 15, 17, 22, 23, 27, 28, 29, 31, 37, 38, 43, 45, 52, 55, 59, 63, 65, 66, 67, 70, 77, 79, 81, 82, 86, 104, 105, 107, 108, 110], "launch": 6, "folder": [6, 12, 44, 55, 104, 115, 116], "ask": [6, 10, 17, 26, 47, 69], "chose": 6, "select": [6, 27, 97, 99, 105, 108, 111, 116], "ctrl": [6, 23, 45], "shift": [6, 19, 22, 23, 24, 64, 70, 79], "p": [6, 14, 22, 24, 27, 28, 29, 31, 32, 35, 36, 41, 65, 69, 72, 76], "reciev": 6, "notif": 6, "store": [6, 9, 10, 11, 13, 22, 24, 26, 27, 28, 35, 39, 43, 46, 47, 51, 58, 65, 68, 69, 70, 71, 73, 76, 78, 100, 104, 105, 106, 112], "progress": 6, "A": [6, 9, 10, 11, 12, 13, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 41, 43, 44, 45, 46, 49, 50, 52, 53, 55, 58, 59, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 78, 81, 97, 98, 99, 101, 104, 105, 107, 108, 111, 112, 114, 115], "window": [6, 43, 44, 62, 77], "browser": 6, "click": [6, 122], "renam": [6, 97, 114], "googl": [6, 27, 59, 78], "binder": 6, "rocket": 6, "icon": [6, 122], "addit": [6, 8, 15, 26, 46, 49, 52, 54, 59, 65, 68, 69, 70, 76, 78, 79, 97], "ad": [6, 12, 13, 14, 22, 24, 26, 28, 29, 31, 39, 45, 49, 68, 69, 78, 100, 101, 104, 105, 106, 112, 114], "cell": [6, 11, 50], "copi": [6, 27, 31, 44, 55, 76, 100, 101, 104, 108, 109, 110, 111, 113, 114], "love": [6, 12, 14, 31, 69], "access": [6, 11, 13, 20, 31, 35, 40, 43, 45, 49, 50, 51, 54, 55, 57, 58, 59, 64, 67, 70, 71, 76, 78, 81, 97, 98, 99, 104, 105, 106, 107], "charact": [6, 12, 17, 22, 23, 24, 35, 36, 43, 55, 62, 64, 65, 67, 69, 111], "0": [6, 7, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 41, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 63, 65, 66, 67, 68, 69, 70, 73, 76, 77, 78, 79, 81, 82, 86, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116], "rang": [6, 7, 10, 14, 23, 24, 27, 28, 29, 30, 32, 41, 45, 46, 47, 49, 55, 56, 64, 67, 76, 78, 82, 86, 97, 98, 99, 100, 104, 105, 106], "start_index": 6, "end_index": 6, "6": [6, 9, 10, 11, 12, 13, 15, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 40, 41, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 65, 66, 68, 69, 76, 77, 78, 81, 97, 98, 99, 100, 101, 104, 105, 107, 111, 115], "last": [6, 9, 10, 11, 12, 13, 15, 22, 23, 24, 27, 28, 29, 30, 31, 36, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 55, 59, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 81, 99, 100, 101, 104, 111, 113, 114], "hon": 6, "compound": [6, 28, 70], "p_list": 6, "10": [6, 7, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 35, 38, 41, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 63, 64, 65, 66, 67, 68, 69, 70, 72, 76, 77, 79, 81, 82, 86, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115], "int": [6, 9, 11, 12, 22, 23, 26, 27, 28, 29, 45, 46, 47, 59, 66, 67, 68, 69, 70, 77, 78, 110, 111], "14": [6, 13, 14, 22, 24, 27, 28, 29, 30, 32, 37, 39, 41, 45, 49, 50, 65, 66, 67, 70, 74, 76, 77, 81, 99, 100, 101, 115, 116], "float": [6, 13, 21, 24, 27, 28, 29, 31, 34, 41, 45, 46, 55, 56, 57, 60, 64, 66, 67, 68, 70, 78, 98, 104], "3j": [6, 26, 66, 67, 77], "complex": [6, 22, 23, 26, 53, 57, 64, 66, 67, 70, 77, 78, 90, 104, 105, 115, 116], "asabeneh": [6, 43], "name": [6, 10, 11, 12, 13, 14, 15, 22, 23, 24, 26, 27, 28, 29, 30, 32, 34, 35, 36, 40, 41, 43, 44, 45, 46, 49, 50, 52, 54, 58, 59, 60, 63, 64, 66, 67, 68, 70, 72, 76, 77, 78, 79, 81, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115], "9": [6, 9, 10, 11, 12, 15, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 40, 41, 43, 46, 47, 49, 50, 51, 52, 54, 55, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 76, 77, 79, 81, 97, 98, 99, 100, 101, 104, 105, 107, 111, 112, 113, 115], "class": [6, 9, 10, 11, 15, 23, 24, 26, 35, 36, 37, 38, 44, 50, 51, 53, 54, 58, 60, 63, 64, 67, 68, 69, 71, 73, 79, 81, 97, 98, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114], "str": [6, 14, 24, 27, 28, 36, 43, 45, 49, 59, 67, 68, 69, 77, 78, 79, 111, 115], "dict": [6, 15, 31, 43, 46, 49, 55, 66, 67, 68, 77, 106, 107, 108, 109, 110, 111, 113, 114, 116], "give": [6, 9, 12, 14, 18, 19, 20, 22, 24, 26, 27, 46, 49, 55, 57, 63, 65, 70, 76, 77, 90, 97, 98, 100, 101, 104, 105, 106, 112, 113, 114, 115, 116], "absolut": [6, 11, 13, 17, 49, 57], "valu": [6, 8, 9, 10, 12, 13, 14, 15, 18, 19, 21, 22, 23, 26, 27, 31, 32, 34, 40, 43, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 59, 62, 64, 66, 67, 68, 70, 71, 77, 97, 98, 99, 100, 101, 104, 106, 108, 109, 111, 113, 114, 115, 116], "ab": [6, 14, 28, 34, 43, 102], "max": [6, 9, 10, 31, 76, 78, 97, 100, 101, 102, 104, 116], "definit": [6, 12, 22, 49, 52, 54, 55, 59, 64, 69, 76, 77, 78, 81], "method": [6, 9, 10, 11, 12, 13, 22, 23, 32, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 52, 55, 58, 59, 64, 69, 73, 77, 79, 81, 100, 104, 105, 108, 111, 113, 114, 122], "repr": 6, "builtin": [6, 59], "obj": [6, 9, 13, 32, 76, 77, 81, 108], "return": [6, 9, 10, 12, 13, 14, 20, 22, 23, 27, 31, 32, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 69, 70, 76, 77, 78, 79, 81, 98, 99, 100, 101, 104, 108, 109, 110, 111, 112, 113, 114], "canon": 6, "represent": [6, 26, 27, 35, 36, 59, 76, 104], "object": [6, 9, 10, 11, 12, 13, 22, 26, 27, 28, 29, 30, 31, 35, 37, 39, 40, 44, 45, 46, 47, 49, 52, 53, 54, 55, 56, 59, 64, 65, 67, 68, 69, 70, 71, 78, 79, 81, 97, 98, 100, 101, 105, 106, 111, 112, 113, 115], "eval": [6, 49, 69], "mean": [7, 11, 13, 14, 18, 19, 22, 23, 24, 27, 28, 29, 31, 34, 35, 36, 40, 45, 50, 52, 55, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 79, 81, 82, 86, 97, 98, 101, 104, 115, 116], "emb": [7, 82, 86], "post": [7, 39, 82, 86], "add_": [7, 82, 86], "begin": [7, 13, 22, 27, 28, 29, 40, 43, 55, 59, 64, 65, 77, 79, 81, 82, 86, 113, 114, 115], "align": [7, 27, 82, 86, 104], "mbox": [7, 82, 86], "la_": [7, 82, 86], "tex": [7, 82, 86], "end": [7, 9, 10, 18, 22, 23, 24, 27, 29, 36, 41, 43, 45, 46, 49, 53, 59, 64, 67, 69, 73, 82, 86, 97, 101, 104, 105, 122], "But": [7, 10, 11, 12, 17, 20, 23, 24, 26, 27, 29, 31, 32, 46, 52, 54, 55, 60, 64, 65, 67, 69, 70, 76, 77, 79, 82, 86, 104, 105, 106, 109, 110, 111, 113, 114], "escap": [7, 44, 82, 86], "dollar": [7, 82, 86], "sign": [7, 52, 57, 64, 65, 82, 86], "want": [7, 10, 12, 13, 14, 17, 19, 21, 22, 23, 24, 26, 27, 28, 43, 44, 46, 50, 55, 58, 62, 64, 65, 69, 71, 76, 77, 78, 79, 81, 82, 86, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 122], "keep": [7, 10, 14, 23, 52, 58, 77, 82, 86, 105, 110], "check": [7, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 43, 46, 49, 51, 55, 65, 67, 70, 76, 77, 78, 82, 86, 101, 104, 109, 113], "sampl": [7, 9, 43, 56, 66, 76, 78, 82, 86, 98, 101], "matplotlib": [7, 82, 86], "rcparam": [7, 82, 86], "cycler": [7, 82, 86], "plt": [7, 82, 86], "np": [7, 82, 86, 97, 98, 99, 100, 101, 104, 110, 114, 116], "ion": [7, 82, 86], "fix": [7, 22, 45, 52, 73, 82, 86, 104], "state": [7, 10, 43, 56, 71, 76, 82, 86, 98], "reproduc": [7, 82, 86], "seed": [7, 56, 82, 86], "19680801": [7, 82, 86], "n": [7, 9, 10, 11, 15, 18, 19, 22, 23, 24, 27, 28, 29, 32, 43, 46, 47, 49, 52, 53, 54, 55, 59, 62, 64, 65, 66, 68, 69, 72, 76, 77, 78, 82, 86, 97, 98, 101, 104, 105, 106, 109, 110, 111, 112, 113, 114, 116], "logspac": [7, 82, 86], "randn": [7, 82, 86], "ii": [7, 82, 86], "t": [7, 13, 20, 22, 23, 24, 27, 28, 29, 30, 31, 32, 34, 36, 38, 40, 43, 46, 49, 51, 55, 58, 62, 65, 66, 67, 68, 69, 73, 76, 77, 78, 79, 81, 82, 86, 97, 100, 101, 102, 104, 111, 112, 113, 114, 115], "cmap": [7, 82, 86], "cm": [7, 82, 86], "coolwarm": [7, 82, 86], "ax": [7, 82, 86, 108, 111], "prop_cycl": [7, 82, 86], "color": [7, 22, 30, 55, 76, 77, 82, 86], "linspac": [7, 82, 86, 97, 102], "line2d": [7, 82, 86], "custom_lin": [7, 82, 86], "lw": [7, 82, 86], "fig": [7, 28, 31, 82, 86], "subplot": [7, 82, 86], "figsiz": [7, 82, 86], "plot": [7, 82, 86], "legend": [7, 82, 86], "cold": [7, 27, 82, 86], "medium": [7, 10, 82, 86], "hot": [7, 82, 86], "li": 8, "heart": 8, "approach": [8, 76, 100, 108, 111], "especi": [8, 73, 81, 97], "predomin": 8, "deep": [8, 24, 97, 121], "deal": [8, 13, 24, 26, 27, 43, 68, 101, 104], "vector": [8, 79, 100, 101], "matric": [8, 100], "plane": 8, "map": [8, 32, 64, 71, 104, 111], "transform": [8, 73, 121], "In": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 78, 79, 81, 90, 91, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "below": [8, 10, 12, 13, 18, 19, 22, 23, 24, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 49, 52, 53, 55, 58, 59, 62, 63, 65, 66, 67, 69, 70, 76, 78, 79, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "scalar": [8, 100, 101, 104, 105], "multip": 8, "matrix": [8, 32, 97, 98, 99, 101, 104], "subtract": [8, 26, 49, 65, 70, 79, 97, 100], "transpos": [8, 32, 97, 100, 105, 106, 112], "invers": [8, 24, 40, 57, 97, 100], "tensor": 8, "eigenvector": 8, "eigenvalu": [8, 100], "space": [8, 14, 17, 20, 22, 24, 27, 45, 49, 52, 59, 62, 64, 69, 90, 97, 101, 104], "orthogonol": 8, "factor": [8, 24], "singl": [8, 12, 14, 22, 27, 28, 31, 41, 46, 51, 54, 66, 67, 69, 73, 76, 81, 98, 99, 104, 106, 113], "decomposit": [8, 100], "svd": [8, 102], "dimension": [8, 22, 32, 97, 98, 104, 106, 121], "reduct": [8, 121], "upon": [9, 24, 47, 78, 79, 81, 122], "own": [9, 45, 46, 47, 54, 55, 58, 59, 60, 62, 69, 71, 81], "__iter__": [9, 10], "__next__": [9, 10], "everywher": 9, "thei": [9, 10, 12, 13, 17, 19, 21, 24, 26, 27, 28, 29, 30, 31, 43, 45, 47, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 73, 76, 77, 81, 83, 87, 98, 100, 104, 109, 113], "elegantli": 9, "implement": [9, 11, 12, 13, 24, 26, 28, 29, 47, 49, 55, 64, 73, 76, 78, 79, 81, 100, 121, 122], "comprehens": [9, 10, 22], "hidden": [9, 76], "plain": [9, 81], "sight": 9, "simpli": [9, 10, 12, 13, 23, 27, 49, 58, 64, 70, 71, 77, 78, 100, 108], "element": [9, 22, 23, 26, 27, 40, 44, 49, 54, 55, 56, 62, 67, 68, 69, 70, 72, 77, 98, 99, 100, 101, 104, 106, 107], "technic": [9, 81], "speak": [9, 10, 81], "must": [9, 11, 12, 21, 22, 26, 27, 28, 29, 30, 31, 43, 44, 46, 49, 50, 52, 53, 55, 56, 58, 59, 63, 64, 65, 67, 68, 71, 73, 77, 78, 81, 99, 105, 109, 110], "special": [9, 12, 15, 63, 64, 65, 77, 81, 83, 87, 104], "contain": [9, 10, 12, 20, 22, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 40, 43, 44, 46, 54, 55, 58, 59, 65, 66, 68, 69, 71, 76, 77, 101, 104, 105, 109, 110, 112, 113, 114, 115, 116, 122], "turn": [9, 26, 43, 46, 70, 73, 79], "next": [9, 10, 18, 20, 22, 23, 24, 27, 43, 45, 46, 55, 56, 64, 73], "manual": [9, 46, 47, 101], "item": [9, 10, 12, 14, 15, 22, 23, 27, 31, 32, 45, 46, 49, 54, 55, 59, 67, 77, 97, 105, 108], "reach": [9, 13, 22, 24, 43, 90], "rais": [9, 10, 13, 24, 27, 28, 29, 30, 31, 36, 43, 45, 47, 55, 57, 59, 63, 70, 79, 81, 108, 113], "stopiter": [9, 10, 24, 45], "my_list": [9, 10, 28, 54, 98, 104], "my_it": 9, "left": [9, 14, 22, 27, 35, 36, 38, 58, 69, 70, 78, 79, 99, 104], "traceback": [9, 10, 11, 12, 13, 15, 23, 27, 28, 29, 30, 31, 36, 41, 43, 45, 46, 47, 50, 51, 52, 53, 55, 64, 66, 67, 68, 69, 70, 76, 77, 78, 79, 81, 99, 108, 111, 113], "recent": [9, 10, 11, 12, 13, 15, 23, 27, 28, 29, 30, 31, 36, 41, 43, 45, 46, 47, 50, 51, 52, 53, 55, 66, 67, 68, 69, 70, 76, 77, 78, 79, 81, 99, 108, 111, 113], "input": [9, 10, 11, 12, 13, 15, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 36, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 55, 60, 63, 65, 66, 67, 68, 70, 73, 76, 77, 78, 79, 81, 83, 87, 99, 100, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 116], "4b26ab49e29c": 9, "18": [9, 13, 18, 19, 22, 24, 30, 31, 32, 34, 35, 37, 38, 41, 43, 47, 69, 70, 72, 77, 78, 99, 104, 105, 107, 115, 116], "19": [9, 13, 15, 22, 23, 27, 28, 31, 32, 40, 41, 47, 49, 50, 52, 66, 70, 77, 99, 100, 104, 105, 107, 109, 110, 111, 113, 114, 115, 116], "20": [9, 11, 13, 15, 21, 22, 23, 24, 26, 27, 28, 31, 32, 34, 38, 41, 46, 47, 49, 50, 52, 54, 55, 67, 70, 76, 77, 97, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116], "automat": [9, 10, 13, 26, 55, 65, 68, 76, 77, 81, 104], "over": [9, 10, 12, 22, 23, 24, 54, 63, 64, 66, 78, 98, 104, 105], "wa": [9, 10, 11, 12, 13, 14, 19, 22, 24, 27, 32, 43, 45, 46, 50, 55, 62, 65, 69, 78, 79, 81, 99, 100, 105], "fact": [9, 12, 28, 29, 65, 97], "take": [9, 10, 11, 12, 14, 15, 18, 22, 23, 26, 27, 28, 31, 32, 34, 35, 36, 37, 38, 40, 41, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 59, 64, 65, 69, 73, 76, 77, 78, 81, 100, 104, 105, 107, 108, 109, 110, 111, 113, 114], "closer": [9, 68, 81], "look": [9, 11, 12, 13, 14, 17, 24, 26, 43, 45, 50, 53, 55, 58, 59, 63, 64, 68, 69, 71, 78, 79, 81, 115], "actual": [9, 10, 12, 13, 27, 41, 43, 47, 52, 65, 67, 77, 78, 79, 81, 100, 104, 112, 122], "someth": [9, 10, 14, 19, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 53, 55, 64, 69, 104], "iter_obj": 9, "true": [9, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 31, 41, 43, 45, 47, 49, 54, 55, 57, 63, 64, 65, 66, 67, 69, 70, 77, 78, 79, 98, 99, 101, 104, 108, 109, 110, 111, 113, 114, 115], "try": [9, 11, 14, 18, 19, 20, 24, 27, 28, 29, 30, 32, 34, 43, 45, 47, 49, 50, 52, 63, 64, 65, 67, 68, 70, 71, 76, 77, 79, 81, 100, 105, 108], "intern": [9, 10, 13, 24, 27, 28, 43, 45, 52, 56, 76, 77, 79, 105], "iron": 9, "insid": [9, 11, 12, 13, 14, 15, 18, 19, 21, 24, 27, 28, 29, 30, 31, 32, 41, 43, 44, 46, 49, 50, 51, 52, 55, 59, 60, 62, 64, 65, 66, 67, 68, 69, 71, 76, 77, 78, 79, 81, 104], "bodi": [9, 18, 19, 20, 21, 22, 23, 24, 49, 50, 54, 64, 76, 78, 104, 105, 115, 116], "after": [9, 14, 20, 22, 23, 24, 26, 27, 28, 29, 40, 41, 43, 45, 46, 49, 50, 51, 52, 55, 59, 63, 64, 65, 67, 68, 69, 73, 77, 79, 81, 99, 100, 101, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114], "exhaust": [9, 22, 73], "caught": [9, 24, 46], "note": [9, 10, 11, 13, 17, 23, 24, 27, 28, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 49, 50, 52, 55, 59, 64, 65, 66, 69, 70, 71, 76, 77, 78, 83, 87, 98, 99, 100, 104, 105, 107, 108, 111, 112, 113, 114, 122], "kind": [9, 10, 46, 49, 52, 64, 83, 87, 104, 111, 112], "scratch": [9, 76, 78], "just": [9, 10, 12, 24, 27, 54, 58, 59, 62, 64, 67, 69, 81, 104, 106, 115, 116], "itself": [9, 11, 13, 22, 27, 29, 30, 31, 43, 47, 49, 53, 73, 76, 77, 78, 81, 121], "initi": [9, 10, 22, 23, 24, 27, 28, 31, 43, 50, 56, 58, 65, 71, 76, 77, 78, 81, 97, 98, 110], "sequenc": [9, 10, 22, 24, 28, 29, 30, 43, 44, 45, 49, 53, 54, 55, 56, 62, 64, 66, 67, 68, 70, 71, 99, 101, 113, 114], "On": [9, 11, 23, 30, 31, 43, 50, 52, 55, 73, 77, 97], "subsequ": [9, 28], "u": [9, 11, 12, 13, 14, 15, 17, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 34, 35, 36, 43, 44, 45, 46, 49, 52, 55, 60, 62, 66, 69, 71, 73, 76, 77, 78, 79, 81, 100, 116], "power": [9, 10, 22, 27, 28, 32, 45, 55, 57, 64, 65, 70, 71, 78, 79, 83, 87, 91, 97, 98, 100, 104], "expon": [9, 22, 27, 57, 69], "zero": [9, 12, 13, 18, 19, 20, 21, 23, 24, 26, 27, 32, 35, 36, 45, 46, 66, 68, 70, 77, 81, 97, 98, 100, 101, 108, 111, 115], "idea": [9, 10, 60, 64, 69, 71, 81], "orient": [9, 11, 13, 47, 77, 78, 79, 81, 105, 112], "powtwo": [9, 10], "def": [9, 10, 11, 12, 13, 15, 19, 20, 21, 24, 32, 41, 46, 47, 49, 50, 51, 52, 53, 54, 55, 59, 60, 63, 64, 66, 69, 71, 76, 77, 78, 79, 81, 111, 115], "__init__": [9, 10, 13, 47, 58, 59, 76, 77, 78, 79], "self": [9, 10, 13, 32, 46, 47, 59, 76, 78, 79, 108, 111, 113], "result": [9, 10, 11, 12, 14, 15, 19, 20, 22, 23, 24, 26, 27, 28, 29, 40, 41, 45, 46, 49, 50, 52, 53, 55, 60, 63, 64, 69, 70, 78, 79, 99, 100, 101, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115], "16": [9, 12, 13, 22, 23, 24, 26, 28, 29, 30, 32, 41, 47, 54, 55, 60, 65, 66, 67, 70, 76, 77, 78, 99, 100, 101, 115, 116], "our": [9, 13, 14, 19, 23, 24, 26, 43, 44, 45, 46, 47, 49, 53, 55, 58, 59, 60, 62, 63, 69, 76, 79, 81, 101, 104, 105, 107, 114], "32": [9, 13, 22, 24, 28, 32, 36, 49, 76, 100, 104, 115], "never": [9, 23, 24, 26, 46, 65, 70, 73, 104], "care": [9, 43, 100, 104], "demonstr": [9, 28, 64, 78, 106], "first": [9, 10, 11, 12, 13, 14, 17, 18, 19, 21, 22, 23, 24, 27, 29, 32, 34, 35, 36, 40, 43, 44, 45, 46, 49, 50, 52, 55, 59, 60, 62, 64, 65, 69, 71, 73, 76, 77, 78, 79, 81, 99, 100, 104, 111, 113, 114, 122], "callabl": [9, 12, 30, 55, 111], "second": [9, 10, 12, 21, 22, 27, 28, 29, 32, 35, 36, 38, 39, 40, 41, 45, 46, 50, 52, 55, 60, 65, 69, 70, 77, 78, 81, 99, 107, 108, 111, 113, 116], "sentinel": 9, "until": [9, 22, 23, 24, 43, 46, 47, 52, 53, 69, 100, 113], "equal": [9, 18, 19, 20, 21, 22, 23, 24, 26, 28, 52, 53, 55, 57, 62, 65, 66, 70, 79, 97, 100, 104, 111], "inf": [9, 55, 100, 102], "happen": [9, 10, 11, 15, 22, 23, 71, 73, 78, 79, 110], "theoret": 9, "odd": [9, 17, 22, 23, 28, 30, 32, 46, 49, 52, 81, 101], "infit": 9, "num": [9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 27, 31, 46, 49, 52, 53, 54, 64, 65, 69, 77, 101, 104, 105, 116], "And": [9, 10, 22, 27, 46, 66, 70, 105, 106, 112], "Be": 9, "termin": [9, 10, 22, 23, 24, 45, 46, 62, 97], "condit": [9, 10, 12, 18, 19, 20, 21, 22, 23, 24, 30, 31, 43, 45, 53, 54, 64, 68, 70, 99, 108, 110], "advantag": [9, 73], "resourc": [9, 43, 46], "shown": [9, 12, 13, 19, 22, 24, 27, 28, 45, 58, 73, 76, 104, 105, 106, 108, 109, 110, 111, 112], "entir": [9, 10, 27, 28, 29, 30, 43, 73, 78, 107], "memori": [9, 22, 26, 27, 28, 43, 45, 53, 65, 67, 70, 71, 73, 76, 77, 97, 101, 104], "finit": [9, 26], "yield": [9, 10, 63, 99, 100], "easili": [10, 34, 39, 59, 65, 78, 108, 122], "why": [10, 12, 13, 19, 26, 27, 45, 46, 59, 64, 100], "track": 10, "both": [10, 12, 14, 19, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 40, 43, 44, 46, 50, 51, 55, 64, 66, 70, 71, 76, 78, 81, 83, 87, 100, 104, 105, 106, 108, 111], "lengthi": [10, 58], "counterintuit": 10, "rescu": [10, 13], "situat": [10, 21, 29, 46, 49, 52, 68], "mention": [10, 27, 46, 59, 104], "fairli": 10, "becom": [10, 13, 22, 23, 27, 50, 81, 104, 105, 106], "paus": 10, "later": [10, 13, 24, 47, 59, 64, 65, 69, 70, 77, 104], "success": [10, 14], "doe": [10, 12, 13, 14, 18, 22, 23, 24, 27, 28, 29, 31, 32, 36, 43, 45, 46, 49, 50, 52, 55, 57, 59, 64, 65, 67, 69, 70, 71, 73, 76, 77, 78, 79, 98, 100, 104, 107, 108, 109, 110, 111, 113, 114], "immedi": [10, 19, 22, 23, 40, 41, 46, 49, 62, 81, 122], "through": [10, 22, 23, 24, 26, 32, 46, 52, 53, 62, 79, 121, 122], "transfer": [10, 22, 23, 24, 121], "caller": 10, "rememb": [10, 11, 22, 24, 44, 49, 50, 65, 66, 70, 78, 81, 98, 122], "final": [10, 12, 22, 23, 24, 27, 28, 43, 45, 50, 51, 63, 65, 69, 71, 81, 100, 114], "further": [10, 27, 43, 45, 47, 49, 69, 71, 73, 104, 105, 113, 122], "illustr": [10, 22, 23, 31, 46, 47, 60, 69, 81], "point": [10, 11, 13, 14, 26, 27, 31, 40, 41, 45, 55, 56, 57, 66, 67, 70, 77, 79, 81, 101], "my_gen": 10, "given": [10, 12, 15, 17, 18, 22, 23, 24, 27, 31, 34, 36, 40, 41, 45, 46, 49, 52, 55, 59, 62, 63, 66, 69, 71, 78, 81, 97, 98, 101, 105], "shell": [10, 11, 12, 41, 62, 65], "theirs": [10, 20], "One": [10, 13, 27, 34, 41, 55, 58, 64, 65, 76, 81, 99], "interest": [10, 12, 14, 46, 71, 77, 110], "unlik": [10, 28, 29, 43, 77, 98, 100, 104, 107], "destroi": [10, 50, 77], "furthermor": [10, 12, 13, 28, 49, 55, 71, 76, 81], "restart": [10, 22, 55], "less": [10, 18, 19, 20, 23, 24, 32, 41, 47, 57, 70, 73, 79, 104], "background": 10, "suitabl": [10, 27], "revers": [10, 12, 27, 29, 30, 49, 97], "rev_str": 10, "my_str": [10, 27], "length": [10, 14, 15, 22, 26, 27, 28, 31, 56, 65, 67, 70, 76, 78, 97, 100, 104, 111, 113, 115, 116], "len": [10, 12, 22, 23, 24, 27, 31, 32, 36, 65, 70, 97, 108, 111, 114], "char": [10, 22, 66], "l": [10, 14, 22, 23, 24, 27, 28, 29, 30, 31, 46, 54, 68], "h": [10, 14, 22, 23, 24, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 68, 70, 100], "index": [10, 14, 23, 27, 30, 31, 40, 45, 46, 55, 67, 69, 97, 98, 115, 116], "order": [10, 22, 23, 27, 43, 44, 49, 50, 52, 54, 55, 58, 67, 69, 77, 101, 104, 105, 111, 112], "fly": [10, 76, 77, 78, 115], "similar": [10, 12, 14, 15, 22, 23, 27, 29, 32, 43, 49, 55, 58, 64, 71, 77, 83, 87, 99, 104], "lambda": [10, 12, 63, 104], "squar": [10, 11, 12, 18, 22, 23, 24, 27, 28, 29, 30, 32, 54, 55, 57, 59, 76, 81, 97, 98, 100], "bracket": [10, 18, 22, 23, 27, 28, 29, 30, 32, 64, 66, 67, 98, 99], "replac": [10, 13, 14, 24, 27, 32, 65, 77, 78, 99, 104, 111, 113, 116], "round": [10, 18, 27, 32, 55, 68, 70], "parenthes": [10, 14, 22, 27, 29, 45, 54, 62, 64, 66, 67], "major": [10, 69], "produc": [10, 14, 19, 46, 62, 78, 100, 108, 111, 121], "lazi": [10, 22], "reason": [10, 11, 12, 13, 26, 49, 54, 71, 77, 81, 101, 110], "equival": [10, 12, 13, 22, 24, 27, 28, 30, 32, 34, 35, 36, 43, 54, 66, 70, 77, 78, 81, 99, 100], "term": [10, 12, 53, 60], "list_": 10, "surround": [10, 64, 66], "parenthesi": [10, 45, 50, 101], "36": [10, 22, 23, 24, 27, 32, 49, 63, 69, 115], "genexpr": 10, "0x000001d284b3b430": 10, "did": [10, 12, 18, 45, 46, 50, 69, 70, 76, 78, 104], "demand": 10, "f7b055f5764d": 10, "11": [10, 13, 19, 22, 24, 26, 27, 28, 30, 32, 36, 40, 41, 50, 54, 64, 66, 67, 70, 72, 76, 77, 98, 99, 100, 101, 104, 108, 113, 115, 116], "13": [10, 13, 23, 26, 27, 28, 30, 32, 35, 36, 38, 41, 45, 50, 52, 54, 55, 66, 68, 70, 76, 99, 100, 101, 108, 115], "drop": [10, 113, 114, 115], "sum": [10, 11, 15, 22, 23, 26, 28, 31, 34, 49, 52, 55, 57, 59, 60, 64, 68, 76, 79, 97, 100, 101, 115, 116], "146": [10, 115], "clear": [10, 31, 58, 81], "concis": [10, 28, 30, 32, 47, 54, 99, 100], "counterpart": [10, 27, 57], "confus": [10, 21, 58, 65, 81], "powtwogen": 10, "sinc": [10, 12, 14, 19, 22, 24, 28, 29, 30, 31, 40, 41, 43, 46, 49, 52, 55, 56, 62, 67, 76, 77, 78, 79, 81, 99, 101], "cleaner": [10, 100], "befor": [10, 11, 12, 13, 15, 22, 23, 26, 32, 34, 40, 41, 44, 46, 50, 51, 52, 54, 59, 68, 73, 77, 78, 81, 101, 104, 105, 106, 108, 109, 110, 111, 113, 114, 122], "overkil": 10, "friendli": [10, 32], "prefer": [10, 11, 26, 64, 78, 105], "cannot": [10, 12, 13, 15, 22, 24, 26, 27, 29, 30, 31, 36, 43, 45, 46, 50, 51, 52, 54, 55, 63, 65, 66, 67, 68, 69, 70, 73, 76, 81, 101, 105, 108, 110], "theori": 10, "all_even": 10, "seri": [10, 21, 22, 23, 39, 55, 73, 116, 121], "suppos": [10, 13, 15, 17, 24, 32, 34, 55, 58, 59, 76, 79, 81, 100, 105, 106, 110, 111, 112, 113, 114], "fibonacci": [10, 23, 55], "find": [10, 12, 14, 22, 23, 27, 28, 31, 32, 34, 38, 43, 46, 49, 53, 55, 60, 65, 67, 70, 76, 78, 81, 99, 100, 101, 104, 108, 110, 122], "togeth": [10, 27, 65, 73, 79, 100], "fibonacci_numb": 10, "y": [10, 14, 15, 20, 21, 22, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 40, 49, 50, 52, 54, 55, 57, 65, 66, 67, 69, 70, 77, 78, 79, 81, 97, 98, 100, 101, 104, 115], "_": [10, 13, 55, 63, 65, 72, 76, 77, 78, 111], "4895": 10, "ye": [10, 12, 24, 30, 45, 105, 108, 111], "cooler": 10, "citizen": 11, "modifi": [11, 12, 13, 20, 22, 23, 27, 28, 29, 30, 32, 41, 43, 50, 51, 55, 67, 69, 70, 99, 104, 109, 115, 121], "assign": [11, 12, 13, 22, 27, 28, 29, 30, 31, 32, 37, 45, 50, 51, 52, 54, 59, 64, 66, 67, 68, 71, 72, 76, 79, 81, 104, 105, 108, 111, 113, 114], "sub": [11, 29, 44, 49, 53, 58, 59, 97], "section": [11, 26, 27, 32, 43, 45, 64, 69, 90, 104, 105, 106, 107, 108, 109, 112, 114, 122], "cover": [11, 12, 14, 43, 45, 104, 105, 106, 110, 111, 113, 121], "sum_numb": 11, "normal": [11, 12, 14, 23, 24, 27, 32, 46, 47, 50, 54, 55, 56, 77, 98, 101, 107, 115], "sad": 11, "abus": 11, "higher_order_funct": 11, "f": [11, 20, 21, 26, 27, 35, 36, 43, 46, 47, 49, 52, 55, 59, 69, 72, 76, 77, 81, 100, 101, 108, 111, 113], "lst": [11, 32, 46], "summat": [11, 100], "15": [11, 13, 14, 15, 18, 19, 21, 22, 24, 26, 27, 28, 29, 30, 32, 35, 36, 40, 41, 46, 47, 49, 55, 67, 70, 76, 77, 99, 100, 115, 116], "cube": [11, 23, 32, 52, 54, 69], "27": [11, 15, 22, 23, 24, 31, 32, 38, 40, 43, 52, 54, 69, 70, 76, 99, 100, 104, 105, 115, 116], "differ": [11, 12, 14, 15, 17, 22, 23, 24, 26, 27, 28, 29, 30, 35, 39, 40, 41, 43, 44, 45, 46, 49, 50, 52, 54, 55, 58, 60, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 81, 83, 87, 99, 100, 104, 105, 106, 109, 112, 115, 116, 122], "enclos": [11, 22, 23, 27, 29, 45, 62, 67], "non": [11, 15, 18, 23, 27, 43, 44, 52, 56, 77, 104, 110], "declar": [11, 12, 23, 27, 28, 43, 45, 47, 49, 50, 51, 55, 67, 70, 71, 76, 77, 81, 98], "explicitli": [11, 26, 32, 43, 49, 65, 98], "print_msg": 11, "msg": [11, 12, 49, 52], "outer": [11, 21, 22, 23, 50, 100, 104], "printer": [11, 12], "encapsul": 11, "inner": [11, 12, 22, 23, 24, 50, 100, 104], "unusu": [11, 26], "bound": [11, 12, 45, 56, 73, 77, 104], "messag": [11, 18, 19, 20, 21, 45, 46, 47, 49, 52, 59], "still": [11, 27, 59, 64, 76, 77, 81, 105, 107, 108, 111, 114], "although": [11, 49, 50, 54, 58, 70, 71, 77], "had": [11, 12, 45, 49, 52, 55, 100], "finish": [11, 22, 64], "techniqu": [11, 55, 121, 122], "case": [11, 12, 14, 17, 18, 19, 22, 24, 26, 27, 30, 31, 41, 45, 46, 55, 63, 64, 65, 66, 69, 70, 71, 73, 76, 78, 81, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 121], "attach": [11, 13, 24, 65, 76, 104], "goe": [11, 41, 45, 46, 47, 55, 76, 81, 108, 111], "remov": [11, 14, 22, 26, 27, 29, 43, 45, 49, 55, 77, 108, 109, 110, 114], "del": [11, 27, 28, 29, 30, 63, 77], "nameerror": [11, 13, 27, 28, 29, 30, 46, 50, 66, 67, 77], "af0f59439c9b": 11, "origin": [11, 12, 14, 44, 73, 79, 81, 99, 101, 104, 105, 108, 109, 110, 112, 114], "delet": [11, 13, 30, 31, 44, 45, 64, 97, 104, 110, 113], "seen": [11, 13, 43, 65, 81, 104, 105, 113, 114], "criteria": [11, 12], "met": [11, 19, 23, 110], "summar": [11, 59, 105], "good": [11, 22, 27, 29, 43, 46, 47, 49, 52, 55, 60, 64, 69, 104], "avoid": [11, 20, 21, 24, 31, 32, 43, 53, 58, 68, 76, 98, 108], "form": [11, 18, 22, 26, 27, 30, 32, 35, 36, 43, 44, 52, 54, 55, 60, 64, 67, 73, 76, 97, 98, 100, 104, 108, 109, 112, 115], "hide": [11, 13, 76], "solut": [11, 13, 15, 45, 49, 51, 68, 100, 116], "few": [11, 12, 13, 22, 23, 26, 27, 30, 34, 90, 101, 104, 107], "altern": [11, 27, 43, 52, 55, 66, 108, 111], "attribut": [11, 12, 13, 14, 31, 34, 40, 45, 47, 49, 55, 57, 64, 69, 76, 78, 81, 100, 108, 111], "better": [11, 14, 17, 22, 23, 41, 59, 64, 73, 78, 79, 81, 104, 121], "make_multiplier_of": 11, "multipli": [11, 22, 23, 29, 34, 49, 53, 59, 60, 65, 69, 70, 97, 100], "times3": 11, "times5": 11, "30": [11, 12, 13, 19, 22, 23, 24, 27, 28, 32, 34, 35, 36, 38, 40, 46, 49, 50, 51, 52, 55, 65, 67, 70, 71, 76, 99, 104, 115], "add_ten": [11, 49], "ten": [11, 12, 22, 43, 49], "closure_result": 11, "conclud": 11, "found": [11, 14, 22, 24, 27, 30, 36, 45, 46, 55, 70, 73, 78, 98, 108, 111], "__closure__": 11, "0x0000012c87c0af70": 11, "0x00007ffad7cb2770": 11, "cell_cont": 11, "close": [11, 45, 46, 59, 73, 78, 104], "exist": [12, 13, 14, 20, 27, 28, 29, 30, 31, 32, 43, 45, 55, 71, 76, 77, 78, 81, 104, 107, 108, 109, 110, 111, 113, 114], "pattern": [12, 73], "usual": [12, 23, 24, 32, 46, 49, 58, 65, 67, 73, 78, 98, 104, 110], "metaprogram": 12, "part": [12, 14, 22, 23, 24, 26, 27, 55, 57, 66, 67, 70, 71, 97, 99, 109, 112], "tri": [12, 45, 69, 76, 79, 98, 111], "comfort": [12, 32], "everyth": [12, 28, 29, 30, 31, 47, 55, 67, 71, 76, 77], "too": [12, 45, 47, 70, 71], "weirder": 12, "reduc": [12, 22, 23, 49, 53, 102, 104], "Such": [12, 23, 104, 105, 108, 112], "inc": 12, "func": [12, 111], "invok": [12, 32, 77, 79], "is_cal": 12, "1st": [12, 28, 50, 51, 52, 53, 55], "is_return": 12, "2nd": [12, 27, 28, 29, 50, 51, 53], "greet": [12, 49, 52, 69, 77], "welcom": [12, 27, 43, 49, 55, 62, 76], "uppercase_decor": 12, "wrapper": [12, 111], "make_uppercas": 12, "upper": [12, 14, 27, 69, 111], "TO": [12, 115], "__call__": 12, "sens": [12, 22, 63, 65, 100, 104], "make_pretti": 12, "got": [12, 15, 51, 55, 67, 68, 79, 104, 122], "ordinari": 12, "am": [12, 14, 27, 31, 35, 36, 50, 59, 69, 81], "pack": [12, 29], "gift": 12, "alter": [12, 17, 67, 104], "reassign": [12, 27, 29, 65, 110, 111], "common": [12, 28, 31, 34, 39, 43, 45, 55, 76, 77, 81, 99, 104, 106], "construct": [12, 13, 19, 24, 46, 53, 58, 59, 62, 76, 98, 99, 104], "simplifi": [12, 108], "symbol": [12, 14, 15, 27, 55, 59, 63, 64, 65, 70, 79], "along": [12, 22, 45, 46, 49, 52, 54, 55, 59, 77, 78, 81, 97, 98, 100, 122], "place": [12, 13, 26, 27, 28, 29, 30, 31, 34, 43, 46, 47, 52, 53, 55, 58, 64, 65, 67, 69, 78, 81], "syntact": [12, 49, 62], "sugar": 12, "took": 12, "divid": [12, 17, 23, 28, 34, 45, 55, 57, 58, 60, 65, 69, 70, 97, 100, 102, 104, 105, 108], "b": [12, 20, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 40, 43, 44, 46, 49, 50, 51, 52, 55, 56, 57, 59, 65, 66, 67, 69, 70, 71, 77, 78, 79, 81, 97, 98, 99, 100, 104, 105, 107, 108, 109, 110, 111, 114], "zerodivisionerror": [12, 45, 46], "030e2eec799d": 12, "7507bdc665d5": 12, "divis": [12, 17, 23, 24, 32, 45, 46, 49, 65, 70, 79, 97, 100], "caus": [12, 13, 24, 31, 43, 45, 46, 47, 62], "smart_divid": 12, "whoop": 12, "none": [12, 13, 14, 18, 22, 23, 30, 40, 43, 46, 49, 52, 56, 59, 63, 64, 66, 77, 101, 102, 104, 105, 108, 109, 110, 111, 113, 114], "aris": [12, 23], "decorator_with_paramet": 12, "wrapper_accepting_paramet": 12, "para1": 12, "para2": 12, "para3": 12, "live": [12, 20, 27, 43, 46, 70, 76], "format": [12, 15, 20, 22, 29, 30, 39, 40, 43, 55, 64, 76, 77, 79, 104, 105, 112], "print_full_nam": 12, "first_nam": [12, 14, 20, 22, 27, 30, 49, 65, 68], "last_nam": [12, 20, 22, 27, 30, 49, 65], "countri": [12, 15, 20, 22, 27, 28, 29, 30, 32, 43, 45, 46, 49, 65, 76], "teach": [12, 14, 27, 31, 102], "milaan": [12, 20, 22, 27, 30, 32, 43, 45, 46, 49, 52, 55, 65, 68, 70, 76, 78, 116], "parmar": [12, 20, 22, 27, 32, 43, 49, 52, 55, 65, 76], "london": [12, 34, 38, 43, 46, 76, 108], "manner": [12, 17, 22, 23, 78], "keen": 12, "observ": [12, 13, 18, 24, 76, 104, 114], "notic": [12, 24, 26, 30, 32, 34, 45, 67, 69, 77, 78, 104], "account": 12, "magic": [12, 79], "arg": [12, 16, 24, 36, 46, 52, 81, 111], "kwarg": [12, 16, 46, 81, 111], "posit": [12, 14, 15, 18, 19, 20, 21, 27, 32, 46, 49, 53, 54, 57, 66, 104, 113, 114], "works_for_al": 12, "sai": [12, 14, 23, 52, 55, 65, 77, 78, 104], "desir": [12, 24, 28, 101, 121], "star": [12, 22, 72], "percent": 12, "matter": [12, 24, 46, 49, 52, 65], "split_string_decor": 12, "splitted_str": 12, "numbers_squar": 12, "numbers_str": 12, "numbers_int": 12, "arthur": [12, 15, 20, 22, 30, 32, 49, 52, 69, 76, 77, 78], "bill": [12, 22, 27, 32, 49, 52], "clark": [12, 49, 52, 69], "change_to_upp": 12, "names_upper_cas": 12, "instanc": [12, 22, 26, 28, 36, 43, 45, 46, 55, 59, 64, 65, 67, 71, 78, 81, 100, 101, 104, 111, 112], "specifi": [12, 13, 22, 24, 27, 41, 43, 44, 46, 54, 56, 64, 65, 66, 78, 79, 97, 98, 99, 101, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114], "boolean": [12, 20, 27, 55, 64, 77, 97, 98, 104, 108, 109, 110, 111, 113, 114], "satisfi": [12, 17, 23, 24, 32, 78, 99], "is_even": [12, 49], "fals": [12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 31, 43, 49, 55, 59, 63, 65, 66, 69, 70, 78, 79, 98, 99, 101, 102, 104, 108, 109, 110, 111, 113, 114, 115, 116], "even_numb": [12, 22, 32, 54], "is_odd": 12, "odd_numb": [12, 32], "long": [12, 17, 23, 24, 26, 27, 32, 63, 64, 66, 71, 81, 101, 122], "is_name_long": 12, "long_nam": 12, "india": [12, 28, 29, 32, 43], "russia": [12, 28, 46], "china": [12, 28, 29, 32, 43], "denmark": [12, 28, 46], "usa": 12, "finland": [12, 20, 22, 27, 28, 29, 32, 43, 46, 65, 76], "explain": [12, 31, 53, 64, 71, 81, 101, 109, 112], "between": [12, 14, 22, 23, 24, 26, 27, 28, 29, 31, 39, 43, 53, 55, 56, 59, 69, 70, 77, 81, 100, 101, 104], "uppercas": [12, 14, 27, 28, 55, 63, 65, 70], "land": [12, 90], "exactli": [12, 14, 24, 27, 46, 81], "six": [12, 55, 81, 104, 105, 116], "letter": [12, 14, 22, 23, 24, 27, 31, 32, 45, 55, 63, 65], "eg": [12, 14, 65, 73], "arr": [12, 98, 100], "callback": 12, "get_string_list": 12, "categorize_countri": 12, "repositori": [12, 27], "ia": 12, "island": 12, "stan": 12, "kei": [12, 15, 17, 20, 22, 28, 29, 31, 45, 46, 64, 66, 67, 70, 104, 106, 111, 113, 116], "get_first_ten_countri": 12, "j": [12, 22, 23, 24, 27, 28, 35, 36, 43, 65, 66, 77, 97, 98, 105], "get_last_ten_countri": 12, "countries_details_data": 12, "py": [12, 27, 36, 47, 51, 55, 58, 59, 62, 65, 69, 108, 111, 112, 113], "sort": [12, 22, 31, 55, 114], "capit": [12, 27, 49, 55, 65], "popul": [12, 32, 43, 49, 56], "spoken": [12, 43, 49], "locat": [12, 14, 27, 28, 43, 45, 55, 58, 65, 69, 70, 78, 115], "assum": [13, 70, 108], "decid": [13, 17, 30, 111], "temperatur": [13, 49], "degre": [13, 55, 57], "celsiu": 13, "fahrenheit": 13, "to_fahrenheit": 13, "manipul": [13, 27, 34, 55, 77, 100, 104, 114], "wish": [13, 14, 24, 27, 49, 69], "human": [13, 14, 32, 64, 73, 121], "37": [13, 22, 23, 76, 104, 105, 115, 116], "98": [13, 27, 104, 115], "60000000000001": 13, "extra": [13, 44, 45, 64, 111], "decim": [13, 27, 35, 36, 59, 65, 66, 67, 69, 70, 98], "due": [13, 15, 24, 26, 28, 43, 46, 71, 73, 100], "arithmet": [13, 26, 45, 49, 76, 79, 100], "whenev": [13, 23, 45, 59, 77, 81, 108, 111, 113, 114], "retriev": [13, 27, 30, 52, 59, 67, 113], "search": [13, 27, 30, 58, 71, 78, 116], "__dict__": [13, 59, 77], "therefor": [13, 14, 27, 73, 76], "man": [13, 14], "extend": [13, 27, 49, 64, 76, 78, 113], "usabl": [13, 59], "273": [13, 115], "thermodynam": 13, "updat": [13, 23, 28, 31, 51, 104, 107, 108, 109, 110, 111, 113, 114], "constraint": 13, "obviou": [13, 27, 70], "restrict": [13, 76, 81], "privat": [13, 55, 76, 77], "set_temperatur": 13, "get_temperatur": 13, "_temperatur": 13, "valueerror": [13, 46, 68, 69, 81, 99, 105, 113], "possibl": [13, 14, 19, 22, 24, 27, 29, 32, 46, 53, 55, 58, 65, 66, 69, 100, 101, 104, 106, 107, 122], "introduc": [13, 27, 62], "underscor": [13, 55, 63, 65, 76, 77, 78, 79], "denot": [13, 15, 27, 52, 53, 67, 76], "via": [13, 24, 78], "300": [13, 28, 65, 66, 115], "to_fahreheit": 13, "f7d40ce0c112": 13, "28": [13, 22, 23, 24, 31, 32, 34, 40, 46, 55, 76, 99, 115, 116], "29": [13, 22, 23, 40, 43, 76, 99, 100, 115, 116], "31": [13, 22, 23, 34, 35, 36, 40, 55, 76, 115, 116], "17": [13, 22, 23, 26, 28, 30, 32, 40, 41, 46, 47, 67, 76, 77, 78, 99, 107, 115, 116], "successfulli": [13, 46], "longer": [13, 27, 55, 76], "don": [13, 23, 24, 28, 32, 43, 49, 51, 55, 58, 65, 76, 78, 81, 104, 111, 113, 114], "norm": [13, 57, 100], "doesn": [13, 20, 22, 23, 24, 27, 29, 30, 36, 55, 68, 77, 111], "howev": [13, 14, 18, 19, 22, 29, 31, 32, 41, 46, 47, 51, 64, 65, 67, 68, 71, 73, 76, 77, 78, 79, 81, 98, 99, 100], "bigger": [13, 19, 31, 69, 99], "previou": [13, 19, 26, 43, 50, 55, 71, 81, 99], "express": [13, 14, 18, 19, 20, 23, 24, 27, 28, 30, 32, 49, 52, 54, 64, 66, 68, 69, 70, 72, 79, 104], "val": [13, 22, 24], "refactor": 13, "hundr": [13, 70], "thousand": 13, "backward": [13, 23, 27, 44, 67, 81], "compat": [13, 68, 79, 81, 100, 105], "clearli": 13, "put": [13, 14, 18, 19, 24, 27, 28, 46, 62, 69, 71, 102], "member": [13, 31, 76, 77], "dd6f749658a4": 13, "similarli": [13, 14, 26, 27, 31, 43, 44, 50, 51, 58, 66, 67, 71, 76, 77, 78, 79, 81, 107, 114], "guess": [13, 47, 98, 104], "2087a9c41308": 13, "By": [13, 22, 23, 24, 34, 37, 53, 55, 62, 77, 81, 104, 105, 106, 108, 109, 110, 111, 113, 114, 116], "modif": [13, 76, 78, 101, 108, 111, 113, 114], "thu": [13, 22, 23, 27, 40, 46, 64, 73, 76, 81], "fget": 13, "fset": 13, "fdel": 13, "doc": [13, 49, 59, 100], "option": [13, 14, 20, 22, 23, 26, 27, 28, 29, 30, 32, 46, 47, 49, 52, 59, 69, 76, 77, 78, 98, 101, 105, 112], "0x170b84f24a0": 13, "three": [13, 14, 15, 17, 22, 23, 27, 28, 29, 32, 34, 43, 51, 52, 65, 68, 69, 71, 77, 78, 81, 104, 107, 110, 111, 112], "broken": [13, 53], "down": [13, 24, 53, 55, 70], "empti": [13, 14, 22, 23, 24, 27, 28, 29, 30, 43, 44, 49, 51, 56, 58, 76, 77, 97, 100, 104, 105, 110, 112], "piec": [13, 99], "programm": [13, 26, 32, 46, 49, 59, 64, 66, 76, 81], "familiar": [13, 27, 29, 77, 116], "recogn": [13, 55], "unnecessari": 13, "pollut": 13, "coldest_th": 13, "57953b0b580c": 13, "21": [13, 15, 22, 23, 24, 27, 28, 31, 32, 34, 36, 37, 40, 41, 47, 52, 55, 78, 99, 100, 101, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116], "effici": [13, 22, 23, 26, 43, 49, 55, 58, 71, 73, 76, 97, 104, 106], "reg": 14, "ular": 14, "ex": [14, 73], "pression": 14, "five": [14, 22, 46, 78, 104, 105, 107], "against": [14, 100, 105, 112], "No": [14, 18, 22, 23, 45, 49, 64, 67, 73, 104, 105, 108, 111], "alia": 14, "abyss": 14, "abacu": 14, "test_str": 14, "unsuccess": 14, "explor": [14, 40, 90], "themselv": [14, 121], "ac": 14, "abc": [14, 22, 28, 29, 69], "hei": [14, 29], "jude": 14, "de": 14, "ca": 14, "complement": [14, 70], "invert": 14, "newlin": [14, 27, 43, 59, 62, 64, 66, 69], "acd": 14, "certain": [14, 17, 24, 27, 28, 29, 36, 38, 45, 46, 55, 60, 65, 104], "substr": [14, 27], "sentenc": [14, 22, 27, 31, 69, 70], "bac": 14, "formula": [14, 49], "cab": 14, "occurr": [14, 27, 31, 77, 109], "mn": 14, "ma": 14, "maaan": 14, "main": [14, 26, 29, 50, 51, 55, 59, 65, 76, 77, 78, 81], "woman": 14, "curli": [14, 27, 30, 31, 69], "m": [14, 22, 24, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 55, 57, 62, 63, 65, 68, 69, 70, 78], "repetit": [14, 22], "At": [14, 71, 73, 81], "dat": [14, 44], "daat": 14, "aabc": 14, "daaat": 14, "daaaat": 14, "ab123csd": 14, "345673": 14, "3456": 14, "73": [14, 115], "vertic": [14, 27, 81, 100, 101], "bar": [14, 28, 30, 51], "cde": 14, "acdbea": 14, "either": [14, 17, 18, 20, 40, 46, 47, 59, 64, 70, 73, 78, 104, 105, 111], "xz": 14, "abxz": 14, "axz": 14, "cabxz": 14, "backlash": 14, "unsur": [14, 15], "front": [14, 27], "commonli": [14, 27, 28, 30, 31, 34, 40, 78], "ath": 14, "sun": [14, 35, 36], "footbal": 14, "bfoo": 14, "afootbal": 14, "foo": [14, 28, 30], "afoo": 14, "afootest": 14, "1ab34": 14, "50": [14, 18, 20, 22, 23, 24, 26, 27, 30, 32, 38, 41, 43, 49, 50, 55, 72, 100, 101, 104, 106, 107, 115, 116], "1345": 14, "pythonregex": 14, "1a2": 14, "fun": [14, 49, 50, 51, 52, 55, 65, 70], "tip": 14, "tester": 14, "tool": [14, 59, 83, 87, 97, 104, 115, 116, 121, 122], "regex101": 14, "discuss": [14, 19, 26, 27, 29, 55, 60, 64, 69, 78, 104, 105, 106, 107, 108, 113, 114, 122], "anywher": 14, "multilin": [14, 27, 54, 64, 66, 67], "extract": [14, 43, 67, 104], "hi": [14, 30, 41, 46, 69], "89": [14, 20, 23, 55, 104, 115, 116], "howdi": 14, "34": [14, 23, 34, 41, 55, 70, 76, 99, 101, 115, 116], "txt": [14, 44, 45, 46, 101, 115], "beauti": [14, 62], "ever": [14, 22, 27, 71], "lowercas": [14, 27, 55, 63, 65], "flag": [14, 102, 108, 109, 110, 111, 113, 114, 115], "pp": 14, "ython": 14, "occur": [14, 23, 24, 27, 43, 45, 46, 47, 51, 60, 68, 101], "teacher": [14, 27, 31, 43], "noth": [14, 18, 22, 23, 24, 31, 49, 65, 76, 100], "reward": [14, 27], "educ": 14, "empow": [14, 27], "peopl": [14, 27, 31], "job": [14, 27, 73], "motiv": 14, "twelv": 14, "eighti": 14, "nine": 14, "maxsplit": 14, "maximum": [14, 23, 53, 76, 97, 100, 101, 104], "23": [14, 22, 23, 27, 28, 34, 35, 36, 38, 40, 41, 55, 68, 77, 99, 104, 105, 115, 116], "f45": 14, "new_str": 14, "abc12de23f456": 14, "count": [14, 22, 23, 24, 27, 29, 43, 49, 63, 76, 77, 81, 104, 115], "fourth": [14, 23, 69, 108], "paramet": [14, 15, 27, 32, 43, 50, 54, 55, 59, 62, 66, 73, 76, 78, 81, 101, 105, 106, 107, 108, 109, 110, 111, 113, 114], "omit": 14, "abc12d": 14, "match_replac": 14, "javascript": [14, 27, 32, 43, 46, 73, 76], "OR": [14, 70, 79], "realli": [14, 76, 77], "unless": [14, 21, 49, 64], "clean": [14, 43, 46, 53, 58, 64, 109, 110, 121, 122], "te": 14, "che": 14, "ve": [14, 46, 104], "ach": 14, "ing": 14, "he": [14, 20, 27, 43, 46, 47, 76], "th": [14, 27], "eward": 14, "duc": 14, "ng": 14, "ow": 14, "er": 14, "ple": 14, "fo": 14, "und": 14, "ching": 14, "ore": 14, "ting": 14, "ot": [14, 21], "iv": 14, "cher": 14, "expect": [14, 46, 70, 104, 112], "substitut": [14, 78], "made": [14, 45, 47, 55, 71, 73, 77], "apython": 14, "105": [14, 55, 115], "stop": [14, 22, 23, 24, 27, 28, 29, 43, 46, 49, 53, 56, 65, 97, 101, 104, 114], "dir": [14, 34, 45], "39801": 14, "356": [14, 115], "2102": 14, "1111": [14, 70], "801": 14, "35": [14, 22, 24, 27, 28, 37, 40, 67, 69, 99, 115, 116], "subgroup": 14, "unicod": [14, 27, 45, 64, 65, 67], "raw": [14, 66], "wherea": [14, 22, 26, 29, 34, 35, 50, 73, 76, 81, 83, 87, 105, 112, 113, 114], "clarifi": [14, 46, 71], "meta": 14, "lower": [14, 27, 68, 99, 100], "regex_pattern": 14, "aa": 14, "pple": 14, "appl": [14, 22, 27, 28, 30, 31, 66, 67, 70, 77, 106], "banana": [14, 20, 22, 28, 31, 46, 66, 67, 69, 70, 106], "fruit": [14, 20, 22, 28, 29, 31, 46, 64, 66, 77, 106], "old": [14, 19, 46, 59, 69, 76, 81, 102, 104, 111], "clich": 14, "doctor": 14, "been": [14, 24, 27, 28, 29, 30, 31, 43, 45, 46, 59, 65, 77, 81, 90, 102], "far": [14, 20, 65, 81, 101, 115], "bb": 14, "anana": 14, "manag": [14, 49, 55, 58], "hawk": 14, "born": [14, 46], "januari": [14, 20, 24, 34, 35, 36, 39, 40], "1942": 14, "di": [14, 22], "march": [14, 20, 24], "2018": [14, 34, 35, 36, 39, 40], "einstein": 14, "birth": 14, "anniversari": 14, "pi": [14, 26, 27, 45, 49, 55, 57, 65, 69, 70, 74, 76, 115], "76": [14, 101, 115], "convent": [14, 59, 77, 81, 108, 111], "mail": [14, 102], "ee": 14, "imagin": [14, 71, 104], "four": [14, 17, 22, 36, 49, 64, 66, 69, 78, 81, 101, 104, 105, 116], "negat": [14, 70], "frequent": [14, 24, 28, 43, 55, 99, 100, 104], "paragraph": 14, "capabl": 14, "particl": 14, "horizont": [14, 27, 97, 101], "axi": [14, 97, 98, 100, 101, 104, 110, 115], "neg": [14, 18, 19, 20, 21, 27, 32, 43, 57, 66, 69, 102, 107], "distanc": [14, 22, 70, 81], "furthest": 14, "sorted_point": 14, "valid": [14, 27, 29, 49, 63, 64, 71, 81, 104], "is_valid_vari": 14, "1first_nam": 14, "firstnam": [14, 15, 49, 52, 65, 69, 76], "tea": 14, "lo": 14, "mo": 14, "educa": 14, "emp": [14, 77, 78], "were": [14, 15, 24, 43, 45, 46, 52, 69, 70, 78, 81, 100], "peo": 14, "tha": 14, "jo": 14, "tivat": 14, "yo": 14, "clean_text": [14, 43], "most_frequent_word": 14, "cleaned_text": 14, "reusabl": [15, 49, 55, 76, 78], "specif": [15, 22, 23, 27, 43, 49, 55, 59, 60, 68, 69, 73, 76, 78, 83, 87, 99, 104, 108, 111, 113, 114, 115, 116], "adder": 15, "z": [15, 22, 27, 28, 29, 35, 36, 52, 63, 65, 70, 78, 98, 104, 115], "46": [15, 41, 49, 115, 116], "explan": [15, 18, 19, 20, 22, 23, 24, 27, 32, 34, 37, 39, 41, 46, 47, 50, 51, 52, 54, 56, 57, 60, 68, 70, 76, 77, 78, 79, 81, 91, 100, 101], "typeerror": [15, 27, 28, 30, 31, 46, 52, 55, 67, 68, 79], "986e6d871071": 15, "asterisk": [15, 52, 55], "exclud": [15, 31], "doubl": [15, 27, 49, 54, 64, 66, 67, 70, 76, 77, 78, 79], "ndata": 15, "ami": [15, 22, 77], "lastnam": [15, 49, 52, 65, 69, 76], "barn": 15, "ag": [15, 19, 20, 22, 27, 28, 30, 45, 46, 49, 52, 55, 59, 65, 69, 70, 76, 77, 78, 81, 104, 105, 107, 108, 109, 110, 111, 113, 114], "24": [15, 22, 24, 28, 30, 31, 32, 35, 36, 41, 43, 54, 55, 76, 77, 99, 104, 105, 115, 116], "phone": [15, 69, 72], "1234567890": [15, 66], "hunt": [15, 32, 49, 69], "arthurhunt": 15, "yesmail": 15, "atlanti": 15, "9976563219": 15, "particular": [17, 22, 23, 24, 26, 30, 31, 34, 39, 55, 65, 67, 76, 78, 98, 104, 107, 108, 110, 111, 112, 114], "great": [17, 71, 79], "consid": [17, 23, 27, 28, 30, 31, 35, 36, 46, 52, 58, 73, 79, 81, 100, 101, 105, 109, 110], "_indentation_": 17, "mark": [17, 18, 22, 30, 49, 59, 62, 64, 69, 77, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114], "henc": [17, 18, 22, 23, 24, 26, 27, 28, 29, 32, 34, 43, 50, 54, 55, 67, 69, 70, 71, 73, 76, 79, 99], "amount": [17, 19, 47, 64, 67, 73, 97], "white": [17, 24, 27], "tab": [17, 27, 45, 64, 66], "catch": [17, 47], "thought": 17, "pop": [17, 30, 31], "mind": [17, 32, 52], "right": [17, 27, 47, 52, 59, 64, 69, 70, 77, 78, 79, 99, 104], "logic": [17, 19, 53, 79, 81, 104, 108, 111, 122], "categori": [17, 26, 45, 67, 115], "outcom": [17, 49], "evalu": [17, 18, 19, 20, 23, 24, 43, 54, 69, 70, 73], "repeatedli": [17, 22, 23, 24], "action": [17, 29, 46, 49, 62, 76, 81, 104], "simplest": [18, 22, 27, 55, 98, 100], "skip": [18, 19, 22, 23, 24, 27, 46, 52], "preced": [18, 35, 36, 46, 52, 64, 78], "colon": [18, 27, 28, 29, 30, 45, 49], "indic": [18, 27, 28, 29, 40, 43, 45, 64, 99, 108, 109, 112], "unind": [18, 64], "grade": [18, 19, 20, 105], "70": [18, 20, 22, 24, 32, 52, 105, 107, 112, 114, 115, 116], "65": [18, 19, 20, 27, 68, 105, 107, 114, 115], "integ": [18, 20, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 43, 46, 49, 53, 55, 56, 57, 59, 64, 66, 67, 68, 70, 97, 98, 104, 105, 106], "greater": [18, 20, 21, 23, 24, 47, 55, 57, 65, 70, 79, 97, 100, 104], "meet": 18, "tell": [18, 19, 24, 43, 46, 62, 69, 99], "again": [18, 23, 28, 41, 43, 45, 47, 53, 55, 76, 78, 79, 81], "receiv": [18, 19, 32, 52, 81], "appropri": [18, 19, 20, 21, 26, 36, 49], "enter": [18, 19, 20, 21, 23, 24, 46, 47, 49, 60, 64, 69, 70, 78], "fall": [18, 26, 45, 60, 67], "outsid": [18, 21, 22, 24, 28, 29, 50, 51, 76, 77, 99], "regardless": 18, "calcul": [18, 22, 24, 26, 39, 49, 57, 64, 65, 69, 70, 76, 78, 81, 104], "81": [18, 22, 23, 24, 30, 32, 49, 68, 104, 105, 115, 116], "num1": [18, 19, 20, 21, 49, 52, 60, 65, 69, 77], "num2": [18, 19, 20, 21, 49, 52, 60, 65, 69, 77], "hoorai": 18, "horrai": 18, "id": [18, 49, 52, 55, 71, 77, 114], "fail": [19, 20, 23, 43, 45, 104], "separ": [19, 22, 26, 27, 28, 29, 30, 31, 32, 43, 44, 46, 47, 49, 63, 64, 65, 67, 69, 70, 71, 76, 78, 106, 112], "60": [19, 20, 22, 23, 24, 32, 52, 55, 69, 71, 104, 105, 106, 115, 116], "anywai": 19, "rewrit": [19, 49], "higher": [19, 54, 68, 73], "password_check": 19, "password": 19, "99": [19, 22, 27, 30, 35, 36, 64, 66, 67, 69, 98, 104, 105, 115, 116], "correct": [19, 23, 28, 45, 52, 55, 62, 73, 101, 105, 106], "incorrect": [19, 23, 45, 64, 73], "python99": [19, 43, 44], "hungri": 19, "feed": [19, 121], "bear": 19, "96": [19, 20, 21, 22, 23, 27, 30, 45, 46, 52, 65, 76, 104, 115], "lesser": [19, 104], "noutput": 19, "wrong": [19, 20, 46, 47], "rectifi": 19, "accur": [19, 20, 26, 57, 67], "older": [19, 70], "feedback": [19, 49], "enough": [19, 28, 29, 65], "drive": [19, 122], "wait": [19, 41], "miss": [19, 45, 46, 52, 98, 105, 114], "year": [19, 22, 27, 35, 36, 37, 38, 39, 40, 46, 59, 70, 72, 76, 81], "my_ag": 19, "your_ag": 19, "who": [19, 27, 102, 122], "me": [19, 27, 69], "custom": [19, 55, 59, 105], "present": [20, 22, 24, 27, 30, 31, 44, 46, 54, 59, 70, 104, 107, 108, 111, 122], "chain": [20, 65, 70, 78, 105, 108, 109, 114], "stetement": 20, "short": [20, 22, 32, 49, 54, 59, 64, 65, 112], "among": [20, 41, 77], "accord": [20, 49, 60, 70, 79], "90": [20, 22, 23, 24, 27, 32, 49, 50, 52, 65, 66, 69, 71, 76, 105, 107, 112, 114, 115], "80": [20, 22, 24, 32, 55, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116], "d": [20, 22, 24, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 43, 46, 49, 65, 66, 67, 69, 77, 78, 79, 98, 101, 104, 109, 110, 115], "user_check": 20, "choic": [20, 26, 55, 56, 102], "admin": 20, "editor": 20, "guest": 20, "entri": [20, 22, 30, 46, 104, 105, 112], "access_level": 20, "grant": 20, "deni": 20, "prompt": [20, 49, 55, 69, 70, 97], "num_1": [20, 65], "num_2": [20, 65], "smaller": [20, 21, 49, 68, 97, 100, 107], "student": [20, 22, 28, 30, 69, 76, 77, 104, 105, 107, 108, 112, 113, 114], "score": [20, 105], "69": [20, 22, 105, 115, 116], "59": [20, 34, 35, 36, 38, 40, 41, 104, 105, 115, 116], "49": [20, 22, 23, 24, 30, 32, 40, 41, 55, 115, 116], "season": [20, 49], "autumn": [20, 49], "winter": [20, 49], "spring": [20, 49, 81], "summer": [20, 49], "septemb": 20, "octob": 20, "novemb": 20, "decemb": [20, 39], "februari": [20, 35, 36], "april": [20, 24], "june": [20, 24, 34, 35, 36, 37, 40], "juli": 20, "august": 20, "orang": [20, 22, 28, 31, 46, 66, 70, 106], "mango": [20, 22, 28, 31, 46, 49, 66, 69, 106], "pear": [20, 28, 31], "person": [20, 22, 43, 49, 52, 59, 64, 65, 70, 76, 77, 78], "feel": 20, "is_mar": [20, 22], "skill": [20, 22, 30, 43, 65, 76, 78], "matlab": [20, 22, 43, 65, 73, 76, 99, 100], "r": [20, 22, 23, 24, 27, 28, 29, 30, 31, 36, 41, 43, 44, 46, 49, 65, 66, 70, 76, 77, 99, 104, 112, 115, 116], "address": [20, 22, 30, 43, 65], "street": [20, 22], "zipcod": [20, 22], "02210": [20, 22], "middl": [20, 28, 29, 46, 99], "statist": [20, 26, 76, 116, 121, 122], "unknown": [20, 45, 108, 111, 113], "titl": [20, 27], "marri": [20, 65], "decis": 21, "figur": [21, 47, 58, 63, 64, 70, 78], "secondari": 21, "conditon_out": 21, "condition_inn": 21, "expression1": 21, "expression2": 21, "expression3": 21, "expression4": 21, "invalid": [21, 27, 45, 46, 55, 63, 65, 68, 69, 100], "neither": [21, 27, 50, 57], "nor": [21, 27, 46, 50, 57], "number_arithmet": 21, "66": [21, 22, 27, 51, 69, 115, 116], "repeat": [22, 23, 27, 28, 29, 30, 43, 49, 53, 60, 62, 76, 78, 98, 101], "travers": 22, "percentag": [22, 69, 76, 104, 107, 111, 114], "word": [22, 24, 27, 31, 32, 43, 55, 63, 65, 70, 76, 77, 78], "averag": [22, 28, 49, 104, 105], "40": [22, 24, 32, 41, 46, 52, 67, 69, 70, 99, 106, 115], "list_siz": 22, "limit": [22, 26, 47, 50, 53, 67, 79], "increment": [22, 23, 24, 51, 79], "__getitem__": [22, 104], "ineffici": [22, 53], "size": [22, 23, 24, 27, 43, 58, 76, 97, 98, 100, 101, 104, 105, 113, 115], "step_siz": 22, "45": [22, 23, 24, 41, 43, 55, 64, 72, 112, 115], "55": [22, 23, 34, 41, 49, 55, 101, 106, 108, 111, 115], "n0": 22, "n1": 22, "n3": 22, "n6": 22, "n10": 22, "n21": 22, "n28": 22, "n36": 22, "n45": 22, "distac": 22, "ignor": [22, 23, 24, 59, 64, 108, 111], "abruptli": [22, 23], "digit": [22, 27, 36, 55, 59, 63, 65, 70, 76, 101], "student_nam": 22, "alan": [22, 23, 49, 52, 105], "cori": [22, 27, 49, 52], "77": [22, 52, 67, 69, 99, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115], "flow": [22, 23, 24, 27, 43, 46], "exit": [22, 23, 24, 43, 45, 55, 62], "soon": [22, 45, 76, 77], "green": [22, 64], "pink": 22, "blue": [22, 64], "beak": 22, "hand": [22, 30, 31, 43, 50, 52, 73, 76, 77], "54": [22, 23, 24, 34, 41, 54, 65, 76, 100, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116], "mariya": 22, "mennen": 22, "total": [22, 23, 26, 34, 49, 52, 54, 65, 67, 77, 79, 98, 104, 115], "null": [22, 23, 31, 104, 110], "primarili": [22, 23], "futur": [22, 24, 43, 65, 81, 112, 122], "till": [22, 23, 24, 43, 67, 105, 108, 111, 114], "forward": [22, 27, 44, 45, 67], "sometim": [22, 24, 27, 46, 47, 49, 52, 53, 62, 69, 76, 98, 104, 111, 112], "quit": [22, 29, 45, 46, 99, 101], "list1": [22, 28, 49, 54, 55, 67, 106], "helper": 22, "enumer": [22, 27, 31], "zip": [22, 55, 67, 98, 106, 112], "ch": [22, 32], "nenuemer": 22, "nzip": 22, "ed": 22, "xyz": [22, 29, 44, 46, 69], "enuemer": 22, "mainli": 22, "complet": [22, 23, 24, 27, 29, 31, 43, 55, 56, 59, 71, 78, 101, 116], "tabl": [22, 24, 26, 35, 36, 55, 70, 79, 104, 105, 112], "42": [22, 24, 30, 34, 41, 78, 101, 115], "48": [22, 24, 27, 34, 41, 70, 78, 105, 107, 114, 115, 116], "63": [22, 24, 45, 46, 49, 68, 69, 115], "72": [22, 24, 49, 104, 107, 115], "rea": 22, "prime": [22, 23, 49], "53": [22, 23, 30, 35, 36, 39, 41, 115, 116], "41": [22, 23, 40, 41, 115, 116], "43": [22, 23, 41, 100, 115], "47": [22, 23, 34, 41, 115, 116], "340": [22, 23, 115], "red": [22, 64, 77], "flower": 22, "watch": [22, 122], "list_of_list": [22, 32], "cnt": 22, "row": [22, 23, 32, 43, 97, 98, 99, 100, 101, 104, 108, 109, 111, 113, 114, 115], "column": [22, 32, 43, 97, 98, 99, 100, 101, 115], "floyd": 22, "triangl": [22, 70, 78], "ran": [22, 45, 46, 62, 76, 77], "k": [22, 23, 27, 56], "correctli": [22, 47], "ni": 22, "nfor": 22, "54321": 22, "rectangl": [22, 70, 76], "under": [22, 24, 26, 34, 45, 57, 60, 67, 114], "bella": [22, 76, 77, 81], "cathi": 22, "counter": [22, 23, 77], "formul": 22, "33": [22, 27, 34, 41, 52, 55, 68, 69, 76, 78, 101, 115, 116], "93": [22, 115], "39": [22, 27, 34, 41, 115], "w": [22, 23, 24, 27, 28, 29, 31, 35, 36, 43, 46, 100], "watson": 22, "dialogu": 22, "hope": [22, 27, 49, 70], "mayb": 22, "whitespac": [22, 27, 64], "player": [22, 23, 76, 78], "messi": [22, 23], "ronaldo": [22, 23], "neymar": [22, 23], "helloworld": [22, 23, 24, 27, 28, 29, 31], "immut": [22, 27, 28, 29, 30, 31, 49, 66, 67, 101], "mutabl": [22, 28, 29, 30, 31, 67, 104], "pair": [22, 27, 31, 57, 67, 68, 104, 105, 111, 112], "duplic": [22, 31, 55, 67, 71, 104, 108, 114], "dict1": [22, 30], "ball": [22, 30, 66], "cat": [22, 66, 67, 81], "dict2": 22, "antibiot": 22, "penicillin": 22, "inventor": 22, "fleme": 22, "1928": 22, "vaccin": 22, "polio": 22, "salk": 22, "1953": 22, "smallpox": 22, "jenner": 22, "1796": 22, "unord": [22, 30, 31, 67, 104], "uniqu": [22, 30, 31, 49, 55, 56, 67, 71, 81, 104, 106, 113], "my_set": [22, 31], "my_vaccin": 22, "union": [22, 67], "intersect": [22, 67], "symmetr": 22, "mix_fruit": [22, 28, 31], "guava": [22, 28, 31], "kiwi": [22, 31], "grape": 22, "seven": [22, 55], "scikit": [22, 97, 121], "pytorch": [22, 121], "5050": [22, 49], "2550": 22, "2500": 22, "lemon": [22, 46], "articl": [23, 38, 39, 40, 41, 51, 52, 81, 104, 105, 108, 110, 111], "beforehand": 23, "question": [23, 28, 116], "indefinit": 23, "often": [23, 27, 28, 62, 69, 76, 81], "infinit": [23, 26, 41, 53, 70], "forev": 23, "test_express": 23, "leav": [23, 31], "press": [23, 64], "my": [23, 26, 27, 43, 46, 50, 51, 59, 65, 67, 77, 81], "153": [23, 115], "remaind": [23, 24, 52, 55, 57, 65, 70, 79], "999999999999998": 23, "180": [23, 115], "increas": [23, 24, 28, 64], "mostli": [23, 27], "forgotten": 23, "1000": [23, 26, 32, 53, 65, 70, 76, 101], "flush": [23, 41, 43, 59, 69], "144": [23, 70, 115], "233": [23, 115], "377": [23, 115], "610": [23, 115], "987": 23, "othwerwis": 23, "pleas": [23, 105], "decreas": [23, 53], "600": [23, 70, 115], "555": [23, 27, 72, 115], "innermost": [23, 24], "67": [23, 27, 100, 115, 116], "alan99whit": 23, "isdecim": [23, 27], "keyboardinterrupt": [23, 41, 45, 46], "7359b7dba965": 23, "alphabet": [23, 24, 27, 51, 55, 66], "isalpha": [23, 27], "12345678910": 23, "perfect": [23, 64], "fom": 23, "x_sum": 23, "accordingli": [23, 43, 71], "125": [23, 32, 55, 100, 115], "216": [23, 32, 55, 115], "343": [23, 32, 115], "512": [23, 28, 32, 54, 115], "729": [23, 32, 54, 115], "ideal": 23, "Or": [23, 111, 112], "pictur": 24, "descript": [24, 27, 28, 29, 30, 31, 43, 49, 55, 56, 57, 59, 76, 77, 97, 104, 111], "instantli": 24, "proce": [24, 69], "opportun": 24, "extern": [24, 46], "trigger": 24, "120": [24, 52, 55, 104, 106, 115, 116], "330": [24, 115], "Then": [24, 28, 37, 38, 39, 41, 47, 50, 51, 55, 65, 66, 76, 77, 78, 105], "told": 24, "faceprep": 24, "carefulli": 24, "sensit": [24, 63, 65, 70], "happi": [24, 27, 28, 49, 62, 69, 76], "alan99": 24, "isspac": [24, 27], "deepli": 24, "optim": [24, 30, 67, 73, 108, 122], "elimin": [24, 67, 81], "reject": 24, "jump": [24, 27], "typic": [24, 79, 100, 104], "otherwis": [24, 27, 43, 46, 52, 73, 77, 78, 100, 105, 110, 111], "remean": 24, "art": 24, "hu": 24, "achiev": [24, 76, 79, 112], "honei": 24, "sweet": 24, "abnorm": 24, "appart": 24, "alow": 24, "abort": 24, "somewher": [24, 28], "handler": 24, "irrespect": 24, "bore": 24, "unexpect": [24, 46], "gracefulli": [24, 113], "bypass": 24, "placehold": [24, 27, 69], "month": [24, 35, 36, 37, 38, 39, 40, 49, 64], "mon": [24, 35, 36], "disregard": 24, "absenc": 26, "yj": [26, 67], "imaginari": [26, 31, 45, 66, 67, 102], "belong": [26, 66, 67, 76, 77], "isinst": [26, 67, 77, 78], "avail": [26, 27, 28, 29, 31, 43, 55, 57, 59, 62, 64, 66, 67, 69, 71, 78, 79, 100, 104, 110, 111], "embed": [26, 59], "binari": [26, 27, 43, 59, 64, 66, 69, 70, 73], "hexadecim": [26, 27, 55, 66, 69], "octal": [26, 27, 66, 69], "repres": [26, 27, 35, 36, 37, 39, 40, 45, 46, 52, 59, 63, 66, 67, 73, 76, 77, 81, 108, 111, 113, 114], "prefix": [26, 58, 71, 76, 77], "0b": 26, "0o": 26, "0x": 26, "0b0001": 26, "0001": [26, 34, 40], "0o12": 26, "octadecim": 26, "0x000a": 26, "000a": 26, "107": [26, 115], "0b1101011": 26, "253": [26, 115], "251": [26, 115], "0xfb": 26, "0b10": [26, 70], "hex": [26, 27], "0o15": 26, "coercion": 26, "coerc": 26, "implicitli": [26, 64, 81, 116], "operand": [26, 27, 28, 45, 46, 68, 70, 79], "answer": 26, "flaot": 26, "1234567890123456789": [26, 67], "2j": [26, 66, 67], "12345678901234568": [26, 67], "truncat": [26, 43, 57, 67, 68, 70], "6j": [26, 67, 77], "amaz": 26, "seem": [26, 58, 81], "disagre": 26, "hardwar": [26, 73], "33333333": [26, 100, 101], "approxim": 26, "000110011001100110011": 26, "3000000000000003": 26, "overcom": 26, "issu": [26, 32, 51], "precis": [26, 70, 109, 114], "settabl": 26, "1000000000000000055511151231257827021181583404541015625": 26, "carri": [26, 31, 70, 79, 114], "preserv": 26, "kg": 26, "000": 26, "trail": [26, 27, 29], "faster": [26, 29, 32, 67, 73, 76, 78, 100], "financi": 26, "exact": 26, "notion": [26, 79], "involv": [26, 68, 70, 78, 121], "denomin": 26, "ration": 26, "imperfect": 26, "instanti": [26, 34, 76, 77, 81], "2476979795053773": 26, "2251799813685248": 26, "5854679515581645": 26, "trigonometri": 26, "logarithm": [26, 55, 57], "co": [26, 55, 57, 71, 97, 100], "exp": [26, 55, 57, 65, 100, 102], "log10": [26, 55, 57], "sinh": [26, 55, 57], "factori": [26, 49, 53, 55, 57, 59], "141592653589793": [26, 55, 69], "22026": 26, "465794806718": 26, "1752011936438014": 26, "720": [26, 53, 55, 115], "randrang": [26, 55, 56], "shuffl": [26, 55, 56], "8036360430009386": 26, "behavior": [26, 59, 76, 77, 78, 81, 109, 113, 114], "textual": [27, 37], "english": [27, 30, 43, 66, 73], "26": [27, 28, 29, 31, 32, 38, 41, 55, 76, 99, 104, 105, 115, 116], "though": [27, 46, 50, 59, 78, 100, 104, 105, 109], "screen": [27, 34, 62, 69], "combin": [27, 28, 29, 46, 63, 65, 70, 78, 98, 106, 113], "encod": [27, 43, 45, 46], "decod": [27, 45], "ascii": [27, 43], "bring": [27, 43], "uniform": [27, 55, 56, 98, 101, 102], "0_": 27, "10ffff_": 27, "quot": [27, 43, 49, 59, 64, 66, 67], "tripl": [27, 49, 59, 64, 66, 67], "999": [27, 30, 50, 51, 101], "watev": 27, "bunch": 27, "multiline_str": [27, 66], "resarch": 27, "cum": [27, 31], "enjoi": [27, 55], "didn": [27, 76, 79], "research": [27, 31, 121], "unpack": [27, 28, 29], "3da34cc7641": 27, "individu": [27, 30, 43, 55, 99], "contigu": 27, "benefit": [27, 55, 78], "indexerror": [27, 28, 29], "first_lett": 27, "second_lett": 27, "last_index": [27, 108], "last_lett": 27, "second_last": 27, "96052f3c0c69": 27, "anukool": [27, 44], "obtain": [27, 55], "visual": [27, 28, 78, 90, 121, 122], "portion": [27, 28, 46, 50, 71], "pytho": 27, "123456789": 27, "strat": 27, "back": [27, 44, 52, 69, 73, 79, 90, 97, 104, 108, 111, 112, 113, 114, 115], "ldot": 27, "charcter": 27, "123": [27, 68, 72, 115], "456": [27, 68, 115], "789": [27, 115], "5th": [27, 28], "6th": 27, "ytho": 27, "ho": [27, 115], "ukool": 27, "nohtyp": 27, "lookuna": 27, "uolp": 27, "anuko": 27, "kool": 27, "abil": [27, 76, 78], "particularli": 27, "partit": 27, "join": [27, 28, 29, 31, 43, 69], "ew": 27, "brilliant": 27, "9df797f83624": 27, "012345": 27, "sx": 27, "ok": [27, 64], "01x345": 27, "9e95083e441a": 27, "4a9f159cd120": 27, "a04242241123": 27, "string1": 27, "string2": 27, "1050": 27, "009": 27, "hello009": 27, "hello99": 27, "world66": 27, "hello99world66": 27, "4c669126467b": 27, "arcx": 27, "arcxarcx": 27, "str1": 27, "str2": 27, "hellohellohello": 27, "context": [27, 51, 79], "str3": 27, "str4": 27, "milan": [27, 43, 77], "exmpl": 27, "battl": 27, "comparison": [27, 64, 105, 108], "97": [27, 43, 104, 105, 115, 116], "insert": [27, 30, 31, 59, 77, 97, 105, 114], "reli": [27, 43], "exponenti": [27, 55, 56, 66, 70, 100], "anyon": [27, 65], "nearli": [27, 54, 70, 97], "rule": [27, 49, 73, 78, 100, 104], "printf": 27, "000000": [27, 35, 36, 69, 104, 115, 116], "900000e": 27, "01": [27, 34, 35, 36, 38, 40, 41, 69], "appear": [27, 50, 51, 54, 59, 64, 78], "paranthes": 27, "bond": [27, 69], "width": [27, 70, 76], "field": [27, 43, 66, 104, 107], "justifi": [27, 69], "1f": 27, "1415": 27, "2f": [27, 69, 78], "pad": [27, 35, 36, 69, 70], "010": 27, "0000003": 27, "ones": [27, 55, 97, 98, 100, 101, 102, 111, 113], "list_enumer": 27, "said": [27, 78, 100], "syntaxerror": [27, 45, 52, 63, 65], "5b2db8c64782": 27, "around": [27, 52, 59, 67], "backslash": [27, 44, 64, 66], "bell": 27, "backspac": 27, "formfe": 27, "linefe": 27, "carriag": 27, "ooo": 27, "xhh": 27, "hh": 27, "ndo": 27, "tchapter": 27, "ttopic": 27, "tchp": 27, "tpython": 27, "introduct": [27, 121], "slash": [27, 44], "chapter": 27, "topic": [27, 52, 116, 122], "chp": 27, "python32": 27, "lib": [27, 36, 55, 102, 108, 111, 112, 113], "nin": 27, "x48": 27, "x45": 27, "x58": 27, "impli": [27, 28, 43, 44, 64, 70], "x61": 27, "ngood": 27, "versatil": [27, 28], "brace": [27, 30, 31, 64, 67, 69], "implicit": [27, 81], "default_ord": 27, "allan": 27, "positional_ord": 27, "keyword_ord": 27, "center": [27, 46, 69, 101], "ton": [27, 55], "1100": 27, "1966": 27, "365": [27, 115], "966365e": 27, "3f": [27, 69], "333": [27, 34, 70, 115], "bread": 27, "butter": 27, "jam": 27, "sprintf": [27, 69], "accomplish": [27, 31, 32, 37, 69], "3456789": 27, "4f": 27, "3457": 27, "tranform": 27, "captial": 27, "swapcas": 27, "ljust": [27, 69], "rjust": [27, 69], "respect": [27, 34, 41, 46, 52, 67, 68, 69, 77, 105, 107, 111, 112], "zfill": 27, "lead": [27, 45, 55], "strip": [27, 111], "achiv": 27, "lstrip": 27, "rstrip": 27, "swap": [27, 49], "dhl": 27, "ello": 27, "wor": 27, "challeng": [27, 77], "ty": 27, "endswith": 27, "expandtab": 27, "tdatatyp": 27, "nicer": 27, "lectur": 27, "isalnum": 27, "alphanumer": 27, "pythondatatyp": 27, "pyth0ndatatyp": 27, "2021": [27, 34, 35, 37, 40, 49], "isdigit": 27, "nineti": 27, "isidentifi": 27, "2021pythondatatyp": 27, "python_datatyp": 27, "islow": 27, "isupp": 27, "isnumer": 27, "web_tech": 27, "css": [27, 28, 76], "react": [27, 28, 43], "thirti": 27, "startswith": 27, "lost": 27, "capitalis": 27, "istitl": 27, "effect": [27, 43, 51, 55, 76], "za": 27, "isprint": 27, "accept": [27, 47, 77, 83, 87], "rfind": 27, "el": 27, "compani": [27, 28, 30, 52, 78, 104, 105], "cut": 27, "everybodi": 27, "facebook": 27, "microsoft": 27, "ibm": 27, "oracl": 27, "amazon": 27, "comma": [27, 28, 29, 30, 31, 49, 67], "acronym": 27, "abbrevi": [27, 35, 36, 37, 112], "determin": [27, 31, 109, 110, 114], "conjunct": [27, 69], "rindex": 27, "phrase": 27, "datasci": [27, 50, 70], "bottl": 27, "falcon": 27, "hash": [27, 59, 64], "2021pythondatayp": 27, "python_dataypes_2021": 27, "262144": 27, "citi": [27, 30, 32, 43, 46, 65, 76, 105, 108], "tamper": [27, 32, 65, 76], "textwrap": 27, "reformat": 27, "hold": [28, 51, 52, 65, 81, 98], "compos": 28, "syantax": 28, "list_nam": 28, "value1": 28, "value2": 28, "value3": 28, "valuen": 28, "my_list1": [28, 98], "mix": [28, 29, 30, 31, 52, 98, 99], "my_list2": [28, 98], "my_list3": 28, "mous": [28, 29], "my_list4": 28, "baz": 28, "quz": 28, "quux": 28, "corg": 28, "my_list5": 28, "n_list": 28, "0a4959e7a13b": 28, "ind": 28, "3rd": [28, 51, 53, 97], "4th": [28, 29], "does_exist": 28, "mistak": [28, 45, 73], "data1": [28, 104], "concaten": [28, 29, 32, 55, 69, 76, 79, 97, 104], "list2": [28, 54, 106], "list3": 28, "4ed3868a9a2": 28, "squeez": 28, "b72af0bfcd83": 28, "stack": [28, 53, 54, 100, 101, 102, 105], "cmp": [28, 29, 30], "minimum": [28, 97, 101, 104, 122], "Not": [28, 29, 30, 46, 56, 57, 70, 73, 79, 81, 97, 98, 110], "vowel": [28, 29, 65, 66], "py_list": 28, "9b450cb47d30": 28, "8f0bbdfdf6e5": 28, "tabul": [28, 30, 79], "399": [28, 115], "b942612e6b6a": 28, "consist": [28, 30, 45, 59, 60, 64, 78, 99], "pow2": [28, 32], "128": [28, 32, 115], "256": [28, 32, 115], "filter": [28, 30, 32, 114], "my_info": 28, "height": [28, 70], "marit": 28, "statu": 28, "front_end": 28, "redux": 28, "back_end": 28, "node": 28, "mongodb": 28, "full_stack": 28, "sql": [28, 104, 112], "median": [28, 55, 76, 97, 101, 104], "half": 28, "sweden": [28, 46], "norwai": [28, 46], "scandic": 28, "my_tuple1": 29, "my_tuple2": 29, "my_tuple3": 29, "my_tuple4": 29, "my_tupl": 29, "dog": [29, 78], "paranthesi": [29, 64], "mandatori": [29, 34, 49, 52, 64, 77, 81], "t1": [29, 34, 38, 40, 41], "t2": [29, 34, 38, 41], "t3": [29, 34, 38], "tricki": 29, "t4": [29, 34], "n_tupl": 29, "basicli": 29, "8th": 29, "f09af94986b4": 29, "f3f4b74da706": 29, "py_tupl": 29, "john": [29, 52], "kate": 29, "safe": [29, 43, 76], "heterogen": [29, 104, 106, 112], "homogen": [29, 98], "boost": 29, "guarante": [29, 43, 46], "remain": [29, 43, 70], "protect": [29, 46, 67, 76, 77], "veget": [29, 46], "fruits_veget": 29, "favorit": 29, "mushroom": 29, "beverag": 29, "food_tupl": 29, "food_list": 29, "asian": 29, "asian_countri": 29, "singapor": 29, "thailand": 29, "indonesia": [29, 43], "associ": [30, 55, 59, 64, 65, 71, 77], "correspond": [30, 40, 45, 47, 55, 65, 71, 73, 77, 81, 99], "st": 30, "my_dict1": 30, "my_dict2": 30, "666": [30, 115], "my_dict3": 30, "7f1fefd4d3f0": 30, "200": [30, 49, 52, 55, 66, 78, 99, 115], "b312893cfb9a": 30, "keyerror": [30, 31, 107, 108, 111, 113], "my_dict": 30, "god": 30, "555108164c58": 30, "elemnet": [30, 67], "dict_kei": 30, "downtown": 30, "php": [30, 73], "popitem": 30, "arbitrari": [30, 31, 46, 49, 81, 99, 104], "bb99b9cebaa8": 30, "8138b0729954": 30, "typ": 30, "overwrit": [30, 43, 52], "dict_item": 30, "all_kei": 30, "new_dict": 30, "emp_nam": 30, "emp_id": [30, 52], "jlufe": 30, "python3": [30, 46], "dict_valu": 30, "odd_squar": 30, "61": [30, 40, 104, 105, 115, 116], "bird": [30, 76, 78], "breed": 30, "leg": [30, 78], "gender": [30, 43, 76], "marital_statu": 30, "notat": [31, 69, 99], "f49307ce4aaa": 31, "unhash": 31, "distinguish": [31, 43, 81], "slice": [31, 64, 67, 99, 104], "uncom": 31, "discard": 31, "unchang": [31, 66], "NO": 31, "3bfaa309574d": 31, "unorderd": 31, "symmetric_differ": 31, "min": [31, 76, 97, 100, 101, 102, 104], "largest": [31, 55, 57], "smallest": [31, 57], "intersection_upd": 31, "isdisjoint": 31, "difference_upd": 31, "symmetric_difference_upd": 31, "issubset": 31, "issuperset": 31, "characterist": [31, 76, 115, 116], "hashabl": 31, "Being": 31, "attributeerror": [31, 76, 77, 78], "bc9e07fcbe69": 31, "subset": [31, 41, 104, 109, 110, 121], "disjoint": 31, "inspir": 31, "p_letter": 32, "solv": [32, 51, 76, 106, 122], "rewritten": 32, "yourself": [32, 34, 49, 65, 69, 76], "util": [32, 111], "number_list": 32, "positive_even_numb": 32, "flatten": [32, 97], "flattened_list": 32, "num_list": [32, 54], "aren": 32, "param1": 32, "param2": 32, "param3": 32, "arg1": [32, 52], "arg2": 32, "arg3": 32, "add_two_num": 32, "multiple_vari": 32, "two_power_of_f": 32, "transposed_row": 32, "compact": 32, "ensur": [32, 43, 64, 78], "243": [32, 115], "1024": 32, "625": [32, 115], "3125": 32, "1296": 32, "7776": 32, "2401": 32, "16807": 32, "4096": 32, "32768": 32, "6561": 32, "59049": 32, "10000": [32, 101, 104], "100000": 32, "mumbai": 32, "shanghai": 32, "IN": 32, "fi": 32, "curri": [32, 76], "gate": 32, "ethan": [32, 49, 52, 69], "slope": [32, 49, 70], "intercept": [32, 70], "dig": 34, "deeper": 34, "datetime_object": 34, "06": [34, 35, 36, 37, 38, 40, 41], "527393": 34, "date_object": [34, 36], "maxyear": 34, "minyear": 34, "__builtins__": [34, 45, 55], "__cached__": [34, 55], "__doc__": [34, 49, 55, 64, 77], "__file__": [34, 55], "__loader__": [34, 55], "__name__": [34, 55, 77], "__package__": [34, 55], "__spec__": [34, 55], "datetime_capi": 34, "sy": [34, 44, 45, 46, 58, 59, 69], "tzinfo": 34, "2019": [34, 35, 36, 38, 39, 40, 52], "04": [34, 40, 41], "wonder": [34, 49], "constructor": [34, 47, 59, 78], "classmethod": [34, 39], "unix": [34, 39, 40], "1970": [34, 39, 40], "utc": [34, 35, 36, 39, 40], "fromtimestamp": [34, 35, 39], "1326244364": 34, "2012": [34, 72], "week": [34, 35, 36, 38, 49], "234566": 34, "00": [34, 35, 36, 38, 40, 41, 69, 104, 105, 107], "haven": 34, "dateclass": 34, "2017": 34, "342380": 34, "1511893559": 34, "34238": 34, "t5": 34, "t6": 34, "201": [34, 115], "total_second": 34, "233423": 34, "435633": 34, "mm": [34, 36, 37], "dd": [34, 36, 37], "yyyi": [34, 36], "uk": 34, "s1": [34, 76, 113, 114], "yy": [34, 37], "s2": [34, 76, 113, 114], "9999": [34, 40, 55], "02": [34, 35, 36, 40, 41], "58": [34, 35, 40, 41, 104, 105, 115, 116], "date_str": [34, 36], "rather": [34, 41, 55, 59, 64, 78, 104, 105, 107, 111, 113, 114], "suggest": [34, 45], "pytz": [34, 38], "tz_ny": [34, 38], "america": [34, 38, 43], "new_york": [34, 38], "datetime_ni": [34, 38], "ny": [34, 38], "tz_london": [34, 38], "europ": [34, 38], "datetime_london": [34, 38], "08": [34, 38, 40, 41], "date_time1": 35, "date_time2": 35, "168321": 35, "date_tim": 35, "1528797322": 35, "jun": [35, 37, 62], "03pm": 35, "weekdai": [35, 36], "sundai": [35, 36], "mondai": [35, 36, 40], "jan": [35, 36, 62], "feb": [35, 36, 62], "centuri": [35, 36], "2013": [35, 36], "hour": [35, 36, 38, 39, 40, 70, 78, 122], "clock": [35, 36], "pm": [35, 36, 41], "minut": [35, 36, 38, 39, 40], "microsecond": [35, 36, 38], "999999": [35, 36, 69], "offset": [35, 36, 43], "hhmm": [35, 36], "zone": [35, 36, 38], "001": [35, 36], "002": [35, 36], "366": [35, 36, 40, 115], "sep": [35, 36, 59, 62, 69, 101, 115], "07": [35, 36, 38, 41], "05": [35, 36, 41], "09": [35, 36, 41], "tue": 35, "dt_string": [36, 37], "date": [36, 38, 104], "dt_object1": 36, "dt_object2": 36, "match": [36, 52, 108, 111, 113], "fffbe51149a7": 36, "programdata": [36, 44, 55, 108, 111, 112, 113], "anaconda3": [36, 55, 108, 111, 112, 113], "_strptime": 36, "_strptime_datetim": 36, "cl": [36, 81], "data_str": 36, "566": [36, 115], "567": [36, 115], "568": [36, 115], "tt": 36, "fraction": [36, 57], "gmtoff_fract": 36, "569": [36, 115], "tzname": 36, "gmtoff": 36, "570": [36, 115], "347": [36, 115], "format_regex": 36, "348": [36, 115], "349": [36, 115], "350": [36, 115], "351": [36, 115], "d1": [37, 78], "d2": 37, "d3": 37, "d4": 37, "331191": 37, "current_tim": 38, "994177": 38, "localtim": [38, 41], "38": [38, 76, 115], "200555": 38, "todai": [38, 39], "new_year": 38, "2020": [38, 104], "time_left_for_newyear": 38, "diff": 38, "timedelta": 38, "86": [38, 104, 105, 115, 116], "databas": [39, 43, 104], "1545730073": 39, "dt_object": 39, "57": [39, 41, 104, 105, 115, 116], "1624370069": 39, "654593": 39, "think": [39, 65, 76, 77, 98], "analysi": [39, 73, 104, 105, 108, 115, 116, 121], "blog": [39, 81], "epoch": 40, "1624370297": 40, "5828025": 40, "1545925769": 40, "9618232": 40, "local_tim": 40, "suspend": [40, 41], "delai": [40, 41], "thread": [40, 41, 55], "talk": [40, 41], "brief": [40, 43, 56, 57, 77, 101], "tm_year": 40, "tm_mon": 40, "tm_mdai": 40, "tm_hour": 40, "tm_min": 40, "tm_sec": 40, "tm_wdai": 40, "tm_ydai": 40, "361": [40, 115], "tm_isdst": 40, "0000": [40, 70], "nyear": 40, "44": [40, 41, 115], "362": [40, 115], "1545966844": 40, "fri": 40, "named_tupl": 40, "time_str": 40, "pars": [40, 43, 45, 73, 104], "172": [40, 115], "suspens": 41, "51": [41, 49, 115, 116], "52": [41, 104, 105, 115, 116], "2f7f4e5fdb49": 41, "slightli": [41, 63], "76a0a5ce1450": 41, "print_hello_three_tim": 41, "print_hi_three_tim": 41, "target": [41, 73, 112], "concurr": 41, "print_hello": 41, "print_hi": 41, "75": [41, 101, 104, 105, 115], "awar": 43, "disk": [43, 73], "perman": 43, "volatil": 43, "ram": 43, "lose": 43, "ti": 43, "freed": 43, "readm": 43, "byte": [43, 44, 104], "pointer": 43, "exclus": [43, 55, 98, 104, 108], "creation": [43, 98, 121], "rb": 43, "wb": 43, "rt": 43, "_io": 43, "textiowrapp": 43, "cp1252": 43, "gave": 43, "readlin": 43, "logo": [43, 44], "png": [43, 44], "moreov": 43, "utf": [43, 46], "linux": 43, "behav": [43, 66, 79, 81, 100], "highli": [43, 77, 81, 97], "properli": [43, 44, 45, 62, 77], "garbag": [43, 45, 77, 109], "collector": 43, "unreferenc": [43, 77], "safer": [43, 44], "eras": 43, "test_1": [43, 44], "overwritten": 43, "ourselv": [43, 60, 62], "test_2": [43, 44], "data_1": [43, 44], "dr": [43, 55, 76], "text_1": 43, "wrote": [43, 62, 64], "nthi": [43, 47], "ncontain": 43, "sting": 43, "cursor": 43, "seek": 43, "fast": [43, 97, 104, 108], "lastli": 43, "eof": 43, "splitlin": 43, "file_data": 43, "375": [43, 115], "full_data": 43, "taken": 43, "detach": 43, "underli": [43, 57, 71, 73, 97, 104, 111], "buffer": 43, "textiobas": 43, "fileno": 43, "descriptor": [43, 59], "stream": [43, 59], "isatti": 43, "seek_set": 43, "seekabl": 43, "resiz": [43, 97], "writabl": 43, "writelin": 43, "04_python_funct": [43, 55], "007_python_function_modul": 43, "filenotfounderror": [43, 45], "c3f637926d7e": 43, "winerror": [43, 55], "ava": 43, "cript": 43, "bject": 43, "otat": 43, "stringifi": 43, "person_dct": 43, "england": [43, 45, 46, 76], "person_json": 43, "load": [43, 55, 59, 73], "dump": [43, 59], "beautifi": 43, "ensure_ascii": 43, "json_exampl": 43, "omma": 43, "epar": 43, "alu": 43, "tabular": [43, 104, 113, 114], "spreadsheet": [43, 104], "csv_exampl": 43, "csv_reader": 43, "reader": 43, "delimit": [43, 101, 104, 115], "line_count": 43, "instal": [43, 55, 62], "xlrd": 43, "excel_book": 43, "open_workbook": 43, "xl": 43, "nsheet": 43, "sheet_nam": 43, "predefin": [43, 49, 55, 68], "root": [43, 46, 55, 57, 97, 100], "femal": [43, 76, 115], "helsinki": 43, "javascrip": 43, "etre": 43, "elementtre": 43, "et": 43, "tree": 43, "xml_exampl": 43, "getroot": 43, "attrib": 43, "child": [43, 76, 78], "male": [43, 76, 115], "speech_barack_obama": 43, "speech_michelle_obama": 43, "speech_donald_trump": 43, "speech_melina_trump": 43, "countries_data": 43, "most_spoken_languag": [43, 49], "filenam": [43, 55, 69, 104], "91": [43, 68, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115], "french": 43, "arab": 43, "spanish": 43, "russian": 43, "portugues": 43, "dutch": 43, "german": 43, "chines": 43, "swahili": 43, "serbian": 43, "most_populated_countri": [43, 49], "1377422166": 43, "1295210000": 43, "unit": 43, "323947000": 43, "258705000": 43, "brazil": 43, "206135893": 43, "pakistan": 43, "194125062": 43, "nigeria": 43, "186988000": 43, "bangladesh": 43, "161006790": 43, "feder": 43, "146599183": 43, "japan": [43, 116], "126960000": 43, "incom": [43, 52, 76], "email_exchanges_big": 43, "find_most_common_word": 43, "descend": [43, 49, 104], "find_most_frequent_word": 43, "barack": 43, "obama": 43, "speech": 43, "michel": 43, "donald": 43, "trump": 43, "melina": 43, "transcript": 43, "coupl": 43, "remove_support_word": 43, "check_text_similar": 43, "support_word": 43, "romeo_and_juliet": 43, "hacker_new": 43, "arrang": [44, 115], "subdirectori": [44, 58], "deepak": [44, 55], "01_learn_python4data": [44, 55, 116], "05_python_fil": 44, "getcwdb": 44, "suppli": [44, 46, 111], "newdir": 44, "maco": 44, "onedr": 44, "ipynb_checkpoint": 44, "001_python_file_input_output": 44, "002_python_file_directori": 44, "003_python_file_except": 44, "004_python_exceptions_handl": 44, "005_python_user_defined_except": 44, "img": 44, "logo1": 44, "testfil": [44, 46], "recycl": 44, "bin": [44, 59, 70], "winreag": 44, "winre_backup_partit": 44, "marker": 44, "boottel": 44, "dumpstack": 44, "log": [44, 55, 56, 57, 97, 101], "tmp": 44, "hiberfil": 44, "imdisk": 44, "onedrivetemp": 44, "pagefil": 44, "perflog": 44, "x86": 44, "recoveri": 44, "swapfil": 44, "volum": 44, "dir_nam": 44, "python_studi": 44, "current_file_nam": 44, "new_file_nam": 44, "python_learn": 44, "my_data": 44, "rmtree": 44, "shutil": 44, "encount": [45, 46, 100], "unhandl": 45, "broadli": 45, "classifi": 45, "proper": [45, 76, 109], "a8dfd56d4d8": 45, "exaplan": [45, 76], "arrow": 45, "parser": 45, "cb8ac02fbcd3": 45, "forgot": 45, "runtim": [45, 46, 55, 78], "importerror": 45, "9b9247988596": 45, "6ac8e81b6f0c": 45, "errno": 45, "0ef33cc3a94d": 45, "pow": [45, 55, 57], "debug": [45, 53, 60, 64], "119e50d96cfb": 45, "c00e5d7d3c3": 45, "e2e604bf92d": 45, "deliber": 45, "df6ce7ede1dc": 45, "counti": 45, "fbf7cddd4b2a": 45, "typo": 45, "straight": [45, 67], "f7ffd6347533": 45, "unsupport": [45, 68, 79], "19a": 45, "ee4e8ee8c904": 45, "illeg": [45, 64], "plenti": [45, 104], "view": [45, 78, 99, 102, 107], "assertionerror": 45, "assert": [45, 46, 63, 64], "eoferror": 45, "hit": 45, "floatingpointerror": 45, "generatorexit": 45, "interrupt": 45, "memoryerror": [45, 46], "notimplementederror": 45, "abstract": [45, 76], "oserror": 45, "overflowerror": [45, 70], "referenceerror": 45, "weak": [45, 59], "proxi": [45, 78], "runtimeerror": [45, 46], "indentationerror": [45, 64], "taberror": 45, "inconsist": 45, "systemerror": 45, "detect": [45, 99, 121], "systemexit": 45, "unboundlocalerror": [45, 50, 51], "unicodeerror": 45, "unicodeencodeerror": 45, "unicodedecodeerror": 45, "unicodetranslateerror": 45, "translat": [45, 73, 77], "improp": 45, "modulo": [45, 79], "event": 46, "disrupt": 46, "cope": 46, "crash": 46, "sudden": 46, "halt": 46, "critic": 46, "choos": [46, 98, 104, 105], "went": 46, "randomlist": 46, "exc_info": 46, "reciproc": 46, "previous": [46, 55], "__class__": [46, 76, 77], "year_born": 46, "2022": 46, "1926": 46, "analyz": [46, 73, 104, 105, 106, 109, 110, 112, 115, 116], "pseudo": [46, 56], "c761920b81b0": 46, "51782e52f201": 46, "exceptioni": 46, "exceptionii": 46, "readi": [46, 76, 78, 122], "fh": 46, "ioerror": 46, "exception1": 46, "exception2": 46, "exceptionn": 46, "releas": [46, 49], "connect": [46, 122], "remot": 46, "network": [46, 90, 101, 121, 122], "circumst": 46, "disconnect": 46, "permiss": 46, "shorten": 46, "vari": [46, 63, 76, 104], "captur": [46, 56, 70], "temp_convert": 46, "var": [46, 52, 76], "rare": [46, 81], "functionnam": 46, "deriv": [46, 47, 76, 78, 81], "subclass": [46, 59, 78], "networkerror": 46, "_init_": 46, "bad": [46, 104], "hostnam": 46, "sum_of_five_num": 46, "b951d4fef2c8": 46, "destructur": 46, "iceland": 46, "fin": 46, "sw": 46, "unpacking_person_info": 46, "dct": 46, "unlimit": 46, "sum_al": 46, "packing_person_info": 46, "lst_one": 46, "lst_two": 46, "country_lst_on": 46, "country_lst_two": 46, "nordic_countri": 46, "lime": 46, "tomato": [46, 49, 70], "potato": [46, 49, 70], "cabbag": 46, "onion": 46, "carrot": 46, "fruits_and_veg": 46, "veg": 46, "estonia": 46, "ru": 46, "forc": [47, 98, 105], "serv": [47, 59, 83, 87], "indirectli": 47, "customerror": 47, "dfca0b041b3d": 47, "d75c9779269a": 47, "clearer": [47, 64], "hint": [47, 102, 116], "valuetoosmallerror": 47, "valuetoolargeerror": 47, "she": [47, 76], "i_num": 47, "congratul": [47, 62, 90], "nenter": 47, "ncongratul": 47, "per": [47, 70, 105], "knowledg": 47, "salarynotinrangeerror": 47, "salari": [47, 76, 78, 108], "5000": 47, "15000": 47, "super": [47, 76, 81, 101, 108, 111], "3000": 47, "6ab0f28c63a7": 47, "7e786bcbd078": 47, "overridden": [47, 78], "parent": 47, "__str__": [47, 79], "overrid": [47, 81], "c454c1331524": 47, "3681b3969e27": 47, "compon": [49, 76], "dry": [49, 76], "modular": 49, "chunk": [49, 115], "improv": [49, 104, 113, 121], "function_nam": 49, "parameter1": [49, 59], "parameter2": 49, "header": [49, 52, 107, 108, 111, 113, 114, 115], "describ": [49, 52, 55, 64, 70, 76, 104], "add_two_numb": [49, 52], "num_on": 49, "num_two": 49, "generate_full_nam": 49, "full_nam": [49, 52, 65], "gereet": 49, "morn": [49, 52, 69], "sum_of_numb": 49, "course_nam": 49, "square_numb": [49, 52], "area_of_circl": [49, 65], "area": [49, 65, 70, 76, 78], "314": [49, 111, 115], "sum_two_numb": 49, "calculate_ag": [49, 52], "current_year": [49, 52], "birth_year": [49, 52, 65], "1819": [49, 52], "202": [49, 115], "weight_of_object": 49, "mass": [49, 65, 104], "graviti": [49, 65, 68, 74], "weight": [49, 108], "newton": 49, "981": 49, "print_fullnam": [49, 52], "absolute_valu": 49, "even_num": 49, "83": [49, 104, 105, 115], "find_even_numb": 49, "birthdai": 49, "1821": 49, "temp": [49, 65], "even_odd": 49, "earth": 49, "surfac": 49, "62": [49, 115, 116], "moon": 49, "162": [49, 115], "dinner": 49, "won": [49, 78, 101, 104], "circl": [49, 57, 65, 70, 76], "\u03c0": 49, "perimet": [49, 70, 78], "perimeter_of_circl": 49, "add_all_num": 49, "convert_celsius_2_fahrenheit": 49, "check_season": 49, "calculate_slop": 49, "equat": 49, "quadrat": 49, "ax\u00b2": 49, "bx": 49, "solve_quadratic_eqn": 49, "print_list": 49, "reverse_list": 49, "reverse_list1": 49, "capitalize_list_item": 49, "add_item": 49, "food_staff": 49, "milk": 49, "fungi": 49, "remove_item": 49, "sum_all_numb": 49, "sum_of_odd": 49, "sum_of_even": 49, "evens_and_odd": 49, "is_empti": 49, "calculate_mean": 49, "calculate_median": 49, "calculate_mod": 49, "calculate_rang": 49, "calculate_vari": 49, "calculate_std": 49, "deviat": [49, 76, 97, 101, 104], "is_prim": 49, "visibl": [50, 55, 69, 77], "global_var": [50, 51], "fun1": [50, 51, 78], "fun2": [50, 51, 78], "b3ac65e67ae9": 50, "referenc": [50, 51], "global_lang": 50, "var_scope_test": 50, "local_lang": 50, "6f8260f6f5bb": 50, "print_data": 50, "veriabl": 50, "60631cbc73b0": 50, "ed7c4dc05b92": 50, "loc_var": 50, "8b5cab780f33": 50, "globalglob": 50, "my_func": 50, "affect": [50, 104], "whose": [50, 54, 65, 77, 108, 111], "x1": [50, 70], "outer_fun": 50, "inner_fun": 50, "fucntion": [50, 51], "nonlov": 50, "900": [50, 76], "scenario": [51, 78, 122], "515941f58fe7": 51, "fun3": [51, 78], "config": 51, "main1": 51, "formal": [52, 81], "smoothli": 52, "98a1ccc168e9": 52, "76bf7a927991": 52, "109": [52, 104, 115], "633": [52, 115], "5b50fb5d02c4": 52, "evenodd": 52, "driver": 52, "peramet": 52, "bruce": 52, "carson": 52, "night": 52, "everyon": 52, "david": [52, 69], "emp_data": 52, "baidu": [52, 65], "empoye": 52, "101": [52, 77, 114, 115], "samsung": 52, "102": [52, 77, 104, 105, 114, 115, 116], "eric": 52, "Will": 52, "0d17a834dca2": 52, "dividend": 52, "divisor": 52, "rem": 52, "surnam": [52, 59, 107, 114], "frank": 52, "harper": 52, "clayton": 52, "gretta": 52, "simultan": 52, "first_nm": 52, "last_nm": 52, "b8ab82a1062c": 52, "gari": 52, "hank": 52, "ivan": 52, "wrap": [52, 76, 111], "176": [52, 55, 104, 105, 115, 116], "sum_all_num": 52, "printinfo": 52, "vartupl": 52, "generate_group": 52, "team": 52, "do_someth": 52, "physic": [53, 76], "parallel": 53, "mirror": 53, "face": 53, "reflect": 53, "depth": [53, 65, 78], "overflow": [53, 102], "cross": 53, "recursionerror": 53, "recursor": 53, "3ec8c6652eef": 53, "frame": [53, 64, 104, 108, 111, 112, 113], "exceed": 53, "expens": [53, 76], "opposit": [54, 104], "expand": [54, 59, 101], "instant": 54, "inlin": [54, 87], "alloc": [54, 76], "invoc": 54, "argument_list": 54, "even_list": 54, "78": [54, 101, 104, 115], "even_no": 54, "sqr": 54, "nameless": 54, "period": [54, 59, 104], "new_list": 54, "positive_no": 54, "minim": 54, "functool": 54, "share": [55, 77, 81, 104], "facil": 55, "categor": [55, 104, 105], "resid": 55, "test1": 55, "anaconda": [55, 97], "tar": 55, "gz": 55, "kb": 55, "import_ipynb": 55, "fibo": 55, "fib": 55, "fibo1": 55, "equal1": 55, "eq": 55, "sqrt": [55, 57, 97, 100, 102], "449489742783178": 55, "randint": [55, 56], "718281828459045": 55, "rand": [55, 104], "random_numb": 55, "hamper": 55, "42477796076938": 55, "pythonpath": 55, "python38": 55, "dll": 55, "appdata": 55, "roam": 55, "site": [55, 108, 111, 112, 113], "locket": 55, "py3": 55, "egg": 55, "pythonwin": 55, "session": 55, "foe": 55, "my_modul": 55, "imp": 55, "greet_modul": 55, "pynb": 55, "python4datasci": 55, "test_modul": 55, "importlib": 55, "pyscript": 55, "aco": [55, 57], "acosh": [55, 57], "asin": [55, 57], "asinh": [55, 57], "atan": [55, 57], "atan2": [55, 57], "atanh": [55, 57], "ceil": [55, 57, 102], "comb": 55, "copysign": [55, 57, 102], "cosh": [55, 57], "dist": 55, "erf": [55, 57], "erfc": [55, 57], "expm1": [55, 57], "fab": [55, 57], "floor": [55, 57, 65, 70, 77, 79, 102], "fmod": [55, 57], "frexp": [55, 57], "fsum": [55, 57], "gamma": [55, 56, 57], "gcd": 55, "hypot": [55, 57], "isclos": 55, "isfinit": [55, 57], "isinf": [55, 57], "isnan": [55, 57], "isqrt": 55, "ldexp": [55, 57], "lgamma": [55, 57], "log1p": [55, 57], "log2": [55, 57], "modf": [55, 57], "nan": [55, 57, 98, 100, 102, 105, 110, 114, 115, 116], "perm": 55, "prod": 55, "radian": [55, 57], "sin": [55, 57, 97, 100], "tan": [55, 57], "tanh": [55, 57], "tau": 55, "trunc": [55, 57, 102], "pre": [55, 73], "capword": [55, 65], "ascii_lett": 55, "mailbox": 55, "tkinter": 55, "fetch": [55, 104], "mkdir": 55, "directory_nam": 55, "chdir": 55, "getcwd": 55, "rmdir": 55, "fileexistserror": 55, "5aa728677edf": 55, "183": [55, 115], "argv": 55, "argument1": 55, "argument2": 55, "cd": 55, "forth": 55, "maxsiz": 55, "mul": 55, "gt": 55, "mod": [55, 102], "concat": [55, 104, 115, 116], "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": 55, "0123456789": 55, "punctuat": 55, "3333333333333335": 55, "333333333333333481363069950020872056484222412109375": 55, "inclus": [55, 56, 98, 104], "03505598723366": 55, "2946014910624595": 55, "92fab552c144": 55, "baseto": 55, "sine": [55, 57, 97], "cosin": [55, 57, 97], "tangent": [55, 57], "highest": [55, 104], "lowest": [55, 104], "085536923187668": 55, "6931471805599453": 55, "6197751905438615": 55, "14159": [55, 57], "71828": [55, 57], "stdev": 55, "09090909090909": 55, "106628291529549": 55, "advis": [55, 65], "writ": 55, "random_user_id": 55, "1ee33d": 55, "user_id_gen_by_us": 55, "kcsy2": 55, "smfyb": 55, "bwmeq": 55, "zxoyh": 55, "2rgxf": 55, "1gcsgplmabavqz26": 55, "yd7efwnqkns7qxat": 55, "ycarc5yrrupyg00": 55, "ubgxofi7uxswaykn": 55, "div0ssutgadkwstr": 55, "rgb_color_gen": 55, "rgb": 55, "255": [55, 115], "244": [55, 115], "list_of_hexa_color": 55, "list_of_rgb_color": 55, "generate_color": 55, "hexa": 55, "a3e12f": 55, "03ed55": 55, "eb3d2b": 55, "b334ef": 55, "175": [55, 115], "79": [55, 104, 115, 116], "shuffle_list": 55, "9560342718892494": 56, "9478274870593494": 56, "05655136772680869": 56, "eh": 56, "determinist": 56, "encrypt": 56, "getstat": 56, "setstat": 56, "restor": 56, "getrandbit": 56, "seq": 56, "chosen": 56, "triangular": 56, "low": [56, 98], "betavari": 56, "alpha": [56, 65], "beta": 56, "expovari": 56, "lambd": 56, "gammavari": 56, "gauss": 56, "mu": 56, "sigma": 56, "gaussian": [56, 101], "lognormvari": 56, "normalvari": 56, "vonmisesvari": 56, "kappa": 56, "vonmis": 56, "paretovari": 56, "pareto": 56, "weibullvari": 56, "weibul": 56, "cmath": 57, "mantissa": 57, "infin": [57, 100, 102], "arc": 57, "euclidean": [57, 70], "angl": 57, "hyperbol": 57, "complementari": 57, "ratio": 57, "circumfer": [57, 65, 70], "diamet": 57, "packagesin": 58, "hierarchi": 58, "kept": 58, "song": [58, 76], "music": 58, "analog": [58, 104], "conceptu": [58, 122], "select_difficulti": 58, "prevent": [58, 65, 76, 78], "collid": [58, 71], "quotat": [59, 62], "intent": 59, "stdout": [59, 69], "forcibli": 59, "fit": 59, "blank": 59, "__main__": [59, 76, 77, 78, 79, 81], "summari": 59, "elabor": 59, "pep": 59, "257": [59, 115], "pickl": 59, "serial": 59, "copyreg": 59, "regist": 59, "pickler": 59, "pickletool": 59, "unpickl": 59, "misc": 59, "__version__": [59, 97, 102], "format_vers": 59, "compatible_format": 59, "add_binari": 59, "binary_sum": 59, "any_fun": 59, "public": [59, 76], "famili": 59, "info": [59, 77, 78, 81, 102], "__weakref__": [59, 77], "quick": [59, 102], "export": 59, "restructur": 59, "readili": [60, 69], "someon": 60, "decompos": 60, "segment": 60, "maintain": 60, "programmar": 60, "workload": 60, "my_addit": 60, "200000000000003": 60, "ambigu": 60, "whatev": [62, 77, 79], "notepad": 62, "notpad": 62, "cmd": 62, "confirm": 62, "nfeb": 62, "nmar": 62, "napr": 62, "nmai": 62, "njun": 62, "njul": 62, "naug": 62, "nsep": 62, "noct": 62, "nnov": 62, "ndec": 62, "mar": 62, "apr": 62, "jul": 62, "aug": 62, "oct": 62, "nov": 62, "tworld": 62, "routin": [62, 100], "eat": [62, 78], "_m": 62, "_m_m_m_m_m_m_m_m_m": 62, "reserv": [63, 65], "__peg_parser__": 63, "async": 63, "await": 63, "50b154750974": 63, "becasu": 63, "473137c03db7": 63, "entiti": [63, 76], "differenti": 63, "myclass": 63, "var_1": 63, "print_this_to_screen": 63, "1variabl": 63, "variable1": 63, "perfectli": [63, 64], "fine": [63, 69], "43186c7d3555": 63, "3e859d37287a": 63, "4d4a0e714c73": 63, "0f73a35e8ce2": 63, "gap": 63, "this_is_a_long_vari": 63, "add_6_and_3": 63, "incomplet": 64, "okai": 64, "explicit": [64, 81, 100], "plai": [64, 71, 78, 104], "throughout": 64, "style": [64, 65, 69, 101, 104, 105, 108, 111, 115, 116], "enforc": [64, 68], "neat": 64, "former": [64, 78], "forget": 64, "nperfect": 64, "nmulti": 64, "pythonthi": 64, "mappingmethod": 64, "attributemethod": 64, "dictionaryliter": 64, "specialattribut": 64, "dynamicfeatur": 64, "specialidentifi": 64, "augmentedassign": 64, "ellipsi": 64, "specialmethod": 64, "basicmethod": 64, "stringmethod": 64, "bitwis": [64, 79], "numbermethod": 64, "subscript": [64, 67], "callablemethod": 64, "truthvalu": 64, "frameobject": 64, "tupleliter": 64, "codeobject": 64, "typeobject": 64, "privatenam": 64, "unari": [64, 70], "contextmanag": 64, "listliter": 64, "sequencemethod": 64, "mnemon": 65, "bag": 65, "infer": [65, 101, 104, 105], "smart": 65, "recomend": 65, "capital_c": 65, "_if": 65, "year_2021": 65, "year2021": 65, "current_year_2021": 65, "1num": 65, "adopt": 65, "snake": 65, "snake_cas": 65, "engine_rotation_spe": 65, "github": 65, "is_marri": 65, "person_info": [65, 76, 78], "outout": 65, "worri": 65, "q": 65, "redeclar": 65, "realiti": 65, "ters": 65, "verbos": 65, "benefici": [65, 107], "evid": 65, "glanc": 65, "macro_cas": 65, "camelcas": 65, "my_nam": 65, "current_salari": 65, "speed_of_light": 65, "bob": 65, "has_w2": 65, "1099_file": 65, "8cc0f1bdc5ed": 65, "a_g_": 65, "_age": 65, "age_": 65, "ill": 65, "certainli": 65, "awhil": 65, "is_light_on": 65, "modulu": [65, 70, 79], "floor_divis": 65, "radiu": [65, 70, 76], "meter": 65, "circum_of_circl": 65, "1j": [66, 102], "0b1010": 66, "0o310": 66, "0x12c": 66, "int_1": 66, "int_2": 66, "float_1": 66, "float_2": 66, "5e2": 66, "14j": 66, "150": [66, 79, 104, 115], "inbuilt": [66, 101, 108], "unifi": 66, "27j": 66, "0j": [66, 70], "16j": 66, "ee80ca1a52c8": 66, "u00dcnic": 66, "u00f6d": 66, "raw_str": 66, "\u00fcnic\u00f6d": 66, "multi": [66, 67, 76, 105, 106], "u00dc": 66, "\u00fc": 66, "u00f6": 66, "\u00f6": 66, "1e100": 66, "googol": 66, "complex_number1": 66, "complex_number2": 66, "juic": 66, "soup": 66, "menu": 66, "drink": 66, "food": [66, 67], "fruits1": 66, "strawberri": [66, 77], "fruits2": 66, "fruits3": 66, "fruits4": 66, "desgin": 66, "uptil": 67, "elemtnt": 67, "c92d9f2b36de": 67, "tuple1": 67, "e32e417070a1": 67, "7fce570bf337": 67, "simiar": 67, "466b90e7ef2f": 67, "242b77ef2a87": 67, "huge": [67, 114], "promot": [68, 70], "loss": 68, "num_int": 68, "num_flo": 68, "num_new": 68, "124": [68, 115], "num_str": 68, "49e421f2057c": 68, "typecast": 68, "required_datatyp": 68, "num_float": 68, "jason": 68, "num_sum": 68, "579": [68, 115], "interg": 68, "1p": 68, "bcaaeab6bf17": 68, "first_name_to_list": 68, "focus": [69, 76], "devic": [69, 73], "attract": 69, "34567890": 69, "346": [69, 115], "static": [69, 81], "chracter": 69, "6p": 69, "b4c816180ad9": 69, "nhow": 69, "thank": 69, "univers": 69, "IT": [69, 77, 105], "oxford": 69, "007": 69, "xyzvalu": 69, "first_numb": 69, "second_numb": 69, "sum1": 69, "num3": 69, "step3": 69, "num4": 69, "857142857142854": 69, "float_numb": 69, "her": 69, "phone_numb": 69, "13756537093": 69, "finaltext": 69, "travel": 69, "cook": 69, "sing": [69, 76], "mission": 69, "imposs": 69, "85": [69, 98, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "positive_numb": 69, "negative_numb": 69, "111111": [69, 115], "number33": 69, "notation3": 69, "300000e": 69, "vairabl": 69, "plu": 70, "substract": [70, 97], "minu": 70, "adjust": 70, "519": [70, 115], "333333333333333": 70, "8333333333333334": 70, "frac": 70, "behaviour": 70, "lfloor": 70, "rfloor": 70, "nativ": 70, "28418980453852622603883856494709731311218158362293224700445543940796643776911788129508577246309929258069598467896008287596053863082109746801947722280783720032649818198464452375358348619120021135797251857019557032565638659667745421115194468559021541269027438746788486392649581405327516658718317011453858465218779880972140612551504149701082164179367484198570734230003528355826545644223794779911723917115845213739921327820409005460708547942445234906498880588411276755120002108963510955276534630522965966177951626038063994937181228938844252668098515385045718428663547788122173798704717510979319749834083419004355222012043715855123615249682039587844431246269017612728291710718821388840627277407189863509789929339102406655115786899696829902032282666983426897111750208839152830573688512831984602085360572485861376": 70, "bfc5aa62a0ff": 70, "avocado": 70, "syntaxwarn": 70, "7c9145eb11e9": 70, "truth": 70, "111": [70, 104, 105, 115, 116], "1010": 70, "0100": 70, "mid": 70, "1110": 70, "NOT": [70, 79, 122], "0101": 70, "xor": [70, 79], "0010": 70, "0011": 70, "y1": 70, "x2": 70, "y2": 70, "x3": 70, "y3": 70, "flase": 70, "similari": 70, "side": [70, 78, 104], "2x": 70, "6x": 70, "falsi": 70, "cannon": 70, "jargon": 70, "rate": 70, "pai": 70, "weekli": 70, "earn": 70, "1200": 70, "3153600000": 70, "zen": [71, 81], "honk": 71, "mysteri": 71, "140708960741424": 71, "littl": [71, 78, 99], "140708960741200": 71, "140708960741232": 71, "diagram": [71, 107, 111, 114], "bind": [71, 77], "printhello": 71, "moment": 71, "outermost": 71, "outer_funct": 71, "inner_func": 71, "inner_funct": 71, "rebind": 71, "p1": [72, 76, 79, 81], "p2": [72, 76, 79, 81], "python": [72, 73, 99, 100, 107, 108, 111, 114, 121, 122], "record": [72, 112], "dave": 72, "773": [72, 115], "1212": 72, "847": 72, "phone_num": 72, "acm": 72, "covert": 73, "processor": 73, "compli": 73, "analys": [73, 90], "runnabl": 73, "understood": 73, "disadvantag": 73, "overal": 73, "slower": 73, "model": [73, 76, 77, 90, 121, 122], "independ": 73, "scan": 73, "suit": [73, 76, 104], "rel": 73, "port": 73, "upfront": 73, "difficult": 73, "predict": 73, "warn": [73, 100, 112], "intermedi": 73, "complier": 73, "rubi": 73, "pearl": 73, "conduct": 73, "110110": 73, "intel": 73, "amd": 73, "arm": 73, "intermediari": 73, "exploit": 73, "jvm": 73, "fundament": [76, 104], "paradigm": 76, "parrot": [76, 77], "danc": 76, "principl": 76, "blueprint": [76, 77, 81], "plan": 76, "sketch": [76, 77], "classnam": 76, "class_suit": 76, "storag": 76, "reference_vari": 76, "0x0000021e45765b20": 76, "stud": 76, "0x0000021e45765dc0": 76, "regularli": 76, "speci": [76, 77], "blu": 76, "woo": 76, "ben": 76, "add_skil": 76, "aspect": 76, "acquir": [76, 78], "baseclass": [76, 78], "derivedclass": [76, 78], "classon": 76, "func1": 76, "classtwo": 76, "func2": 76, "emili": 76, "carter": 76, "manchest": 76, "market": 76, "pronoun": 76, "whoisthi": [76, 78], "swim": [76, 78], "penguin": [76, 78], "peggi": [76, 78], "__": [76, 77, 79], "layer": 76, "accident": 76, "unauthor": 76, "secur": 76, "__maxpric": 76, "sell": 76, "price": [76, 77, 104, 105, 106, 115], "setmaxpric": 76, "setter": 76, "employe": [76, 77, 78], "__salari": 76, "60000": 76, "printnam": 76, "b977fb738e16": 76, "greek": 76, "poli": 76, "morphism": 76, "colleg": 76, "ground": [76, 115], "daughter": 76, "brother": 76, "home": 76, "shape": [76, 97, 98, 99, 100, 101, 104, 108], "flying_test": 76, "rediu": 76, "calculate_area": 76, "cir": 76, "rect": 76, "254": [76, 115], "od": 76, "sharabl": 76, "measur": 76, "central": 76, "tendenc": 76, "varianc": [76, 98, 101], "percentil": [76, 101, 104], "frequenc": [76, 104], "744": [76, 115], "std": [76, 77, 97, 101, 102, 104], "freq_dist": 76, "sh": 76, "personaccount": 76, "total_incom": 76, "total_expens": 76, "account_info": 76, "add_incom": 76, "add_expens": 76, "account_bal": 76, "core": [77, 97, 102, 104, 108, 111, 112, 113], "procedur": 77, "emphasi": 77, "stress": 77, "hous": 77, "door": 77, "unknowingli": 77, "bool": [77, 78], "list_1": 77, "tuple_1": 77, "set_1": 77, "dict_1": 77, "mynewclass": 77, "0x000001d8aec3ac10": 77, "harri": [77, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114], "0x000001d8aec7e4c0": 77, "0x000001d8aec44eb0": 77, "convention": 77, "complexnumb": 77, "getdata": 77, "c1": [77, 78], "get_data": 77, "attr": [77, 78], "05908a030c74": 77, "parameter": 77, "parametr": 77, "masterstudentclass": 77, "jane": [77, 107], "candi": 77, "lucia": 77, "student_count": 77, "printstudentdata": 77, "studnet": 77, "vijai": 77, "depart": 77, "19116": 77, "std1": 77, "std2": 77, "std3": 77, "chirag": 77, "103": [77, 114, 115, 116], "getattr": [77, 78], "hasattr": 77, "setattr": [77, 78], "delattr": 77, "104": [77, 104, 105, 115, 116], "undefin": 77, "__module__": 77, "__bases__": 77, "possibli": 77, "studentstud": 77, "0x000001d8aec7e1f0": 77, "0x000001d8aec7e5e0": 77, "car": [77, 78, 104, 105], "sunroof": 77, "manufactur": 77, "250fe64180f3": 77, "object_nam": 77, "depat": 77, "4340020aef34": 77, "86635ab2cc7": 77, "b8eab4452d4b": 77, "45d582f31548": 77, "complic": [77, 104], "destruct": 77, "justcount": 77, "__secretcount": 77, "59b7b8cc9b5b": 77, "_classname__attrnam": 77, "wont": 77, "_justcounter__secretcount": 77, "convert_dictionary_to_python_object": 77, "ob": 77, "enabl": [78, 121], "vehicl": [78, 104], "vehicle_info": 78, "car_info": 78, "multideriv": 78, "base1": 78, "base2": 78, "company_info": 78, "company_nam": 78, "employee_info": 78, "atlanta": 78, "19000": 78, "class1": 78, "class2": 78, "mammal": 78, "mammalnam": 78, "warm": 78, "blood": 78, "anim": 78, "canidaefamili": 78, "deleg": 78, "indirect": 78, "nonwingedmamm": 78, "nonmarinemamm": 78, "bat": 78, "stuff": 78, "__d": 78, "84": [78, 104, 115], "object1": 78, "5768efa4a35f": 78, "superclass": 78, "derived1": 78, "derived2": 78, "sportscar": 78, "sports_car_info": 78, "s_car": 78, "grandpar": 78, "bark": 78, "babydog": 78, "weep": 78, "truck": 78, "truck_info": 78, "obj1": 78, "bmw": [78, 116], "obj2": 78, "ford": [78, 116], "sport": 78, "polygon": 78, "no_of_sid": 78, "inputsid": 78, "dispsid": 78, "magnitud": [78, 79], "findarea": 78, "parentattr": 78, "parentmethod": 78, "childmethod": 78, "latter": 78, "temporari": 78, "c_name": 78, "verifi": 78, "classinfo": 78, "redefin": 78, "max_spe": 78, "speed": [78, 104, 115], "km": 78, "mymethod": 78, "tend": 78, "mro": 78, "fashion": 78, "twice": 78, "monoton": 78, "__mro__": 78, "merg": [79, 104], "simul": 79, "coordin": 79, "5f195de51d93": 79, "0x00000218ffc65220": 79, "__add__": 79, "b1": 79, "b2": 79, "250": [79, 115], "v1": [79, 101], "v2": [79, 101], "respons": [79, 121], "sensibl": 79, "__sub__": 79, "__mul__": 79, "__pow__": 79, "__iadd__": 79, "decrement": 79, "__isub__": 79, "__imul__": 79, "__idiv__": 79, "__imod__": 79, "__ipow__": 79, "__truediv__": 79, "__div__": 79, "__floordiv__": 79, "__mod__": 79, "__lshift__": 79, "__rshift__": 79, "AND": 79, "__and__": 79, "__or__": 79, "__xor__": 79, "__invert__": 79, "__lt__": 79, "self_mag": 79, "other_mag": 79, "p3": [79, 81], "__le__": 79, "__eq__": 79, "__ne__": 79, "__gt__": 79, "__ge__": 79, "across": [81, 104], "recur": 81, "make_sound": 81, "meow": 81, "cat1": 81, "amelia": 81, "cat2": 81, "couldn": 81, "816653826391969": 81, "complain": 81, "mismatch": 81, "peculiar": [81, 104], "meth": 81, "mere": 81, "discourag": 81, "frown": 81, "degrad": 81, "staticmethod": 81, "stat_meth": 81, "borrow": 81, "modula": 81, "lie": 81, "propos": 81, "redund": [81, 104, 108], "promis": 81, "creator": 81, "himself": 81, "conclus": 81, "drawn": 81, "naiv": 81, "inspect": [81, 111], "reveal": [81, 122], "signatur": 81, "newli": [81, 114], "hexpoint": 81, "max_inst": 81, "inst_creat": 81, "p4": 81, "p5": 81, "p6": 81, "p7": 81, "fab2e1af2c65": 81, "e15e5601926f": 81, "markup": [83, 87], "span": [83, 87], "box": [83, 87], "pat": 90, "essesnti": 90, "mathemet": 90, "tradit": 90, "train": 90, "neural": [90, 101, 121, 122], "financ": 97, "multidimension": [97, 99, 104], "review": 97, "tensorflow": [97, 121], "vast": [97, 104, 107], "besid": 97, "conveni": 97, "reshap": [97, 100, 102], "grid": [97, 98], "nonneg": [97, 98], "dimens": [97, 98, 99, 100, 104], "rank": [97, 98, 99, 100], "sync": 97, "1d": [97, 98], "2d": [97, 98, 104], "arang": [97, 99, 100, 102], "evenli": [97, 101], "btw": 97, "interv": [97, 101], "fill": [97, 98, 101, 122], "ndim": [97, 98], "dtype": [97, 98, 100, 101, 104, 105, 106, 112, 113, 115, 116], "astyp": [97, 101, 102, 104], "vstack": 97, "ident": [97, 98, 100, 104, 114], "hstack": 97, "ndarrai": [97, 98, 101, 104, 105, 106], "linalg": [97, 100, 102], "inv": 97, "trick": [97, 99], "wise": [97, 104, 112, 115], "polynomi": 97, "coeffici": 97, "array_equ": [97, 102], "corrcoef": 97, "correl": [97, 104], "cumsum": [97, 102], "cumul": 97, "numpy_array_from_list": 98, "my_matrix": 98, "items": [98, 101, 102], "nbyte": 98, "biggest": 98, "cast": 98, "fallback": 98, "int32": [98, 100, 101], "float64": [98, 100, 104, 105, 106, 112], "int64": [98, 101, 104, 105, 115, 116], "22672978": 98, "55283762": 98, "10276143": 98, "2559205": 98, "60786967": 98, "83770503": 98, "45359369": 98, "27764243": 98, "38209653": 98, "44225798": 98, "63158859": 98, "81893678": 98, "79823164": 98, "69791535": 98, "69343173": 98, "04763428": 98, "1097501": 98, "30920635": 98, "random_sampl": 98, "55360672": 98, "30668723": 98, "93102691": 98, "05082974": 98, "23180804": 98, "95966987": 98, "68602648": 98, "89632087": 98, "33142653": 98, "54275813": 98, "00616708": 98, "85505447": 98, "48048431": 98, "98749888": 98, "43563027": 98, "35266299": 98, "65628077": 98, "40015831": 98, "14770535": 98, "61784629": 98, "27672348": 98, "54777888": 98, "51026454": 98, "convini": [98, 101], "rana": 98, "tuppl": 98, "full_lik": 98, "r1": 98, "ey": [98, 102], "2x2": 98, "91940167": 98, "08143941": 98, "68744134": 98, "87236687": 98, "53909609": 98, "12336799": 98, "93143051": 98, "39878883": 98, "slice_a": 99, "a_copi": 99, "mat": 99, "col": [99, 104, 108, 111, 113, 115], "notaion": 99, "insta": 99, "corner": 99, "fanci": [99, 104], "startindex": 99, "endindex": 99, "stepsiz": 99, "75075a70c90": 99, "inhomogen": 99, "pull": 99, "subarrai": 99, "row_r1": 99, "row_r2": 99, "distinct": 99, "col_r1": 99, "col_r2": 99, "contrast": 99, "mutat": 99, "acc": 99, "pick": 99, "bool_a": 99, "bool_idx": 99, "slot": 99, "breviti": 99, "elementwis": [100, 101], "1b9ae9b69587": 100, "runtimewarn": 100, "true_divid": 100, "6f47904706aa": 100, "41421356": 100, "73205081": 100, "23606798": 100, "71828183": 100, "3890561": 100, "08553692": 100, "59815003": 100, "148": [100, 115], "4131591": 100, "84147098": 100, "90929743": 100, "14112001": 100, "7568025": 100, "95892427": 100, "54030231": 100, "41614684": 100, "9899925": 100, "65364362": 100, "28366219": 100, "42857143": 100, "219": [100, 115], "matmul": 100, "matruc": 100, "det": 100, "999999999999999": 100, "trace": 100, "singular": 100, "empty_lik": 100, "slow": [100, 108], "vv": 100, "tile": 100, "prepend": 100, "strive": 100, "nescessarili": 100, "fortan": 101, "occas": 101, "newshap": 101, "cool": 101, "20040757": 101, "96248829": 101, "29534113": 101, "14204329": 101, "00786338": 101, "68572271": 101, "22357762": 101, "88618684": 101, "91174698": 101, "87380356": 101, "59068226": 101, "42612988": 101, "03145352": 101, "77237368": 101, "73524094": 101, "49521424": 101, "quickli": 101, "annoi": 101, "convnet": 101, "appen": 101, "horitzont": 101, "h1": 101, "h2": 101, "loc": [101, 104, 115], "scale": 101, "normal_arrai": 101, "73370838": 101, "02319487": 101, "03247675": 101, "63238643": 101, "20491465": 101, "23379671": 101, "65235094": 101, "03461004": 101, "81788758": 101, "40603744": 101, "endpoint": 101, "44444444": 101, "88888889": 101, "77777778": 101, "22222222": 101, "66666667": 101, "11111111": 101, "55555556": 101, "2154": 101, "43469003": 101, "4641": 101, "58883361": 101, "finali": 101, "complex128": 101, "equip": 101, "57057605": 101, "76249894": 101, "09935016": 101, "38336447": 101, "96652011": 101, "29402596": 101, "79025614": 101, "00232788": 101, "49574452": 101, "60059908": 101, "sd": 101, "099350157876355": 101, "002327879593869": 101, "196526332130161": 101, "338695217273813": 101, "5550161930871431": 101, "stat": 101, "filedata": 101, "genfromtxt": [101, 102], "196": [101, 115], "766": [101, 115], "88": [101, 104, 105, 112, 115, 116], "dataset": [101, 104, 107, 108, 109, 110, 111, 112, 114, 115], "touch": [101, 122], "goal": [102, 122], "show_config": 102, "nonzero": 102, "diag": 102, "unravel_index": 102, "intersect1d": 102, "seterr": 102, "errstat": 102, "emath": 102, "datetime64": 102, "timedelta64": 102, "fromit": 102, "allclos": 102, "writeabl": 102, "arctan2": 102, "argmax": 102, "meshgrid": 102, "iinfo": 102, "finfo": 102, "ep": 102, "set_printopt": 102, "argmin": 102, "atleast_2d": 102, "ndenumer": 102, "ndindex": 102, "keepdim": 102, "argsort": 102, "flat": 102, "roll": [102, 113], "stride_trick": 102, "logical_not": 102, "as_strid": 102, "tensordot": 102, "reduceat": 102, "argpartit": 102, "fromarrai": 102, "unpackbit": 102, "ascontiguousarrai": 102, "interp": 102, "logical_and": 102, "excercis": 103, "cheat": [103, 117], "sheet": [103, 104, 117], "bsd": [104, 115, 116], "relationa": 104, "aim": [104, 108], "necessarili": 104, "lesson": 104, "automobil": 104, "showroom": 104, "strategi": 104, "sedan": [104, 105, 116], "mileag": [104, 105, 115], "potenti": 104, "pd": [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116], "from_dict": [104, 116], "df": [104, 108, 111, 112, 113, 114, 115, 116], "student_dict": [104, 105, 107, 108, 109, 110, 111, 113, 114], "joe": [104, 105, 107, 108, 109, 110, 111, 112, 113, 114], "nat": [104, 105, 107, 108, 109, 110, 111, 112, 113, 114], "student_df": [104, 105, 107, 108, 109, 110, 111, 113, 114], "94": [104, 105, 115, 116], "496714": 104, "138264": 104, "647689": 104, "weird": 104, "machineri": 104, "accessor": 104, "iloc": [104, 115], "row_labl": 104, "column_label": [104, 112], "row_posit": 104, "column_posit": 104, "hierarch": [104, 105, 107, 114], "lookup": 104, "ndframe": 104, "_add_numeric_oper": 104, "dataseri": 104, "isn": [104, 111], "conflict": 104, "extrem": 104, "convient": 104, "unclear": 104, "queri": 104, "labl": 104, "nowher": 104, "multiindex": [104, 107, 108, 111, 114], "datetimeindex": 104, "float64index": 104, "categoricalindex": 104, "column_nam": 104, "reset_index": [104, 105, 115], "read_csv": [104, 105, 112, 115, 116], "file_nam": 104, "stockprice_data": 104, "010000": 104, "200000": 104, "130": [104, 115], "083333": [104, 115], "246154": 104, "489796": 104, "040000": 104, "019608": 104, "442308": [104, 115], "160": [104, 115, 116], "066667": 104, "318750": 104, "95": [104, 115, 116], "128440": 104, "automobile_data": [104, 105, 116], "wheel": [104, 105, 115, 116], "alfa": [104, 105, 116], "romero": [104, 105, 116], "168": [104, 105, 115, 116], "dohc": [104, 105, 116], "hatchback": [104, 105, 116], "171": [104, 105, 115, 116], "ohcv": [104, 105, 116], "audi": [104, 105, 116], "ohc": [104, 105, 116], "volkswagen": [104, 105, 116], "82": [104, 105, 115, 116], "87": [104, 105, 107, 114, 115, 116], "volvo": [104, 105, 116], "188": [104, 105, 115, 116], "wagon": [104, 105, 116], "cylind": [104, 105, 116], "horsepow": [104, 105, 115, 116], "13495": [104, 105, 116], "16500": [104, 105, 116], "154": [104, 105, 115, 116], "13950": [104, 105, 116], "115": [104, 105, 115, 116], "17450": [104, 105, 116], "7975": [104, 105, 116], "7995": [104, 105, 116], "9995": [104, 105, 116], "114": [104, 105, 115, 116], "12940": [104, 105, 116], "13415": [104, 105, 116], "set_opt": 104, "interchang": 104, "max_row": 104, "min_row": 104, "rangeindex": [104, 114], "25th": 104, "50th": 104, "75th": 104, "00000": 104, "500000": [104, 115, 116], "45000": 104, "707107": 104, "16188": 104, "80000": 104, "250000": [104, 115], "62500": 104, "750000": [104, 115, 116], "27500": 104, "majorli": [104, 105], "analyst": [104, 112], "head": [104, 115, 116], "tail": [104, 115, 116], "iat": 104, "col_posit": 104, "new_col_nam": 104, "default_valu": 104, "na": [104, 108, 109, 114], "col1": [104, 105, 106, 108, 109, 112], "col2": [104, 105, 106, 108, 109, 112], "new_valu": 104, "inplac": [104, 108, 109, 110, 111, 113, 114, 115], "massiv": [104, 107], "relev": 104, "filter_cond": 104, "analyt": 104, "gather": [104, 105, 109], "df1": 104, "df2": 104, "marks_dict": 104, "marks_df": 104, "joined_df": 104, "col_label": [104, 106, 108], "iterrow": [104, 115], "sort_valu": [104, 115, 116], "ascend": [104, 115, 116], "to_dict": 104, "date_rang": 104, "1900": 104, "value_count": [104, 116], "dropna": [104, 114], "index_on": 104, "isnul": 104, "arrrai": 104, "notnul": 104, "thresh": [104, 110], "fillna": 104, "old_nam": 104, "new_": 104, "set_index": [104, 112], "column_on": 104, "pivot_t": 104, "col3": 104, "aggfunc": 104, "pivot": 104, "agg": [104, 116], "nf": 104, "corr": 104, "read_tabl": 104, "tsv": 104, "read_excel": [104, 115], "read_sql": 104, "connection_object": 104, "read_json": 104, "json_str": 104, "url": 104, "read_html": 104, "read_clipboard": 104, "clipboard": 104, "to_csv": [104, 115, 116], "to_excel": [104, 115], "to_sql": 104, "table_nam": 104, "to_json": 104, "stai": [105, 108], "compet": 105, "index1": 105, "index2": 105, "stud1": 105, "stud2": 105, "stud3": 105, "data_typ": 105, "csv": [105, 112, 113, 114, 115], "smith": 105, "sake": 105, "hobbi": 105, "academ": 105, "smim": 105, "widespread": 105, "industri": [105, 106], "level_0": 105, "sam": [105, 107, 108, 109, 110, 111, 114], "datafam": 106, "fruits_list": 106, "fruits_df": 106, "meaning": 106, "row_index1": 106, "row_index2": 106, "fruit1": 106, "fruit2": 106, "fruit3": 106, "fruit4": 106, "price_list": 106, "price_df": 106, "scatter": 106, "500": [106, 115], "resolv": 106, "fruits_dict": 106, "jack": 107, "jose": 107, "jill": 107, "rose": 107, "toprow": 107, "from_tupl": [107, 114], "bottomrow": 107, "col_nam": 108, "tune": [108, 122], "api": [108, 111], "drope": 108, "supress": 108, "245426098662": 108, "4306": 108, "4307": 108, "4308": 108, "4309": 108, "4310": 108, "4151": 108, "4152": 108, "4153": 108, "_drop_axi": 108, "4154": 108, "4155": 108, "4186": 108, "new_axi": 108, "4187": 108, "4188": 108, "4189": 108, "reindex": 108, "axis_nam": 108, "4190": 108, "5589": 108, "mask": 108, "5590": 108, "5591": 108, "5592": 108, "5593": 108, "po": 108, "zurich": 108, "nafter": [108, 109, 110, 113, 114], "level_index": 108, "from_arrai": [108, 111], "2darrai": [108, 111], "68": [108, 111, 115, 116], "ignore_index": [109, 110], "no_of_nonna_valu": 110, "row1": 110, "row2": 110, "drop_dupl": [110, 114], "add_prefix": 111, "add_suffix": 111, "rename_axi": 111, "sr": 111, "mapper": 111, "column_current_nam": 111, "new_nam": 111, "ncolumn": 111, "stud_nam": 111, "stud_ag": 111, "stud_mark": 111, "unknowncol": 111, "782dbd1412fe": 111, "_decor": 111, "310": [111, 115], "311": [111, 115], "312": [111, 115], "313": [111, 115], "positional_or_keyword": 111, "4439": 111, "4440": 111, "4441": 111, "4442": 111, "4443": 111, "1053": 111, "1054": 111, "1055": 111, "missing_label": 111, "1056": 111, "1057": 111, "new_index": 111, "_transform_index": 111, "_name_": 111, "_age_": 111, "_marks_": 111, "new_ag": 111, "new_mark": 111, "old_col": 111, "new_col": 111, "sname": 111, "sp": [112, 115], "likewis": [112, 114], "row_index": 112, "student_data": 112, "studentdf": 112, "studentdict": 112, "nresult": 112, "nlist": 112, "1549": 112, "futurewarn": [112, 116], "deprec": [112, 116], "silenc": 112, "ordereddict": 112, "verify_integr": 113, "defer": 113, "col_label1": 113, "col_label2": 113, "s3": [113, 114], "feasibl": 113, "sequenti": 113, "f6b2789c4214": 113, "4777": 113, "is_uniqu": 113, "4778": 113, "4779": 113, "4780": 113, "4781": 113, "col_level": 114, "col_fil": 114, "s4": 114, "ndatafram": 114, "new_head": 114, "pokemon_data": 115, "auto": [115, 116], "df_xlsx": 115, "xlsx": 115, "mess": 115, "hp": 115, "795": 115, "796": 115, "797": 115, "798": 115, "799": 115, "800": 115, "grass": 115, "attack": 115, "defens": 115, "atk": 115, "legendari": 115, "acco": 115, "510": 115, "460": 115, "abomasnow": 115, "ic": 115, "92": 115, "511": 115, "abomasnowmega": 115, "132": 115, "abra": 115, "psychic": 115, "392": 115, "359": 115, "absol": 115, "dark": 115, "393": 115, "absolmega": 115, "632": 115, "571": 115, "zoroark": 115, "631": 115, "zorua": 115, "zubat": 115, "poison": 115, "695": 115, "634": 115, "zweilou": 115, "dragon": 115, "794": 115, "718": 115, "zygarde50": 115, "108": 115, "121": 115, "type1": 115, "decend": 115, "520": 115, "469": 115, "yanmega": 115, "bug": 115, "116": 115, "698": 115, "637": 115, "volcarona": 115, "fire": 115, "135": 115, "231": 115, "214": 115, "heracross": 115, "fight": 115, "232": 115, "heracrossmega": 115, "185": 115, "678": 115, "617": 115, "accelgor": 115, "145": 115, "106": 115, "krabbi": 115, "water": 115, "horsea": 115, "129": 115, "staryu": 115, "139": 115, "magikarp": 115, "381": 115, "feeba": 115, "bulbasaur": 115, "ivysaur": 115, "venusaur": 115, "venusaurmega": 115, "122": 115, "charmand": 115, "318": 115, "405": 115, "525": 115, "309": 115, "719": 115, "dianci": 115, "rock": 115, "fairi": 115, "dianciemega": 115, "110": [115, 116], "700": 115, "hoopahoopa": 115, "confin": 115, "ghost": 115, "unbound": 115, "170": 115, "680": 115, "721": 115, "volcanion": 115, "new_df": 115, "vileplum": 115, "490": 115, "71": [115, 116], "victreebel": 115, "652": 115, "591": 115, "amoonguss": 115, "464": 115, "mega": 115, "charizardmega": 115, "charizard": 115, "159": 115, "blastoisemega": 115, "blastois": 115, "630": 115, "beedrillmega": 115, "beedril": 115, "495": 115, "pidgeotmega": 115, "pidgeot": 115, "alakazammega": 115, "alakazam": 115, "590": 115, "slowbromega": 115, "slowbro": 115, "gengarmega": 115, "gengar": 115, "kangaskhanmega": 115, "kangaskhan": 115, "137": 115, "127": 115, "pinsirmega": 115, "pinsir": 115, "155": 115, "141": [115, 116], "gyaradosmega": 115, "gyarado": 115, "640": 115, "142": 115, "aerodactylmega": 115, "aerodactyl": 115, "615": 115, "163": 115, "mewtwomega": 115, "mewtwo": 115, "780": 115, "190": 115, "164": 115, "194": 115, "140": 115, "meganium": 115, "181": 115, "ampharosmega": 115, "ampharo": 115, "electr": 115, "165": 115, "224": 115, "208": [115, 116], "steelixmega": 115, "steelix": 115, "steel": 115, "230": 115, "229": 115, "212": 115, "scizormega": 115, "scizor": 115, "248": 115, "houndoommega": 115, "houndoom": 115, "268": 115, "tyranitarmega": 115, "tyranitar": 115, "275": 115, "sceptilemega": 115, "sceptil": 115, "279": 115, "blazikenmega": 115, "blaziken": 115, "283": 115, "260": 115, "swampertmega": 115, "swampert": 115, "635": 115, "306": 115, "282": 115, "gardevoirmega": 115, "gardevoir": 115, "618": 115, "327": 115, "302": 115, "sableyemega": 115, "sabley": 115, "480": 115, "329": 115, "303": 115, "mawilemega": 115, "mawil": 115, "aggronmega": 115, "aggron": 115, "336": 115, "308": 115, "medichammega": 115, "medicham": 115, "339": 115, "manectricmega": 115, "manectr": 115, "575": 115, "319": 115, "sharpedomega": 115, "sharpedo": 115, "560": 115, "354": 115, "323": 115, "cameruptmega": 115, "camerupt": 115, "334": 115, "altariamega": 115, "altaria": 115, "387": 115, "banettemega": 115, "banett": 115, "565": 115, "397": 115, "glaliemega": 115, "glali": 115, "580": 115, "409": 115, "373": 115, "salamencemega": 115, "salam": 115, "413": 115, "376": 115, "metagrossmega": 115, "metagross": 115, "418": 115, "380": 115, "latiasmega": 115, "latia": 115, "420": 115, "latiosmega": 115, "latio": 115, "426": 115, "384": 115, "rayquazamega": 115, "rayquaza": 115, "476": 115, "428": 115, "lopunnymega": 115, "lopunni": 115, "136": 115, "494": 115, "445": 115, "garchompmega": 115, "garchomp": 115, "498": 115, "448": 115, "lucariomega": 115, "lucario": 115, "112": [115, 116], "594": 115, "527": 115, "475": 115, "gallademega": 115, "gallad": 115, "531": 115, "audinomega": 115, "audino": 115, "545": 115, "126": 115, "charmeleon": 115, "751": 115, "735": 115, "667": 115, "litleo": 115, "369": 115, "736": 115, "668": 115, "pyroar": 115, "507": 115, "740": 115, "672": 115, "skiddo": 115, "741": 115, "673": 115, "gogoat": 115, "starat": 115, "wirh": 115, "caterpi": 115, "195": 115, "pidgei": 115, "pidgeotto": 115, "479": 115, "pikachu": 115, "320": 115, "vulpix": 115, "299": 115, "weepinbel": 115, "390": 115, "rapidash": 115, "167": 115, "spinarak": 115, "186": 115, "pichu": 115, "205": 115, "189": 115, "togepi": 115, "245": 115, "187": [115, 116], "hoppip": 115, "204": 115, "pineco": 115, "290": 115, "239": 115, "221": 115, "piloswin": 115, "450": 115, "266": 115, "247": 115, "pupitar": 115, "410": 115, "345": 115, "316": 115, "gulpin": 115, "357": 115, "326": 115, "grumpig": 115, "470": 115, "358": 115, "spinda": 115, "360": 115, "328": 115, "trapinch": 115, "tropiu": 115, "438": 115, "piplup": 115, "463": 115, "416": 115, "vespiquen": 115, "474": 115, "488": 115, "440": 115, "happini": 115, "220": 115, "442": 115, "spiritomb": 115, "485": 115, "501": 115, "451": 115, "skorupi": 115, "502": 115, "452": 115, "drapion": 115, "557": 115, "tepig": 115, "558": 115, "499": 115, "pignit": 115, "578": 115, "pidov": 115, "264": 115, "596": 115, "536": 115, "palpitoad": 115, "716": 115, "648": 115, "meloettapirouett": 115, "650": 115, "chespin": 115, "flamer": 115, "chaang": 115, "pokemon": 115, "legandari": 115, "checkpoint": 115, "avg": 115, "492754": 115, "378": 115, "927536": 115, "884058": 115, "971014": 115, "724638": 115, "869565": 115, "797101": 115, "681159": 115, "217391": 115, "461": 115, "354839": 115, "741935": 115, "806452": 115, "387097": 115, "225806": 115, "74": 115, "645161": 115, "516129": 115, "161290": 115, "032258": 115, "064516": 115, "375000": 115, "550": 115, "531250": 115, "312500": 115, "125000": 115, "843750": 115, "031250": 115, "875000": 115, "363": 115, "443": 115, "409091": 115, "795455": 115, "090909": 115, "295455": 115, "022727": 115, "704545": 115, "272727": 115, "449": 115, "529412": 115, "176471": 115, "117647": 115, "705882": 115, "588235": 115, "058824": 115, "851852": 115, "444444": 115, "777778": 115, "925926": 115, "703704": 115, "074074": 115, "370370": 115, "403846": 115, "458": 115, "076923": 115, "903846": 115, "769231": 115, "980769": 115, "211538": 115, "096154": 115, "677": 115, "486": 115, "439": 115, "562500": 115, "437500": 115, "781250": 115, "187500": 115, "343750": 115, "468750": 115, "062500": 115, "344": 115, "871429": 115, "421": 115, "142857": 115, "271429": 115, "214286": 115, "800000": 115, "428571": 115, "928571": 115, "357143": 115, "042857": 115, "281250": 115, "437": 115, "906250": 115, "156250": 115, "423": 115, "541667": 115, "433": 115, "458333": 115, "416667": 115, "291667": 115, "173469": 115, "401": 115, "683673": 115, "275510": 115, "469388": 115, "846939": 115, "816327": 115, "724490": 115, "551020": 115, "051020": 115, "020408": 115, "785714": 115, "678571": 115, "821429": 115, "392857": 115, "571429": 115, "535714": 115, "807018": 115, "947368": 115, "631579": 115, "456140": 115, "684211": 115, "403509": 115, "280702": 115, "491228": 115, "385965": 115, "245614": 115, "727273": 115, "453": 115, "363636": 115, "863636": 115, "340909": 115, "477273": 115, "909091": 115, "454545": 115, "487": 115, "222222": 115, "518519": 115, "629630": 115, "259259": 115, "148148": 115, "089286": 115, "430": 115, "455357": 115, "151786": 115, "946429": 115, "812500": 115, "517857": 115, "964286": 115, "857143": 115, "035714": 115, "chunksiz": 115, "534": 115, "squirtl": 115, "wartortl": 115, "530": 115, "metapod": 115, "butterfre": 115, "395": 115, "weedl": 115, "kakuna": 115, "rattata": 115, "ratic": 115, "spearow": 115, "262": 115, "fearow": 115, "ekan": 115, "288": 115, "arbok": 115, "raichu": 115, "sandshrew": 115, "sandslash": 115, "nidoran": 115, "nidorina": 115, "nidoqueen": 115, "505": 115, "nidorino": 115, "nidok": 115, "clefairi": 115, "clefabl": 115, "483": 115, "ninetal": 115, "jigglypuff": 115, "270": 115, "wigglytuff": 115, "435": 115, "golbat": 115, "455": 115, "oddish": 115, "gloom": 115, "para": 115, "285": 115, "parasect": 115, "venonat": 115, "305": 115, "venomoth": 115, "diglett": 115, "265": 115, "dugtrio": 115, "meowth": 115, "persian": 115, "psyduck": 115, "golduck": 115, "mankei": 115, "primeap": 115, "growlith": 115, "arcanin": 115, "poliwag": 115, "poliwhirl": 115, "385": 115, "poliwrath": 115, "kadabra": 115, "400": 115, "machop": 115, "machok": 115, "machamp": 115, "bellsprout": 115, "tentacool": 115, "335": 115, "tentacruel": 115, "515": 115, "geodud": 115, "gravel": 115, "golem": 115, "ponyta": 115, "slowpok": 115, "315": 115, "magnemit": 115, "325": 115, "magneton": 115, "465": 115, "farfetch": 115, "352": 115, "doduo": 115, "dodrio": 115, "seel": 115, "dewgong": 115, "grimer": 115, "muk": 115, "shellder": 115, "cloyster": 115, "gastli": 115, "haunter": 115, "onix": 115, "drowze": 115, "hypno": 115, "kingler": 115, "voltorb": 115, "electrod": 115, "exeggcut": 115, "exeggutor": 115, "cubon": 115, "113": 115, "marowak": 115, "425": 115, "hitmonle": 115, "hitmonchan": 115, "lickitung": 115, "117": 115, "kof": 115, "118": 115, "weez": 115, "119": 115, "rhyhorn": 115, "rhydon": 115, "chansei": 115, "tangela": 115, "295": 115, "seadra": 115, "goldeen": 115, "seak": 115, "starmi": 115, "131": 115, "mr": 115, "mime": 115, "scyther": 115, "133": 115, "jynx": 115, "134": 115, "electabuzz": 115, "magmar": 115, "138": 115, "tauro": 115, "540": 115, "lapra": 115, "535": 115, "143": 115, "ditto": 115, "eeve": 115, "vaporeon": 115, "jolteon": 115, "147": 115, "flareon": 115, "porygon": 115, "149": 115, "omanyt": 115, "355": 115, "omastar": 115, "151": 115, "kabuto": 115, "152": 115, "kabutop": 115, "snorlax": 115, "articuno": 115, "157": 115, "zapdo": 115, "158": [115, 116], "moltr": 115, "dratini": 115, "dragonair": 115, "161": 115, "dragonit": 115, "mew": 115, "166": 115, "chikorita": 115, "bayleef": 115, "169": [115, 116], "cyndaquil": 115, "quilava": 115, "typhlos": 115, "totodil": 115, "173": 115, "croconaw": 115, "174": 115, "feraligatr": 115, "sentret": 115, "215": 115, "furret": 115, "415": 115, "177": 115, "hoothoot": 115, "178": 115, "noctowl": 115, "179": 115, "ledyba": 115, "ledian": 115, "182": [115, 116], "ariado": 115, "crobat": 115, "184": [115, 116], "chinchou": 115, "lanturn": 115, "cleffa": 115, "218": 115, "igglybuff": 115, "210": 115, "toget": 115, "191": 115, "natu": 115, "192": 115, "xatu": 115, "193": [115, 116], "mareep": 115, "280": 115, "flaaffi": 115, "197": [115, 116], "bellossom": 115, "198": 115, "maril": 115, "199": [115, 116], "azumaril": 115, "sudowoodo": 115, "polito": 115, "203": 115, "skiploom": 115, "jumpluff": 115, "aipom": 115, "206": 115, "sunkern": 115, "207": [115, 116], "sunflora": 115, "yanma": 115, "209": 115, "wooper": 115, "quagsir": 115, "211": 115, "espeon": 115, "umbreon": 115, "213": 115, "murkrow": 115, "slowk": 115, "misdreavu": 115, "unown": 115, "217": 115, "wobbuffet": 115, "girafarig": 115, "forretress": 115, "dunsparc": 115, "222": 115, "gligar": 115, "223": 115, "225": 115, "snubbul": 115, "226": 115, "granbul": 115, "227": 115, "qwilfish": 115, "228": 115, "shuckl": 115, "sneasel": 115, "234": 115, "teddiursa": 115, "235": 115, "ursar": 115, "236": 115, "slugma": 115, "237": 115, "magcargo": 115, "238": 115, "swinub": 115, "240": 115, "corsola": 115, "241": 115, "remoraid": 115, "242": 115, "octilleri": 115, "delibird": 115, "mantin": 115, "skarmori": 115, "246": 115, "houndour": 115, "249": 115, "kingdra": 115, "phanpi": 115, "donphan": 115, "252": 115, "porygon2": 115, "stantler": 115, "smeargl": 115, "tyrogu": 115, "hitmontop": 115, "smoochum": 115, "258": 115, "elekid": 115, "259": 115, "magbi": 115, "miltank": 115, "261": 115, "blissei": 115, "raikou": 115, "263": 115, "entei": 115, "suicun": 115, "larvitar": 115, "267": 115, "269": 115, "lugia": 115, "oh": 115, "271": 115, "celebi": 115, "272": 115, "treecko": 115, "grovyl": 115, "274": 115, "276": 115, "torchic": 115, "277": 115, "combusken": 115, "278": 115, "mudkip": 115, "281": 115, "marshtomp": 115, "284": 115, "poochyena": 115, "mightyena": 115, "286": 115, "zigzagoon": 115, "287": 115, "linoon": 115, "wurmpl": 115, "289": 115, "silcoon": 115, "beautifli": 115, "291": 115, "cascoon": 115, "292": 115, "dustox": 115, "293": 115, "lotad": 115, "294": 115, "lombr": 115, "ludicolo": 115, "296": 115, "seedot": 115, "297": 115, "nuzleaf": 115, "298": 115, "shiftri": 115, "taillow": 115, "swellow": 115, "301": 115, "wingul": 115, "pelipp": 115, "ralt": 115, "304": 115, "kirlia": 115, "518": 115, "307": 115, "surskit": 115, "masquerain": 115, "414": 115, "shroomish": 115, "breloom": 115, "slakoth": 115, "vigoroth": 115, "slake": 115, "670": 115, "nincada": 115, "ninjask": 115, "shedinja": 115, "317": 115, "whismur": 115, "loudr": 115, "exploud": 115, "makuhita": 115, "321": 115, "hariyama": 115, "322": 115, "azuril": 115, "nosepass": 115, "324": 115, "skitti": 115, "delcatti": 115, "aron": 115, "331": 115, "lairon": 115, "332": 115, "meditit": 115, "337": 115, "electrik": 115, "338": 115, "plusl": 115, "341": 115, "minun": 115, "342": 115, "volbeat": 115, "illumis": 115, "roselia": 115, "swalot": 115, "467": 115, "carvanha": 115, "wailmer": 115, "wailord": 115, "numel": 115, "353": 115, "torkoal": 115, "spoink": 115, "vibrava": 115, "flygon": 115, "cacnea": 115, "cacturn": 115, "364": 115, "swablu": 115, "367": 115, "zangoos": 115, "368": 115, "sevip": 115, "lunaton": 115, "370": 115, "solrock": 115, "371": 115, "barboach": 115, "372": 115, "whiscash": 115, "468": 115, "corphish": 115, "374": 115, "crawdaunt": 115, "baltoi": 115, "claydol": 115, "lileep": 115, "cradili": 115, "379": 115, "anorith": 115, "armaldo": 115, "382": 115, "milot": 115, "383": 115, "castform": 115, "kecleon": 115, "shuppet": 115, "386": 115, "388": 115, "duskul": 115, "389": 115, "dusclop": 115, "391": 115, "chimecho": 115, "394": 115, "wynaut": 115, "snorunt": 115, "396": 115, "398": 115, "spheal": 115, "sealeo": 115, "walrein": 115, "clamperl": 115, "402": 115, "huntail": 115, "403": 115, "gorebyss": 115, "404": 115, "relicanth": 115, "luvdisc": 115, "406": 115, "bagon": 115, "407": 115, "shelgon": 115, "408": 115, "beldum": 115, "411": 115, "metang": 115, "412": 115, "regirock": 115, "regic": 115, "registeel": 115, "417": 115, "419": 115, "kyogr": 115, "422": 115, "kyogreprim": 115, "770": 115, "groudon": 115, "424": 115, "groudonprim": 115, "427": 115, "jirachi": 115, "deoxysnorm": 115, "429": 115, "deoxysattack": 115, "deoxysdefens": 115, "431": 115, "deoxysspe": 115, "432": 115, "turtwig": 115, "grotl": 115, "434": 115, "torterra": 115, "chimchar": 115, "436": 115, "monferno": 115, "infernap": 115, "prinplup": 115, "empoleon": 115, "441": 115, "starli": 115, "staravia": 115, "staraptor": 115, "444": 115, "bidoof": 115, "bibarel": 115, "446": 115, "kricketot": 115, "447": 115, "kricketun": 115, "shinx": 115, "luxio": 115, "luxrai": 115, "523": 115, "budew": 115, "roserad": 115, "cranido": 115, "454": 115, "rampardo": 115, "shieldon": 115, "bastiodon": 115, "457": 115, "burmi": 115, "wormadampl": 115, "cloak": 115, "459": 115, "wormadamsandi": 115, "wormadamtrash": 115, "mothim": 115, "462": 115, "combe": 115, "pachirisu": 115, "buizel": 115, "466": 115, "floatzel": 115, "cherubi": 115, "cherrim": 115, "shello": 115, "gastrodon": 115, "471": 115, "ambipom": 115, "482": 115, "472": 115, "drifloon": 115, "473": 115, "drifblim": 115, "buneari": 115, "477": 115, "mismagiu": 115, "478": 115, "honchkrow": 115, "glameow": 115, "purugli": 115, "481": 115, "chingl": 115, "stunki": 115, "skuntank": 115, "484": 115, "bronzor": 115, "bronzong": 115, "bonsli": 115, "jr": 115, "489": 115, "chatot": 115, "491": 115, "gibl": 115, "492": 115, "gabit": 115, "493": 115, "munchlax": 115, "496": 115, "riolu": 115, "497": 115, "hippopota": 115, "hippowdon": 115, "503": 115, "croagunk": 115, "504": 115, "toxicroak": 115, "carnivin": 115, "506": 115, "finneon": 115, "lumineon": 115, "508": 115, "mantyk": 115, "509": 115, "snover": 115, "weavil": 115, "513": 115, "magnezon": 115, "514": 115, "lickilicki": 115, "rhyperior": 115, "516": 115, "tangrowth": 115, "517": 115, "electivir": 115, "magmortar": 115, "togekiss": 115, "521": 115, "leafeon": 115, "522": 115, "glaceon": 115, "gliscor": 115, "524": 115, "mamoswin": 115, "526": 115, "528": 115, "probopass": 115, "529": 115, "dusknoir": 115, "froslass": 115, "rotom": 115, "532": 115, "rotomheat": 115, "533": 115, "rotomwash": 115, "rotomfrost": 115, "rotomfan": 115, "rotommow": 115, "537": 115, "uxi": 115, "538": 115, "mesprit": 115, "539": 115, "azelf": 115, "dialga": 115, "541": 115, "palkia": 115, "542": 115, "heatran": 115, "543": 115, "regigiga": 115, "544": 115, "giratinaalt": 115, "giratinaorigin": 115, "546": 115, "cresselia": 115, "547": 115, "phion": 115, "548": 115, "manaphi": 115, "549": 115, "darkrai": 115, "shayminland": 115, "551": 115, "shayminski": 115, "552": 115, "arceu": 115, "553": 115, "victini": 115, "554": 115, "snivi": 115, "servin": 115, "556": 115, "serperior": 115, "559": 115, "emboar": 115, "oshawott": 115, "561": 115, "dewott": 115, "562": 115, "samurott": 115, "563": 115, "patrat": 115, "564": 115, "watchog": 115, "lillipup": 115, "herdier": 115, "stoutland": 115, "purrloin": 115, "liepard": 115, "pansag": 115, "simisag": 115, "572": 115, "pansear": 115, "573": 115, "simisear": 115, "574": 115, "panpour": 115, "simipour": 115, "576": 115, "munna": 115, "577": 115, "musharna": 115, "tranquil": 115, "unfez": 115, "581": 115, "blitzl": 115, "582": 115, "zebstrika": 115, "583": 115, "roggenrola": 115, "584": 115, "boldor": 115, "585": 115, "gigalith": 115, "586": 115, "woobat": 115, "587": 115, "swoobat": 115, "588": 115, "drilbur": 115, "589": 115, "excadril": 115, "592": 115, "timburr": 115, "593": 115, "gurdurr": 115, "conkeldurr": 115, "595": 115, "tympol": 115, "597": 115, "seismitoad": 115, "598": 115, "throh": 115, "599": 115, "sawk": 115, "sewaddl": 115, "601": 115, "swadloon": 115, "602": 115, "leavanni": 115, "603": 115, "veniped": 115, "604": 115, "whirliped": 115, "605": 115, "scoliped": 115, "606": 115, "cottone": 115, "607": 115, "whimsicott": 115, "608": 115, "petilil": 115, "609": 115, "lillig": 115, "basculin": 115, "611": 115, "sandil": 115, "612": 115, "krokorok": 115, "613": 115, "krookodil": 115, "614": 115, "darumaka": 115, "darmanitanstandard": 115, "616": 115, "darmanitanzen": 115, "maractu": 115, "dwebbl": 115, "619": 115, "crustl": 115, "620": 115, "scraggi": 115, "621": 115, "scrafti": 115, "622": 115, "sigilyph": 115, "623": 115, "yamask": 115, "624": 115, "cofagrigu": 115, "tirtouga": 115, "626": 115, "carracosta": 115, "627": 115, "archen": 115, "628": 115, "archeop": 115, "629": 115, "trubbish": 115, "garbodor": 115, "minccino": 115, "cinccino": 115, "gothita": 115, "636": 115, "gothorita": 115, "gothitel": 115, "638": 115, "solosi": 115, "639": 115, "duosion": 115, "reuniclu": 115, "641": 115, "ducklett": 115, "642": 115, "swanna": 115, "643": 115, "vanillit": 115, "644": 115, "vanillish": 115, "645": 115, "vanillux": 115, "646": 115, "deerl": 115, "647": 115, "sawsbuck": 115, "emolga": 115, "649": 115, "karrablast": 115, "escavali": 115, "651": 115, "foongu": 115, "653": 115, "frillish": 115, "654": 115, "jellic": 115, "655": 115, "alomomola": 115, "656": 115, "joltik": 115, "657": 115, "galvantula": 115, "658": 115, "ferrose": 115, "659": 115, "ferrothorn": 115, "660": 115, "klink": 115, "661": 115, "klang": 115, "662": 115, "klinklang": 115, "663": 115, "tynamo": 115, "664": 115, "eelektrik": 115, "665": 115, "eelektross": 115, "elgyem": 115, "beheeyem": 115, "litwick": 115, "669": 115, "lampent": 115, "chandelur": 115, "671": 115, "axew": 115, "fraxur": 115, "haxoru": 115, "674": 115, "cubchoo": 115, "675": 115, "beartic": 115, "676": 115, "cryogon": 115, "shelmet": 115, "679": 115, "stunfisk": 115, "mienfoo": 115, "681": 115, "mienshao": 115, "682": 115, "druddigon": 115, "683": 115, "golett": 115, "684": 115, "golurk": 115, "685": 115, "pawniard": 115, "686": 115, "bisharp": 115, "687": 115, "bouffal": 115, "688": 115, "rufflet": 115, "689": 115, "braviari": 115, "690": 115, "vullabi": 115, "691": 115, "mandibuzz": 115, "692": 115, "heatmor": 115, "693": 115, "durant": 115, "694": 115, "deino": 115, "696": 115, "hydreigon": 115, "697": 115, "larvesta": 115, "699": 115, "cobalion": 115, "terrakion": 115, "701": 115, "virizion": 115, "702": 115, "tornadusincarn": 115, "703": 115, "tornadustherian": 115, "704": 115, "thundurusincarn": 115, "705": 115, "thundurustherian": 115, "706": 115, "reshiram": 115, "707": 115, "zekrom": 115, "708": 115, "landorusincarn": 115, "709": 115, "landorustherian": 115, "710": 115, "kyurem": 115, "711": 115, "kyuremblack": 115, "712": 115, "kyuremwhit": 115, "713": 115, "keldeoordinari": 115, "714": 115, "keldeoresolut": 115, "715": 115, "meloettaaria": 115, "717": 115, "genesect": 115, "quilladin": 115, "chesnaught": 115, "fennekin": 115, "722": 115, "braixen": 115, "723": 115, "delphox": 115, "724": 115, "froaki": 115, "725": 115, "frogadi": 115, "726": 115, "greninja": 115, "727": 115, "bunnelbi": 115, "728": 115, "diggersbi": 115, "fletchl": 115, "730": 115, "fletchind": 115, "731": 115, "talonflam": 115, "732": 115, "scatterbug": 115, "733": 115, "spewpa": 115, "734": 115, "vivillon": 115, "737": 115, "flab\u00e9b\u00e9": 115, "738": 115, "floett": 115, "739": 115, "florg": 115, "742": 115, "pancham": 115, "743": 115, "pangoro": 115, "furfrou": 115, "745": 115, "espurr": 115, "746": 115, "meowsticmal": 115, "747": 115, "meowsticfemal": 115, "748": 115, "honedg": 115, "749": 115, "doublad": 115, "750": 115, "aegislashblad": 115, "aegislashshield": 115, "752": 115, "spritze": 115, "753": 115, "aromatiss": 115, "754": 115, "swirlix": 115, "755": 115, "slurpuff": 115, "756": 115, "inkai": 115, "757": 115, "malamar": 115, "758": 115, "binacl": 115, "759": 115, "barbaracl": 115, "760": 115, "skrelp": 115, "761": 115, "dragalg": 115, "762": 115, "clauncher": 115, "763": 115, "clawitz": 115, "764": 115, "helioptil": 115, "765": 115, "heliolisk": 115, "tyrunt": 115, "767": 115, "tyrantrum": 115, "768": 115, "amaura": 115, "769": 115, "auroru": 115, "sylveon": 115, "771": 115, "hawlucha": 115, "772": 115, "dedenn": 115, "carbink": 115, "774": 115, "goomi": 115, "775": 115, "sliggoo": 115, "776": 115, "goodra": 115, "777": 115, "klefki": 115, "778": 115, "phantump": 115, "779": 115, "treven": 115, "pumpkabooaverag": 115, "781": 115, "pumpkaboosmal": 115, "782": 115, "pumpkaboolarg": 115, "783": 115, "pumpkaboosup": 115, "784": 115, "gourgeistaverag": 115, "785": 115, "gourgeistsmal": 115, "786": 115, "gourgeistlarg": 115, "787": 115, "gourgeistsup": 115, "788": 115, "bergmit": 115, "avalugg": 115, "790": 115, "noibat": 115, "791": 115, "noivern": 115, "792": 115, "xernea": 115, "793": 115, "yveltal": 115, "10_python_pandas_modul": 116, "na_valu": 116, "stroke": 116, "peak": 116, "rpm": 116, "automobile_data1": 116, "groupbi": 116, "merced": 116, "benz": 116, "45400": 116, "car_manufactur": 116, "toyotadf": 116, "get_group": 116, "unnam": 116, "5348": 116, "6338": 116, "6488": 116, "6918": 116, "7898": 116, "8778": 116, "15750": 116, "nissan": 116, "mazda": 116, "mitsubishi": 116, "isuzu": 116, "honda": 116, "jaguar": 116, "chevrolet": 116, "porsch": 116, "dodg": 116, "pricedf": 116, "c8f749f7a9ca": 116, "18920": 116, "41315": 116, "6575": 116, "6377": 116, "12945": 116, "6785": 116, "36000": 116, "18344": 116, "8189": 116, "13499": 116, "37028": 116, "mileagedf": 116, "company_grp": 116, "c02acf54079b": 116, "333333": 116, "400000": 116, "714286": 116, "carsdf": 116, "hardtop": 116, "eight": 116, "40960": 116, "ohcf": 116, "36880": 116, "germancar": 116, "bmv": 116, "23845": 116, "171995": 116, "135925": 116, "71400": 116, "carsdf1": 116, "japanesecar": 116, "29995": 116, "23600": 116, "61500": 116, "58900": 116, "carsdf2": 116, "germani": 116, "car_pric": 116, "17995": 116, "carpricedf": 116, "car_horsepow": 116, "carshorsepowerdf": 116, "wrangl": 117, "artifici": 121, "intellig": 121, "intervent": 121, "calculu": 121, "supervis": [121, 122], "unsupervis": [121, 122], "reinforc": 121, "convolut": 121, "recurr": 121, "classif": 121, "kera": 121, "ensembl": [121, 122], "adversari": 121, "openai": 121, "deploy": 121, "monitor": 121, "mainten": 121, "ethic": 121, "bia": 121, "privaci": 121, "paper": 121, "contribut": 121, "bert": 121, "gpt": 121, "llm": 121, "langchain": 121, "prepar": 121, "regress": 121, "cluster": 121, "anomali": 121, "big": [121, 122], "portfolio": 121, "interview": 121, "curat": 122, "tech": 122, "iot": 122, "wast": 122, "fastest": 122, "toward": 122, "journei": 122, "bare": 122, "tight": 122, "anlayt": 122, "secret": 122, "gradient": 122, "descent": 122, "hyperparamat": 122, "classic": 122, "workabl": 122, "exceric": 122}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"notebook": [0, 6, 7, 82, 84, 86, 119], "myst": [0, 2, 7, 82, 83, 84, 86, 87, 119], "markdown": [0, 2, 7, 82, 83, 84, 86, 87, 119], "an": [0, 9, 14, 28, 30, 31, 46, 77, 84, 102, 119], "exampl": [0, 14, 21, 22, 23, 24, 34, 35, 36, 37, 38, 39, 41, 47, 51, 55, 62, 65, 70, 78, 84, 112, 119], "cell": [0, 84, 119], "creat": [0, 10, 27, 28, 29, 30, 31, 32, 35, 41, 47, 55, 77, 84, 98, 102, 104, 105, 106, 114, 119], "quickli": [0, 84, 119], "add": [0, 28, 30, 84, 102, 119], "yaml": [0, 84, 119], "metadata": [0, 84, 104, 119], "here": [1, 3, 27, 81, 85, 88, 118, 120], "": [1, 3, 14, 28, 30, 34, 35, 37, 62, 85, 88, 102, 116, 118, 120], "my": [1, 3, 85, 88, 118, 120, 122], "sampl": [1, 3, 83, 85, 87, 88, 102, 118, 120], "titl": [1, 3, 85, 88, 118, 120], "first": [1, 3, 28, 85, 88, 102, 107, 108, 109, 116, 118, 120], "section": [1, 3, 85, 88, 118, 120], "file": [2, 4, 43, 44, 48, 83, 87, 101, 102, 116], "what": [2, 22, 23, 27, 28, 29, 30, 31, 34, 49, 51, 53, 54, 55, 57, 58, 60, 71, 73, 81, 83, 87, 101, 102, 104], "i": [2, 14, 22, 23, 27, 28, 29, 30, 31, 43, 49, 51, 53, 57, 71, 73, 81, 83, 87, 101, 102, 104, 110, 122], "learn": [4, 5, 12, 121, 122], "python": [4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 97, 98, 102, 103, 104, 105, 106, 112, 113, 115, 116, 117], "program": [4, 41, 46, 62, 73, 76, 102], "introduct": [4, 6, 15, 75, 89, 91], "data": [4, 26, 33, 67, 72, 77, 101, 104, 105, 106, 115, 116, 121], "type": [4, 26, 28, 29, 30, 33, 43, 49, 66, 67, 68, 69, 77, 78, 98, 102, 105, 106], "flow": [4, 17, 25], "control": [4, 17, 22, 23, 24, 25], "function": [4, 10, 11, 12, 22, 27, 28, 29, 30, 31, 32, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 69, 78, 79, 98, 100, 102, 105, 107, 108, 109, 110, 111, 112, 113, 114], "object": [4, 14, 34, 36, 38, 43, 73, 76, 77, 80, 104], "class": [4, 12, 13, 14, 19, 20, 22, 27, 28, 29, 30, 31, 32, 34, 39, 40, 43, 45, 46, 47, 49, 55, 59, 65, 70, 76, 77, 78, 80, 102], "advanc": [4, 16, 27, 101, 121], "topic": [4, 16, 64, 121], "date": [4, 34, 35, 37, 39, 42, 102], "time": [4, 14, 28, 34, 35, 37, 38, 39, 40, 41, 42, 99, 102], "modul": [4, 38, 40, 42, 51, 55, 56, 57, 58, 59, 92, 103, 117], "numpi": [4, 97, 98, 101, 102, 103], "panda": [4, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "matplotlib": 4, "about": 4, "why": [4, 22, 23, 29, 78, 81, 97], "how": [4, 27, 28, 31, 35, 36, 37, 49, 55, 62, 97, 102, 107], "resourc": [4, 103, 117], "mathemat": [5, 26, 57, 97, 100], "machin": [5, 73, 121], "get": [6, 12, 28, 30, 34, 37, 38, 44, 69, 90, 102, 104], "start": [6, 14, 114], "applic": 6, "area": [6, 102], "instal": [6, 91, 97], "us": [6, 10, 11, 13, 14, 22, 23, 26, 28, 29, 34, 35, 38, 46, 51, 54, 55, 59, 65, 69, 76, 81, 91, 97, 102, 105, 106, 107, 108, 111, 112, 113, 116, 122], "code": [6, 7, 35, 36, 62, 73, 82, 86], "editor": 6, "your": 6, "choic": 6, "jupyt": 6, "packag": [6, 58, 59, 91, 102], "manag": [6, 44], "virtual": 6, "environ": 6, "inform": 6, "calcul": 6, "insid": [6, 22, 23, 34, 102], "string": [6, 14, 22, 23, 27, 28, 30, 32, 34, 35, 36, 55, 59, 66, 67, 69], "list": [6, 19, 20, 22, 23, 27, 28, 29, 30, 32, 35, 36, 44, 46, 49, 55, 67, 102, 105, 106, 111, 112, 113], "check": [6, 97, 102], "datatyp": [6, 31, 98], "In": [6, 28, 55, 77], "upcom": 6, "tutori": 6, "we": [6, 11, 29], "deep": 6, "dive": 6, "specif": [6, 28, 29, 30, 46, 107], "concept": [6, 76, 122], "hold": 6, "breath": 6, "journei": 6, "content": [7, 82, 86, 91], "block": [7, 82, 86, 102], "output": [7, 69, 76, 82, 86, 102], "linear": 8, "algebra": 8, "iter": [9, 17, 22, 23, 27, 28, 29, 30, 31, 102, 104], "through": [9, 27, 28, 29, 30, 31], "work": [9, 27, 35, 36, 115], "loop": [9, 10, 22, 23, 24, 32], "build": [9, 102], "custom": [9, 47, 104, 106], "infinit": [9, 10], "gener": [10, 32, 101, 102], "differ": [10, 18, 19, 31, 34, 37, 38, 62, 73, 102], "between": [10, 34, 38, 73, 102], "normal": [10, 102], "express": [10, 96, 102, 111], "1": [10, 12, 14, 20, 21, 22, 24, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 49, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 91, 102, 108, 111, 114, 116], "easi": 10, "implement": [10, 102], "2": [10, 12, 14, 20, 21, 22, 24, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 41, 43, 45, 49, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 91, 102, 116], "memori": [10, 102], "effici": 10, "3": [10, 12, 14, 20, 22, 24, 27, 28, 29, 31, 34, 35, 37, 38, 41, 43, 45, 49, 55, 59, 64, 65, 66, 67, 69, 70, 91, 102, 116], "repres": [10, 34, 38, 102], "stream": 10, "4": [10, 14, 34, 38, 41, 43, 45, 59, 64, 67, 70, 102, 116], "pipelin": 10, "closur": [11, 12], "higher": [11, 12], "order": [11, 12, 28, 29, 30, 78, 102], "paramet": [11, 12, 49, 52, 77, 104, 112], "return": [11, 28, 29, 30, 49], "valu": [11, 28, 29, 30, 49, 65, 69, 76, 102, 105, 107, 110, 112], "nonloc": [11, 50], "variabl": [11, 30, 50, 51, 52, 65, 71, 72, 76, 105], "nest": [11, 21, 22, 23, 24, 32, 51, 105], "defin": [11, 47, 49, 60, 77, 81, 105, 109, 110, 111], "when": [11, 23, 26, 28, 30, 99, 102], "do": 11, "have": 11, "decor": [12, 13], "prerequisit": 12, "back": 12, "chain": 12, "built": [12, 27, 28, 29, 30, 31, 45, 55, 77], "map": [12, 54], "filter": [12, 54, 104, 115], "exercis": [12, 14, 19, 20, 22, 27, 28, 29, 30, 31, 32, 39, 43, 45, 46, 49, 55, 65, 70, 76, 102, 116], "span": [12, 14, 19, 20, 22, 27, 28, 29, 30, 31, 32, 39, 43, 45, 46, 49, 55, 65, 70, 76], "label": [12, 14, 19, 20, 22, 27, 28, 29, 30, 31, 32, 39, 43, 45, 46, 49, 55, 65, 70, 76, 107], "default": [12, 14, 19, 20, 22, 27, 28, 29, 30, 31, 32, 39, 43, 45, 46, 49, 52, 55, 65, 70, 76], "level": [12, 14, 20, 22, 28, 29, 31, 39, 43, 46, 49, 55, 65, 73, 76, 111, 114, 121], "properti": [13, 77], "without": [13, 49, 102, 112, 114], "getter": 13, "setter": 13, "The": [13, 18, 19, 27, 28, 29, 30, 43, 46, 55, 105, 108, 109, 110, 111, 112, 113, 114], "regex": 14, "specifi": [14, 28, 69], "pattern": [14, 22, 23, 102], "metacharact": 14, "squar": 14, "bracket": 14, "period": 14, "caret": 14, "dollar": 14, "5": [14, 34, 38, 45, 59, 67, 70, 102, 116], "star": 14, "6": [14, 34, 38, 45, 67, 70, 102, 116], "plu": 14, "7": [14, 34, 45, 102, 116], "question": 14, "mark": 14, "8": [14, 34, 45, 102, 116], "brace": 14, "9": [14, 34, 45, 102, 116], "altern": 14, "10": [14, 34, 102, 116], "group": 14, "11": [14, 34, 102], "backslash": 14, "special": [14, 66, 70, 79], "sequenc": [14, 27, 72], "A": [14, 102], "match": [14, 28], "charact": [14, 27, 66], "ar": [14, 28, 30, 31, 54, 55, 58, 60, 102, 105, 110], "b": [14, 22, 23, 102], "begin": 14, "end": [14, 28, 62], "word": 14, "opposit": 14, "d": [14, 102], "ani": [14, 28, 30, 49, 102], "non": [14, 102], "decim": [14, 26, 55], "digit": [14, 41], "equival": [14, 102], "0": [14, 102, 114], "where": [14, 105, 110], "contain": [14, 102], "whitespac": 14, "t": 14, "n": [14, 102, 107, 108], "r": [14, 102], "f": [14, 102], "v": [14, 32, 59, 73, 105, 108], "w": [14, 102], "alphanumer": 14, "alphabet": 14, "za": 14, "z0": 14, "9_": 14, "By": 14, "wai": [14, 28], "underscor": 14, "_": 14, "also": [14, 98], "consid": [14, 102], "z": [14, 102], "summari": [14, 27, 28, 29, 30, 31, 99, 104], "method": [14, 27, 28, 29, 30, 31, 43, 76, 78, 98, 102], "re": 14, "findal": 14, "split": 14, "sub": 14, "subn": 14, "search": [14, 55], "prefix": [14, 111], "befor": 14, "escap": [14, 27], "One": [14, 19], "more": [14, 27, 97], "zero": [14, 102], "one": [14, 18, 22, 65, 69, 102, 110, 112], "quantifi": 14, "cart": 14, "arg": 15, "kwarg": 15, "thing": [15, 63], "rememb": [15, 32, 63, 68, 76], "decis": 17, "make": [17, 44, 102, 115, 116], "statement": [17, 18, 19, 20, 21, 22, 23, 24, 32, 46, 49, 55, 64], "condit": [17, 32, 104, 115, 116], "transfer": 17, "syntax": [18, 19, 20, 21, 22, 23, 32, 45], "shortcut": [18, 19], "short": [18, 19], "hand": [18, 19], "line": [18, 19, 22, 59, 62, 64, 65, 69, 102], "els": [19, 20, 22, 23, 24, 46], "elif": 20, "logic": [20, 45, 70], "oper": [20, 27, 28, 29, 30, 31, 55, 70, 79, 97, 100], "rang": [22, 102, 108, 113, 114], "break": [22, 23, 24, 27, 62], "continu": [22, 23, 24], "c": [22, 23, 102], "pass": [22, 23, 24, 28, 30, 49], "revers": [22, 23, 28, 102], "backward": 22, "print": [22, 23, 34, 62, 69, 102, 104, 116], "while": [22, 23, 24, 69, 104, 111], "access": [22, 27, 28, 29, 30, 69, 77], "index": [22, 28, 29, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "tupl": [22, 28, 29, 30, 46, 67], "dictionari": [22, 30, 43, 46, 67, 105, 112], "set": [22, 30, 31, 67, 102, 107, 113], "number": [23, 26, 28, 29, 30, 32, 66, 67, 69, 98, 101, 102, 110, 113, 114], "faq": [23, 24], "outer": [24, 102], "catch": [24, 46], "except": [24, 45, 46, 47, 107], "convers": [26, 66, 68, 104], "instead": 26, "float": [26, 69, 102], "fraction": 26, "slice": [27, 28, 29, 97], "appart": 27, "chang": [27, 28, 29, 30, 43, 44, 65, 102, 105, 106, 114, 115], "delet": [27, 28, 29, 43, 77, 108], "basic": [27, 52, 97, 98], "concaten": [27, 116], "two": [27, 34, 38, 49, 102, 113, 116], "replic": 27, "membership": [27, 28, 29, 30, 31, 70], "relat": [27, 70], "format": [27, 34, 35, 36, 37, 59, 69, 115], "all": [27, 28, 30, 55, 102, 108, 109, 110, 111, 116], "support": 27, "raw": 27, "ignor": [27, 102], "old": [27, 113], "style": 27, "common": [27, 102], "inspect": [27, 104], "process": 27, "element": [28, 29, 30, 31, 97, 102], "from": [28, 29, 30, 31, 34, 35, 55, 58, 69, 101, 102, 104, 105, 106, 107, 108, 109, 110, 114, 116], "neg": [28, 29, 34], "remov": [28, 30, 31, 44, 97, 111], "true": [28, 30, 102], "given": [28, 29, 30, 102, 116], "If": [28, 30], "fals": [28, 30], "sort": [28, 29, 30, 97, 102, 104, 115, 116], "dict": [28, 29, 30, 104, 105, 112], "either": [28, 29, 30], "ascend": [28, 29, 30], "descend": [28, 29, 30], "min": [28, 29, 98], "thi": [28, 30, 76], "python3": 28, "should": [28, 29, 76, 102], "same": [28, 29, 102], "otherwis": [28, 29], "compil": [28, 73], "throw": [28, 29], "error": [28, 45, 91, 108, 111], "max": [28, 29, 98], "maximum": [28, 29, 102], "len": [28, 29, 30], "append": 28, "item": [28, 29, 30, 102], "extend": 28, "etc": 28, "insert": [28, 104], "which": [28, 102], "argument": [28, 46, 49, 52, 69], "pop": [28, 108], "clear": [28, 30], "count": [28, 116], "appear": 28, "copi": [28, 30, 97, 99, 102], "shallow": [28, 30], "comprehens": [28, 30, 32], "eleg": 28, "new": [28, 30, 44, 102, 114, 122], "other": [28, 29, 30, 31, 114], "test": [28, 29, 30, 31, 104], "complier": 29, "typeerror": [29, 45], "minimum": [29, 102], "seq": [29, 30], "convert": [29, 102, 112], "advantag": [29, 53, 55, 60], "over": [29, 102], "ad": [30, 97, 111], "give": 30, "total": [30, 102, 116], "length": [30, 52, 102, 105], "would": 30, "equal": [30, 102], "str": 30, "produc": [30, 102], "printabl": 30, "represent": [30, 102], "itm": 30, "kei": [30, 32, 49, 68, 73, 76, 105, 112], "pair": 30, "avail": 30, "fromkei": 30, "setdefault": 30, "similar": [30, 73], "alreadi": 30, "updat": [30, 116], "dict2": 30, "doe": 30, "anyth": 30, "better": 31, "than": [31, 102], "empti": 31, "bit": [31, 102], "tricki": 31, "modifi": [31, 76, 77], "union": 31, "intersect": 31, "symmetr": 31, "frozenset": 31, "For": 32, "instanc": [32, 76, 77], "you": [32, 76], "want": 32, "can": [32, 81, 102], "combin": [32, 97, 102, 104], "lambda": [32, 54, 111], "point": [32, 38, 68, 69, 76, 102], "datetim": [34, 35, 36, 38, 39], "current": [34, 37, 38, 44], "timestamp": [34, 35, 39], "todai": [34, 37, 102], "year": 34, "month": [34, 102], "dai": 34, "hour": 34, "minut": 34, "second": [34, 102], "microsecond": 34, "timedelta": 34, "12": [34, 102], "13": [34, 102], "14": [34, 102], "durat": 34, "strftime": [34, 35, 40], "15": [34, 102], "strptime": [34, 36, 40], "16": [34, 102], "handl": [34, 46, 91], "timezon": [34, 38], "local": [35, 50], "appropri": 35, "valueerror": [36, 45], "timedelata": 38, "vice": 39, "versa": 39, "ctime": 40, "sleep": [40, 41], "struct_tim": 40, "localtim": 40, "gmtime": 40, "mktime": 40, "asctim": 40, "clock": 41, "multithread": 41, "o": [43, 55], "open": 43, "close": 43, "attribut": [43, 59, 77, 98, 102, 104], "write": [43, 46, 62, 63, 102], "read": [43, 102, 115], "posit": [43, 52, 69, 102, 107, 108, 111], "txt": 43, "extens": 43, "json": 43, "save": [43, 115], "csv": [43, 104, 116], "xlsx": 43, "xml": 43, "directori": 44, "getcwd": 44, "chdir": 44, "listdir": 44, "mkdir": 44, "renam": [44, 55, 104, 111], "rmdir": 44, "nameerror": 45, "indexerror": 45, "modulenotfounderror": 45, "attributeerror": 45, "keyerror": 45, "try": 46, "final": 46, "rais": [46, 111], "claus": 46, "No": 46, "multipl": [46, 49, 55, 65, 69, 78, 100, 106, 108, 111, 113], "hello": [46, 62], "world": [46, 62, 122], "pack": 46, "unpack": [46, 72], "spread": 46, "enumer": [46, 102], "zip": 46, "user": [47, 60, 69, 105], "singl": [49, 59, 64, 78, 105, 108, 111], "boolean": [49, 66, 70, 99, 101, 102], "call": 49, "docstr": [49, 59, 64], "global": [50, 51], "keyword": [51, 52, 63, 78], "rule": [51, 63, 65], "across": 51, "share": [51, 102], "arbitrari": [52, 102], "anoth": 52, "recurs": 53, "disadvantag": 53, "anonym": 54, "reduc": 54, "import": [55, 58, 69, 91, 97, 102, 104], "name": [55, 65, 69, 71, 102, 106, 114, 116], "path": [55, 102, 121], "reload": 55, "dir": 55, "sy": 55, "random": [55, 56, 98, 101, 102], "comparis": [55, 73], "math": [55, 57, 100], "constant": [55, 65], "statist": [55, 97, 101, 104, 115], "wrap": 55, "up": 55, "comment": [59, 64], "__doc__": 59, "multi": [59, 64, 107, 108, 111, 113, 114], "help": [59, 64], "script": [59, 102], "let": [62, 65], "down": 62, "compon": 62, "run": 62, "blank": 62, "command": [62, 102], "identifi": 63, "indent": 64, "inlin": 64, "u": 65, "see": 65, "valid": 65, "assign": [65, 70], "declar": 65, "comma": 65, "semicolon": 65, "convent": 65, "liter": 66, "numer": [66, 102], "unicod": 66, "collect": 66, "cast": 68, "implicit": 68, "explicit": 68, "input": 69, "accept": 69, "both": [69, 73, 102], "integ": [69, 99, 102], "onli": [69, 102, 105], "practic": 69, "problem": 69, "multilin": 69, "its": 69, "text": 69, "align": 69, "width": 69, "sign": [69, 102], "displai": [69, 104], "variou": 69, "justif": 69, "arithmat": 70, "arithmet": 70, "comparison": [70, 79, 97], "bitwis": 70, "ident": [70, 102], "namespac": 71, "scope": 71, "structur": [72, 102, 122], "algorithm": 72, "separ": 72, "interpret": [73, 102], "step": 73, "high": 73, "languag": [73, 96], "java": 73, "oop": 76, "orient": 76, "constructor": [76, 77, 81, 104, 105, 106], "inherit": [76, 78], "overrid": [76, 78], "parent": [76, 78], "encapsul": 76, "need": 76, "polymorph": 76, "look": 76, "like": [76, 102], "self": [77, 81], "hide": 77, "Of": 78, "super": 78, "privat": 78, "member": 78, "multilevel": 78, "hierarch": [78, 106], "hybrid": 78, "issubclass": 78, "resolut": 78, "overload": 79, "demystifi": 81, "explicitli": 81, "everytim": 81, "happen": 81, "intern": 81, "Be": [81, 99], "avoid": 81, "To": [81, 104], "stai": 81, "__init__": 81, "__new__": 81, "role": [83, 87], "direct": [83, 87], "huggingfac": 89, "tool": 90, "launch": 90, "tabl": 91, "langchain": [91, 92, 96], "initi": 91, "util": 91, "featur": 91, "conclus": 91, "langgraph": 93, "langserv": 94, "langsmith": 95, "arrai": [97, 98, 99, 100, 101, 102], "version": [97, 102], "placehold": 97, "manipul": 97, "subset": [97, 102], "load": [98, 101, 115], "librari": 98, "rand": 98, "randn": 98, "randint": 98, "argmax": 98, "argmin": 98, "provid": 98, "mani": 98, "1d": [99, 102], "care": [99, 102], "2d": [99, 102], "matric": [99, 102], "quiz": 99, "univers": 100, "matrix": [100, 102], "determin": 100, "broadcast": [100, 101], "reorgan": 101, "asarrai": 101, "arang": 101, "reshap": 101, "flatten": 101, "hstack": 101, "vstack": 101, "linspac": 101, "logspac": 101, "miscellan": 101, "mask": 101, "document": [101, 102], "under": 102, "np": 102, "configur": 102, "dimension": 102, "null": 102, "vector": 102, "size": 102, "find": [102, 116], "sixth": 102, "20": 102, "59": 102, "becom": 102, "last": [102, 107, 108, 109, 116], "3x3": 102, "indic": 102, "4x4": 102, "2x2x2": 102, "9x9": 102, "mean": 102, "border": 102, "fill": 102, "around": 102, "exist": 102, "17": 102, "result": 102, "follow": [102, 116], "18": 102, "6x6": 102, "just": 102, "below": 102, "diagon": 102, "19": 102, "checkerboard": 102, "shape": 102, "x": 102, "y": 102, "100th": 102, "21": 102, "8x8": 102, "tile": 102, "22": 102, "23": 102, "byte": 102, "consum": 102, "24": 102, "multipli": 102, "6x3": 102, "3x4": 102, "real": [102, 122], "product": 102, "25": 102, "negat": 102, "place": [102, 108, 109, 110, 111, 113, 114], "26": 102, "27": 102, "compar": [102, 108], "28": 102, "29": 102, "round": 102, "awai": 102, "30": 102, "31": 102, "warn": 102, "recommend": 102, "32": 102, "33": 102, "yesterdai": 102, "tomorrow": 102, "34": 102, "correspond": 102, "januari": 102, "2016": 102, "35": 102, "comput": 102, "36": 102, "extract": 102, "part": 102, "37": 102, "row": [102, 105, 106, 107, 110, 112, 116], "38": 102, "39": 102, "exclud": 102, "40": 102, "41": 102, "sum": 102, "small": 102, "faster": 102, "42": 102, "thei": 102, "43": 102, "immut": 102, "44": 102, "5x2": 102, "cartesian": 102, "coordin": 102, "them": 102, "polar": 102, "45": 102, "replac": 102, "46": 102, "cover": 102, "47": 102, "construct": 102, "cauchi": 102, "cij": 102, "xi": 102, "yj": 102, "48": 102, "each": [102, 116], "scalar": 102, "49": 102, "50": 102, "closest": 102, "51": 102, "color": 102, "g": 102, "52": 102, "100": 102, "distanc": 102, "53": 102, "54": 102, "55": 102, "56": 102, "gaussian": 102, "57": 102, "randomli": 102, "e": 102, "58": 102, "subtract": 102, "nth": 102, "column": [102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116], "60": 102, "tell": 102, "ha": 102, "61": 102, "nearest": 102, "62": 102, "63": 102, "64": 102, "repeat": 102, "65": 102, "accumul": 102, "base": 102, "66": 102, "h": 102, "imag": 102, "dtype": 102, "ubyt": 102, "uniqu": 102, "67": 102, "four": 102, "dimens": 102, "axi": [102, 108, 111], "onc": 102, "68": 102, "describ": [102, 115], "69": 102, "dot": 102, "70": 102, "consecut": 102, "interleav": 102, "71": 102, "mulitpli": 102, "72": 102, "swap": 102, "73": 102, "triplet": 102, "triangl": 102, "vertic": 102, "segment": 102, "compos": 102, "74": 102, "bincount": 102, "75": 102, "averag": [102, 116], "slide": 102, "window": 102, "76": 102, "whose": 102, "subsequ": 102, "shift": 102, "77": 102, "inplac": 102, "78": 102, "p0": 102, "p1": 102, "p": 102, "79": 102, "j": 102, "80": 102, "subpart": 102, "fix": 102, "center": 102, "pad": 102, "necessari": 102, "81": 102, "82": 102, "rank": 102, "83": 102, "most": [102, 116], "frequent": 102, "84": 102, "contigu": 102, "10x10": 102, "85": 102, "subclass": 102, "86": 102, "wich": 102, "87": 102, "16x16": 102, "88": 102, "game": 102, "life": 102, "89": 102, "largest": 102, "90": 102, "everi": 102, "91": 102, "record": 102, "regular": 102, "92": 102, "larg": [102, 115], "power": 102, "93": 102, "regardless": 102, "94": 102, "10x3": 102, "unequ": 102, "95": 102, "int": 102, "binari": 102, "96": 102, "97": 102, "einsum": 102, "inner": 102, "mul": 102, "98": 102, "equidist": 102, "99": 102, "select": [102, 104, 107], "draw": 102, "multinomi": 102, "distribut": 102, "degre": 102, "bootstrap": 102, "confid": 102, "interv": 102, "resampl": 102, "percentil": 102, "datafram": [104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "creation": 104, "seri": [104, 112, 113], "option": 104, "info": 104, "modif": 104, "drop": [104, 108, 109, 110], "appli": 104, "join": 104, "groupbi": [104, 115], "view": 104, "clean": [104, 116], "export": [104, 115], "requir": 105, "from_dict": 105, "head": 107, "tail": 107, "iat": 107, "top": 107, "bottom": 107, "suppress": 108, "iloc": 108, "loc": 108, "del": 108, "duplic": [109, 110, 113], "drop_dupl": 109, "keep": [109, 113], "reset": [109, 110, 114], "na": 110, "dropna": 110, "least": 110, "miss": 110, "lead": 111, "trail": 111, "space": 111, "suffix": 111, "set_axi": 111, "to_dict": 112, "header": 112, "set_index": 113, "reset_index": 114, "our": 115, "desir": 115, "aggreg": 115, "amount": 115, "dataset": 116, "five": 116, "expens": 116, "car": 116, "compani": 116, "toyota": 116, "detail": 116, "per": 116, "higesht": 116, "price": 116, "mileag": 116, "frame": 116, "merg": 116, "ai": 121, "ml": 121, "beginn": 121, "intermedi": 121, "expert": 121, "scienc": 121, "welcom": 122, "technic": 122, "diari": 122, "good": 122, "target": 122, "audienc": 122, "cours": 122, "essenti": 122, "toolbox": 122, "core": 122, "engin": 122, "case": 122, "enjoi": 122}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Notebooks with MyST Markdown": [[0, "notebooks-with-myst-markdown"], [84, "notebooks-with-myst-markdown"], [119, "notebooks-with-myst-markdown"]], "An example cell": [[0, "an-example-cell"], [84, "an-example-cell"], [119, "an-example-cell"]], "Create a notebook with MyST Markdown": [[0, "create-a-notebook-with-myst-markdown"], [84, "create-a-notebook-with-myst-markdown"], [119, "create-a-notebook-with-myst-markdown"]], "Quickly add YAML metadata for MyST Notebooks": [[0, "quickly-add-yaml-metadata-for-myst-notebooks"], [84, "quickly-add-yaml-metadata-for-myst-notebooks"], [119, "quickly-add-yaml-metadata-for-myst-notebooks"]], "Here\u2019s my sample title": [[1, "heres-my-sample-title"], [3, "heres-my-sample-title"], [85, "heres-my-sample-title"], [88, "heres-my-sample-title"], [118, "heres-my-sample-title"], [120, "heres-my-sample-title"]], "Here\u2019s my first section": [[1, "heres-my-first-section"], [3, "heres-my-first-section"], [85, "heres-my-first-section"], [88, "heres-my-first-section"], [118, "heres-my-first-section"], [120, "heres-my-first-section"]], "Markdown Files": [[2, "markdown-files"], [83, "markdown-files"], [87, "markdown-files"]], "What is MyST?": [[2, "what-is-myst"], [83, "what-is-myst"], [87, "what-is-myst"]], "Learn Python Programming": [[4, "learn-python-programming"]], "Python Introduction": [[4, "python-introduction"], [75, "python-introduction"]], "Python Data Types": [[4, "python-data-types"], [33, "python-data-types"], [67, "python-data-types"]], "Python Flow Control": [[4, "python-flow-control"], [25, "python-flow-control"]], "Python Functions": [[4, "python-functions"], [49, "python-functions"], [61, "python-functions"]], "Python Files": [[4, "python-files"], [48, "python-files"]], "Python Object Class": [[4, "python-object-class"], [80, "python-object-class"]], "Python Advanced Topics": [[4, "python-advanced-topics"], [16, "python-advanced-topics"]], "Python Date & Time Module": [[4, "python-date-time-module"], [42, "python-date-time-module"]], "Python Numpy Module": [[4, "python-numpy-module"], [103, "python-numpy-module"]], "Python Pandas Module": [[4, "python-pandas-module"], [117, "python-pandas-module"]], "Python Matplotlib Module": [[4, "python-matplotlib-module"]], "About Python Programming": [[4, "about-python-programming"]], "Why Learn Python?": [[4, "why-learn-python"]], "How to learn Python?": [[4, "how-to-learn-python"]], "Python Resources": [[4, "python-resources"]], "Mathematics for Machine Learning": [[5, "mathematics-for-machine-learning"]], "Getting Started with Python": [[6, "getting-started-with-python"]], "Python Applications Area": [[6, "python-applications-area"]], "Python Installation": [[6, "python-installation"]], "Using a code editor of your choice": [[6, "using-a-code-editor-of-your-choice"]], "Using python in a jupyter notebook": [[6, "using-python-in-a-jupyter-notebook"]], "Package manager and virtual environment": [[6, "package-manager-and-virtual-environment"]], "Informal introduction to python: using python as calculator": [[6, "informal-introduction-to-python-using-python-as-calculator"]], "Using Python inside Jupyter notebook": [[6, "using-python-inside-jupyter-notebook"]], "Python Strings": [[6, "python-strings"], [27, "python-strings"]], "Python lists": [[6, "python-lists"]], "Check python datatypes": [[6, "check-python-datatypes"]], "In the upcoming tutorials, we will deep dive into specific concepts of Python, hold on your breath and start your journey": [[6, "in-the-upcoming-tutorials-we-will-deep-dive-into-specific-concepts-of-python-hold-on-your-breath-and-start-your-journey"]], "Content with notebooks": [[7, "content-with-notebooks"], [82, "content-with-notebooks"], [86, "content-with-notebooks"]], "Markdown + notebooks": [[7, "markdown-notebooks"], [82, "markdown-notebooks"], [86, "markdown-notebooks"]], "MyST markdown": [[7, "myst-markdown"], [82, "myst-markdown"], [86, "myst-markdown"]], "Code blocks and outputs": [[7, "code-blocks-and-outputs"], [82, "code-blocks-and-outputs"], [86, "code-blocks-and-outputs"]], "Linear Algebra": [[8, "linear-algebra"]], "Python Iterators": [[9, "python-iterators"]], "Iterators in Python": [[9, "iterators-in-python"]], "Iterating Through an Iterator": [[9, "iterating-through-an-iterator"]], "Working of for loop for Iterators": [[9, "working-of-for-loop-for-iterators"]], "Building Custom Iterators": [[9, "building-custom-iterators"]], "Python Infinite Iterators": [[9, "python-infinite-iterators"]], "Python Python Generators": [[10, "python-python-generators"]], "Generators in Python": [[10, "generators-in-python"]], "Create Generators in Python": [[10, "create-generators-in-python"]], "Differences between Generator function and Normal function": [[10, "differences-between-generator-function-and-normal-function"]], "Python Generators with a Loop": [[10, "python-generators-with-a-loop"]], "Python Generator Expression": [[10, "python-generator-expression"]], "Use of Python Generators": [[10, "use-of-python-generators"]], "1. Easy to Implement": [[10, "easy-to-implement"]], "2. Memory Efficient": [[10, "memory-efficient"]], "3. Represent Infinite Stream": [[10, "represent-infinite-stream"]], "4. Pipelining Generators": [[10, "pipelining-generators"]], "Python Closures": [[11, "python-closures"]], "Higher Order Functions": [[11, "higher-order-functions"]], "Function as a Parameter": [[11, "function-as-a-parameter"]], "Function as a Return Value": [[11, "function-as-a-return-value"]], "Nonlocal variable in a nested function": [[11, "nonlocal-variable-in-a-nested-function"]], "Defining a Closure Function": [[11, "defining-a-closure-function"]], "When do we have closures?": [[11, "when-do-we-have-closures"]], "When to use closures?": [[11, "when-to-use-closures"]], "Python Decorators": [[12, "python-decorators"]], "Decorators in Python": [[12, "decorators-in-python"]], "Prerequisites for learning decorators": [[12, "prerequisites-for-learning-decorators"]], "Getting back to Decorators": [[12, "getting-back-to-decorators"]], "Decorating Functions with Parameters": [[12, "decorating-functions-with-parameters"]], "Chaining Decorators in Python": [[12, "chaining-decorators-in-python"]], "Built-in Higher Order Functions": [[12, "built-in-higher-order-functions"]], "Python - map Function": [[12, "python-map-function"]], "Python - filter Function": [[12, "python-filter-function"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Higher order functions, Closure and Decorators</span>": [[12, "exercises-higher-order-functions-closure-and-decorators"]], "Exercises \u279e <span class='label label-default'>Level 1</span>": [[12, "exercises-level-1"], [14, "exercises-level-1"], [20, "exercises-level-1"], [22, "exercises-level-1"], [28, "exercises-level-1"], [29, "exercises-level-1"], [31, "exercises-level-1"], [39, "exercises-level-1"], [43, "exercises-level-1"], [46, "exercises-level-1"], [49, "exercises-level-1"], [55, "exercises-level-1"], [65, "exercises-level-1"], [76, "exercises-level-1"]], "Exercises \u279e <span class='label label-default'>Level 2</span>": [[12, "exercises-level-2"], [14, "exercises-level-2"], [20, "exercises-level-2"], [22, "exercises-level-2"], [28, "exercises-level-2"], [29, "exercises-level-2"], [31, "exercises-level-2"], [43, "exercises-level-2"], [49, "exercises-level-2"], [55, "exercises-level-2"], [65, "exercises-level-2"], [76, "exercises-level-2"]], "Exercises \u279e <span class='label label-default'>Level 3</span>": [[12, "exercises-level-3"], [14, "exercises-level-3"], [20, "exercises-level-3"], [22, "exercises-level-3"], [31, "exercises-level-3"], [49, "exercises-level-3"], [55, "exercises-level-3"]], "Python @property decorator": [[13, "python-property-decorator"]], "Class Without Getters and Setters": [[13, "class-without-getters-and-setters"]], "Using Getters and Setters": [[13, "using-getters-and-setters"]], "The property Class": [[13, "the-property-class"]], "The @property Decorator": [[13, "the-property-decorator"]], "Python RegEx": [[14, "python-regex"]], "Specify Pattern Using RegEx": [[14, "specify-pattern-using-regex"]], "MetaCharacters": [[14, "metacharacters"]], "[] . ^ $ * + ? {} () \\ |": [[14, "id1"]], "1. [] - Square brackets": [[14, "square-brackets"]], "2. . - Period": [[14, "period"]], "3. ^ - Caret": [[14, "caret"]], "4. $ - Dollar": [[14, "dollar"]], "5. * - Star": [[14, "star"]], "6. + - Plus": [[14, "plus"]], "7. ? - Question Mark": [[14, "question-mark"]], "8. {} - Braces": [[14, "braces"]], "9. | - Alternation": [[14, "alternation"]], "10. () - Group": [[14, "group"]], "11. \\ - Backslash": [[14, "backslash"]], "Special Sequences": [[14, "special-sequences"]], "\\A - Matches if the specified characters are at the start of a string.": [[14, "a-matches-if-the-specified-characters-are-at-the-start-of-a-string"]], "\\b - Matches if the specified characters are at the beginning or end of a word.": [[14, "b-matches-if-the-specified-characters-are-at-the-beginning-or-end-of-a-word"]], "\\B - Opposite of \\b. Matches if the specified characters are not at the beginning or end of a word.": [[14, "b-opposite-of-b-matches-if-the-specified-characters-are-not-at-the-beginning-or-end-of-a-word"]], "\\d - Matches any non-decimal digit. Equivalent to [^0-9]": [[14, "d-matches-any-non-decimal-digit-equivalent-to-0-9"]], "\\s - Matches where a string contains any whitespace character. Equivalent to [ \\t\\n\\r\\f\\v].": [[14, "s-matches-where-a-string-contains-any-whitespace-character-equivalent-to-t-n-r-f-v"]], "\\S - Matches where a string contains any non-whitespace character. Equivalent to [^ \\t\\n\\r\\f\\v].": [[14, "s-matches-where-a-string-contains-any-non-whitespace-character-equivalent-to-t-n-r-f-v"]], "\\w - Matches any alphanumeric character (digits and alphabets). Equivalent to [a-zA-Z0-9_]. By the way, underscore _ is also considered an alphanumeric character.": [[14, "w-matches-any-alphanumeric-character-digits-and-alphabets-equivalent-to-a-za-z0-9-by-the-way-underscore-is-also-considered-an-alphanumeric-character"]], "\\W - Matches any non-alphanumeric character. Equivalent to [^a-zA-Z0-9_].": [[14, "w-matches-any-non-alphanumeric-character-equivalent-to-a-za-z0-9"]], "\\Z - Matches if the specified characters are at the end of a string.": [[14, "z-matches-if-the-specified-characters-are-at-the-end-of-a-string"]], "Summary - MetaCharacters": [[14, "summary-metacharacters"]], "Python RegEx Methods": [[14, "python-regex-methods"]], "1. re.findall()": [[14, "re-findall"]], "2. re.split()": [[14, "re-split"]], "3. re.sub()": [[14, "re-sub"]], "4. re.subn()": [[14, "re-subn"]], "5. re.search()": [[14, "re-search"]], "Match object": [[14, "match-object"]], "1. match.group()": [[14, "match-group"]], "2. match.start(), match.end() and match.span()": [[14, "match-start-match-end-and-match-span"]], "3. match.re and match.string": [[14, "match-re-and-match-string"]], "Using r prefix before RegEx": [[14, "using-r-prefix-before-regex"]], "Example of RegEx with Metacharacters": [[14, "example-of-regex-with-metacharacters"]], "Square Brackets []": [[14, "id2"]], "Escape character \\": [[14, "escape-character"]], "One or more times +": [[14, "one-or-more-times"]], "Period .": [[14, "id3"]], "Zero or more times *": [[14, "zero-or-more-times"]], "Zero or one time ?": [[14, "zero-or-one-time"]], "Quantifier {}": [[14, "quantifier"]], "Cart ^": [[14, "cart"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>RegEx</span>": [[14, "exercises-regex"]], "Python *args and **kwargs": [[15, "python-args-and-kwargs"]], "Introduction to *args and **kwargs in Python": [[15, "introduction-to-args-and-kwargs-in-python"]], "Python *args": [[15, "python-args"]], "Python **kwargs": [[15, "python-kwargs"]], "Things to Remember:": [[15, "things-to-remember"]], "Python Flow-Control (Decision-Making) Statements": [[17, "python-flow-control-decision-making-statements"]], "Control Flow Statements": [[17, "control-flow-statements"]], "Conditional statements": [[17, "conditional-statements"]], "Iterative statements": [[17, "iterative-statements"]], "Transfer statements": [[17, "transfer-statements"]], "Python if statement": [[18, "python-if-statement"]], "Syntax:": [[18, "syntax"], [20, "syntax"], [21, "syntax"], [23, "syntax"]], "Shortcut for if statement (Short-hand if or one-line if)": [[18, "shortcut-for-if-statement-short-hand-if-or-one-line-if"]], "The Difference\u2026": [[18, "the-difference"]], "Python if-else statement": [[19, "python-if-else-statement"]], "Syntax :": [[19, "syntax"], [22, "syntax"]], "Shortcut of if else (Short Hand if \u2026 else or One line if else)": [[19, "shortcut-of-if-else-short-hand-if-else-or-one-line-if-else"]], "The difference\u2026": [[19, "the-difference"]], "\ud83d\udcbb Exercises  \u279e <span class='label label-default'>List</span>": [[19, "exercises-list"], [28, "exercises-list"]], "Python if-elif-else statement": [[20, "python-if-elif-else-statement"]], "if-elif-else statements with logical operators": [[20, "if-elif-else-statements-with-logical-operators"]], "if-elif-else statements and Logical Operator": [[20, "if-elif-else-statements-and-logical-operator"]], "if-elif-else statements or Logical Operator": [[20, "if-elif-else-statements-or-logical-operator"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>List</span>": [[20, "exercises-list"], [22, "exercises-list"]], "Python Nested if statement": [[21, "python-nested-if-statement"]], "Example 1:": [[21, "example-1"], [62, "example-1"]], "Example 2:": [[21, "example-2"], [62, "example-2"]], "Loops in Python": [[22, "loops-in-python"], [23, "loops-in-python"]], "Python for Loop": [[22, "python-for-loop"]], "What is for loop in Python?": [[22, "what-is-for-loop-in-python"]], "Why use for loop?": [[22, "why-use-for-loop"]], "for loop with range() function": [[22, "for-loop-with-range-function"]], "for loop with if-else": [[22, "for-loop-with-if-else"]], "for loop with else": [[22, "for-loop-with-else"]], "Using Control Statement in for loops in Python": [[22, "using-control-statement-in-for-loops-in-python"]], "a) break in for loop": [[22, "a-break-in-for-loop"]], "b) continue in for loop": [[22, "b-continue-in-for-loop"]], "c) pass in for loop": [[22, "c-pass-in-for-loop"]], "Reverse for loop": [[22, "reverse-for-loop"]], "Backward Iteration using the reversed() function": [[22, "backward-iteration-using-the-reversed-function"]], "Reverse for loop using range()": [[22, "reverse-for-loop-using-range"]], "Nested for loops": [[22, "nested-for-loops"]], "for loop inside for loop": [[22, "for-loop-inside-for-loop"]], "Example: Nested for loop": [[22, "example-nested-for-loop"]], "Example: Nested for loop to print pattern": [[22, "example-nested-for-loop-to-print-pattern"]], "while loop inside for loop": [[22, "while-loop-inside-for-loop"]], "for  loop in one line": [[22, "for-loop-in-one-line"]], "Accessing the index in for loop": [[22, "accessing-the-index-in-for-loop"]], "Iterate String using for loop": [[22, "iterate-string-using-for-loop"]], "Iterate List using for loop": [[22, "iterate-list-using-for-loop"]], "Iterate Tuple using for loop": [[22, "iterate-tuple-using-for-loop"]], "Iterate Dictionary using for loop": [[22, "iterate-dictionary-using-for-loop"]], "Iterate Set using for loop": [[22, "iterate-set-using-for-loop"]], "Python while Loop": [[23, "python-while-loop"]], "What is while loop in Python?": [[23, "what-is-while-loop-in-python"]], "Why and When to use while loop in Python": [[23, "why-and-when-to-use-while-loop-in-python"]], "while loop with if-else": [[23, "while-loop-with-if-else"]], "while loop with else": [[23, "while-loop-with-else"]], "Using Control Statement in while loops in Python": [[23, "using-control-statement-in-while-loops-in-python"]], "a) break in while loop": [[23, "a-break-in-while-loop"]], "b) continue in while loop": [[23, "b-continue-in-while-loop"]], "c) pass in while loop": [[23, "c-pass-in-while-loop"]], "Reverse while loop": [[23, "reverse-while-loop"]], "Nested while loops": [[23, "nested-while-loops"]], "while loop inside while loop": [[23, "while-loop-inside-while-loop"]], "Example: Nested while loop": [[23, "example-nested-while-loop"]], "Example: Nested while loop to print the pattern": [[23, "example-nested-while-loop-to-print-the-pattern"]], "for loop inside while loop": [[23, "for-loop-inside-while-loop"]], "Iterate String using while loop": [[23, "iterate-string-using-while-loop"]], "Iterate List using while loop": [[23, "iterate-list-using-while-loop"]], "Iterate Numbers using while loop": [[23, "iterate-numbers-using-while-loop"]], "While loop in Python FAQs": [[23, "while-loop-in-python-faqs"]], "Control Statements in Python": [[24, "control-statements-in-python"]], "1. Python break statement": [[24, "python-break-statement"]], "Nested break loops": [[24, "nested-break-loops"]], "1. break Statement in Nested Loop": [[24, "break-statement-in-nested-loop"]], "2. break Statement in Outer Loop": [[24, "break-statement-in-outer-loop"]], "2. Python continue statement": [[24, "python-continue-statement"]], "continue statement in while loop": [[24, "continue-statement-in-while-loop"]], "continue statement with else statements": [[24, "continue-statement-with-else-statements"]], "Nested continue loops": [[24, "nested-continue-loops"]], "1. continue Statement in Nested Loop": [[24, "continue-statement-in-nested-loop"]], "2. continue Statement in Outer Loop": [[24, "continue-statement-in-outer-loop"]], "Catching exceptions with continue statement": [[24, "catching-exceptions-with-continue-statement"]], "3. Python pass statement": [[24, "python-pass-statement"]], "Example:": [[24, "example"], [62, "example"]], "Control Statements in Python FAQs": [[24, "control-statements-in-python-faqs"]], "Python Numbers, Type Conversion and Mathematics": [[26, "python-numbers-type-conversion-and-mathematics"]], "Number Data Type in Python": [[26, "number-data-type-in-python"]], "Type Conversion": [[26, "type-conversion"]], "Python Decimal": [[26, "python-decimal"]], "When to use Decimal instead of float?": [[26, "when-to-use-decimal-instead-of-float"]], "Python Fractions": [[26, "python-fractions"]], "Python Mathematics": [[26, "python-mathematics"]], "What is String in Python?": [[27, "what-is-string-in-python"]], "Summary": [[27, "summary"], [28, "summary"], [29, "summary"], [30, "summary"], [31, "summary"], [104, "summary"]], "How to create a string in Python?": [[27, "how-to-create-a-string-in-python"]], "How to access characters in a string?": [[27, "how-to-access-characters-in-a-string"]], "How to slice a string in Python?": [[27, "how-to-slice-a-string-in-python"]], "Breaking appart strings": [[27, "breaking-appart-strings"]], "How to change or delete a string?": [[27, "how-to-change-or-delete-a-string"]], "Python Strings Operations": [[27, "python-strings-operations"]], "1. Basic Operators for concatenation of two or more strings": [[27, "basic-operators-for-concatenation-of-two-or-more-strings"]], "String Concatenation Operator (+)": [[27, "string-concatenation-operator"]], "Python String Replication Operator (*)": [[27, "python-string-replication-operator"]], "Iterating Through a string": [[27, "iterating-through-a-string"]], "2. Python String Membership Operators": [[27, "python-string-membership-operators"]], "3. Python Relational Operators": [[27, "python-relational-operators"]], "Built-in functions to Work with Python": [[27, "built-in-functions-to-work-with-python"]], "Python String Formatting": [[27, "python-string-formatting"]], "Escape Sequence": [[27, "escape-sequence"]], "Here is a list of all the escape sequences supported by Python.": [[27, "here-is-a-list-of-all-the-escape-sequences-supported-by-python"]], "Raw String to ignore escape sequence": [[27, "raw-string-to-ignore-escape-sequence"]], "The format() Method for Formatting Strings": [[27, "the-format-method-for-formatting-strings"]], "Old style formatting": [[27, "old-style-formatting"]], "Common Python String Methods": [[27, "common-python-string-methods"]], "Inspecting Strings": [[27, "inspecting-strings"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>String</span>": [[27, "exercises-string"]], "Advanced string processing": [[27, "advanced-string-processing"]], "Python List": [[28, "python-list"]], "What is List in Python?": [[28, "what-is-list-in-python"]], "Creating Python List": [[28, "creating-python-list"]], "Access elements from a list": [[28, "access-elements-from-a-list"]], "List Index": [[28, "list-index"]], "Negative indexing": [[28, "negative-indexing"]], "How to slice lists in Python?": [[28, "how-to-slice-lists-in-python"]], "Python List Operations": [[28, "python-list-operations"]], "Add/Change List Elements": [[28, "add-change-list-elements"]], "Delete/Remove List Elements": [[28, "delete-remove-list-elements"]], "Python Built-in List Functions": [[28, "python-built-in-list-functions"]], "all(list) - The method all() method returns True when all elements in the given iterable are true. If not, it returns False.": [[28, "all-list-the-method-all-method-returns-true-when-all-elements-in-the-given-iterable-are-true-if-not-it-returns-false"]], "any(list) - any() function returns True if any element of an iterable is True. If not, any() returns False.": [[28, "any-list-any-function-returns-true-if-any-element-of-an-iterable-is-true-if-not-any-returns-false"]], "sorted(dict) - The sorted() function sorts the elements of a given iterable in a specific order (either ascending or descending) and returns the sorted iterable as a list.": [[28, "sorted-dict-the-sorted-function-sorts-the-elements-of-a-given-iterable-in-a-specific-order-either-ascending-or-descending-and-returns-the-sorted-iterable-as-a-list"], [29, "sorted-dict-the-sorted-function-sorts-the-elements-of-a-given-iterable-in-a-specific-order-either-ascending-or-descending-and-returns-the-sorted-iterable-as-a-list"], [30, "sorted-dict-the-sorted-function-sorts-the-elements-of-a-given-iterable-in-a-specific-order-either-ascending-or-descending-and-returns-the-sorted-iterable-as-a-list"]], "min(list) - this method is used to get min value from the list. In Python3 lists element\u2019s type should be same otherwise compiler throw type Error.": [[28, "min-list-this-method-is-used-to-get-min-value-from-the-list-in-python3-lists-elements-type-should-be-same-otherwise-compiler-throw-type-error"]], "max(list) - The max() method returns the elements from the list with maximum value.": [[28, "max-list-the-max-method-returns-the-elements-from-the-list-with-maximum-value"]], "len(list) - The len() method returns the number of elements in the list.": [[28, "len-list-the-len-method-returns-the-number-of-elements-in-the-list"]], "Python List Methods": [[28, "python-list-methods"]], "append() - The append() method adds an item to the end of the list.": [[28, "append-the-append-method-adds-an-item-to-the-end-of-the-list"]], "extend() - The extend() method adds all the elements of an iterable (list, tuple, string etc.) to the end of the list.": [[28, "extend-the-extend-method-adds-all-the-elements-of-an-iterable-list-tuple-string-etc-to-the-end-of-the-list"]], "insert() - The insert() method inserts an element to the list at the specified index.": [[28, "insert-the-insert-method-inserts-an-element-to-the-list-at-the-specified-index"]], "remove() - The remove() method removes the first matching element (which is passed as an argument) from the list.": [[28, "remove-the-remove-method-removes-the-first-matching-element-which-is-passed-as-an-argument-from-the-list"]], "pop() - The pop() method removes the item at the given index from the list and returns the removed item.": [[28, "pop-the-pop-method-removes-the-item-at-the-given-index-from-the-list-and-returns-the-removed-item"]], "clear() - The clear() method removes all items from the list.": [[28, "clear-the-clear-method-removes-all-items-from-the-list"]], "index() - The index() method returns the index of the specified element in the list.": [[28, "index-the-index-method-returns-the-index-of-the-specified-element-in-the-list"]], "count() - The count() method returns the number of times the specified element appears in the list.": [[28, "count-the-count-method-returns-the-number-of-times-the-specified-element-appears-in-the-list"]], "sort()  - The sort() method sorts the elements of a given list in a specific ascending or descending order.": [[28, "sort-the-sort-method-sorts-the-elements-of-a-given-list-in-a-specific-ascending-or-descending-order"]], "reverse()  - The reverse() method reverses the elements of the list.": [[28, "reverse-the-reverse-method-reverses-the-elements-of-the-list"]], "copy()  - The copy() method returns a shallow copy of the list.": [[28, "copy-the-copy-method-returns-a-shallow-copy-of-the-list"]], "List Comprehension: Elegant way to create new List": [[28, "list-comprehension-elegant-way-to-create-new-list"]], "Other List Operations in Python": [[28, "other-list-operations-in-python"]], "1. List Membership Test": [[28, "list-membership-test"]], "2. Iterating Through a List": [[28, "iterating-through-a-list"]], "3. Other List Operations in Python": [[28, "id1"]], "Python Tuple": [[29, "python-tuple"]], "What is Tuple in Python?": [[29, "what-is-tuple-in-python"]], "Creating Python Tuple": [[29, "creating-python-tuple"]], "Access Tuple Elements": [[29, "access-tuple-elements"]], "1. Indexing": [[29, "indexing"]], "2. Negative Indexing": [[29, "negative-indexing"]], "3. Slicing": [[29, "slicing"]], "Tuple Operations": [[29, "tuple-operations"]], "1. Changing a Tuple": [[29, "changing-a-tuple"]], "2. Deleting a Tuple": [[29, "deleting-a-tuple"]], "Python Built-in Tuple Functions": [[29, "python-built-in-tuple-functions"]], "len(tuple) - The len() method returns the number of elements in the tuple.": [[29, "len-tuple-the-len-method-returns-the-number-of-elements-in-the-tuple"]], "max(tuple) - The max() method returns the elements from the tuple with maximum value. Type of element should be same otherwise complier throw TypeError.": [[29, "max-tuple-the-max-method-returns-the-elements-from-the-tuple-with-maximum-value-type-of-element-should-be-same-otherwise-complier-throw-typeerror"]], "min(tuple) - The min() method returns the elements from the tuple with minimum value. Type of element should be same otherwise complier throw TypeError.": [[29, "min-tuple-the-min-method-returns-the-elements-from-the-tuple-with-minimum-value-type-of-element-should-be-same-otherwise-complier-throw-typeerror"]], "tuple(seq) - The tuple() method converts a list of items into tuples.": [[29, "tuple-seq-the-tuple-method-converts-a-list-of-items-into-tuples"]], "Tuple Methods": [[29, "tuple-methods"]], "Other Tuple Operations": [[29, "other-tuple-operations"]], "1. Tuple Membership Test": [[29, "tuple-membership-test"]], "2. Iterating Through a Tuple": [[29, "iterating-through-a-tuple"]], "Why should we use Tuple? (Advantages of Tuple)": [[29, "why-should-we-use-tuple-advantages-of-tuple"]], "Advantages of Tuple over List": [[29, "advantages-of-tuple-over-list"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Tuple</span>": [[29, "exercises-tuple"]], "Python Dictionary": [[30, "python-dictionary"]], "What is Dictionary in Python?": [[30, "what-is-dictionary-in-python"]], "Creating Python Dictionary": [[30, "creating-python-dictionary"]], "Accessing Elements from Dictionary": [[30, "accessing-elements-from-dictionary"]], "Changing and Adding Dictionary elements": [[30, "changing-and-adding-dictionary-elements"]], "Removing elements from Dictionary": [[30, "removing-elements-from-dictionary"]], "Dictionary Built-in Dictionary Functions": [[30, "dictionary-built-in-dictionary-functions"]], "all(dict) - The all() function returns True when all elements in the given iterable are true. If not, it returns False.": [[30, "all-dict-the-all-function-returns-true-when-all-elements-in-the-given-iterable-are-true-if-not-it-returns-false"]], "any(dict) - The any() function returns True if any element of an iterable is True. If not, any() returns False.": [[30, "any-dict-the-any-function-returns-true-if-any-element-of-an-iterable-is-true-if-not-any-returns-false"]], "len(dict) - The len() function gives the total length of the dictionary. This would be equal to the number of items in the dictionary.": [[30, "len-dict-the-len-function-gives-the-total-length-of-the-dictionary-this-would-be-equal-to-the-number-of-items-in-the-dictionary"]], "str(dict) - The str() function produces a printable string representation of a dictionary.": [[30, "str-dict-the-str-function-produces-a-printable-string-representation-of-a-dictionary"]], "type() - The type() function returns the type of the passed variable. If passed variable is dictionary then it would return a dictionary type.": [[30, "type-the-type-function-returns-the-type-of-the-passed-variable-if-passed-variable-is-dictionary-then-it-would-return-a-dictionary-type"]], "Python Dictionary Methods": [[30, "python-dictionary-methods"]], "clear() - The method clear() removes all items from the dictionary.": [[30, "clear-the-method-clear-removes-all-items-from-the-dictionary"]], "copy() - The method copy() returns a shallow copy of the dictionary.": [[30, "copy-the-method-copy-returns-a-shallow-copy-of-the-dictionary"]], "itmes() - The method items() returns a list of dict\u2019s (key, value) tuple pairs.": [[30, "itmes-the-method-items-returns-a-list-of-dicts-key-value-tuple-pairs"]], "keys() - The method keys() returns a list of all the available keys in the dictionary.": [[30, "keys-the-method-keys-returns-a-list-of-all-the-available-keys-in-the-dictionary"]], "fromkeys() - The method fromkeys() creates a new dictionary with keys from seq and values set to value.": [[30, "fromkeys-the-method-fromkeys-creates-a-new-dictionary-with-keys-from-seq-and-values-set-to-value"]], "setdefault() - The method setdefault() is similar to get but will set dict[key] = default if key is not already in dict.": [[30, "setdefault-the-method-setdefault-is-similar-to-get-but-will-set-dict-key-default-if-key-is-not-already-in-dict"]], "update() - The method update() adds dictionary dict2\u2019s key-values pairs in to dict. This function does not return anything.": [[30, "update-the-method-update-adds-dictionary-dict2s-key-values-pairs-in-to-dict-this-function-does-not-return-anything"]], "value() - The method values() returns a list of all the values available in a given dictionary.": [[30, "value-the-method-values-returns-a-list-of-all-the-values-available-in-a-given-dictionary"]], "Python Dictionary Comprehension": [[30, "python-dictionary-comprehension"]], "Other Dictionary Operations": [[30, "other-dictionary-operations"]], "1. Dictionary Membership Test": [[30, "dictionary-membership-test"]], "2. Iterating Through a Dictionary": [[30, "iterating-through-a-dictionary"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Dictionary</span>": [[30, "exercises-dictionary"]], "Python Sets": [[31, "python-sets"]], "What is Set in Python?": [[31, "what-is-set-in-python"]], "How Are Sets Better Than Other DataTypes?": [[31, "how-are-sets-better-than-other-datatypes"]], "Creating Python Sets": [[31, "creating-python-sets"]], "Creating an empty set is a bit tricky.": [[31, "creating-an-empty-set-is-a-bit-tricky"]], "Modifying a set in Python": [[31, "modifying-a-set-in-python"]], "Removing elements from a set": [[31, "removing-elements-from-a-set"]], "Python Set Operations": [[31, "python-set-operations"]], "Set Union": [[31, "set-union"]], "Set Intersection": [[31, "set-intersection"]], "Set Difference": [[31, "set-difference"]], "Set Symmetric Difference": [[31, "set-symmetric-difference"]], "Built-in Functions with Set": [[31, "built-in-functions-with-set"]], "Other Python Set Methods": [[31, "other-python-set-methods"]], "Other Set Operations": [[31, "other-set-operations"]], "1. Set Membership Test": [[31, "set-membership-test"]], "2. Iterating Through a Set": [[31, "iterating-through-a-set"]], "Python Frozenset": [[31, "python-frozenset"]], "Frozenset methods": [[31, "frozenset-methods"]], "Other Frozenset methods": [[31, "other-frozenset-methods"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Sets</span>": [[31, "exercises-sets"]], "Python List Comprehension": [[32, "python-list-comprehension"]], "List Comprehension vs String vs For Loop in Python": [[32, "list-comprehension-vs-string-vs-for-loop-in-python"]], "Syntax of List Comprehension": [[32, "syntax-of-list-comprehension"]], "Conditionals in List Comprehension": [[32, "conditionals-in-list-comprehension"]], "For instance if you want to generate a list of numbers": [[32, "for-instance-if-you-want-to-generate-a-list-of-numbers"]], "List comprehension can be combined with if statement": [[32, "list-comprehension-can-be-combined-with-if-statement"]], "List Comprehensions vs Lambda functions": [[32, "list-comprehensions-vs-lambda-functions"]], "Lambda Function": [[32, "lambda-function"]], "Creating a Lambda Function": [[32, "creating-a-lambda-function"]], "Nested Loops in List Comprehension": [[32, "nested-loops-in-list-comprehension"]], "Key Points to Remember": [[32, "key-points-to-remember"], [68, "key-points-to-remember"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>List Comprehension</span>": [[32, "exercises-list-comprehension"]], "Python datetime": [[34, "python-datetime"]], "Example 1: Get Current Date and Time": [[34, "example-1-get-current-date-and-time"]], "Example 2: Get Current Date": [[34, "example-2-get-current-date"]], "What\u2019s inside datetime?": [[34, "whats-inside-datetime"]], "datetime.date Class": [[34, "datetime-date-class"]], "Example 3: Date object to represent a date": [[34, "example-3-date-object-to-represent-a-date"]], "Example 4: Get current date": [[34, "example-4-get-current-date"]], "Example 5: Get date from a timestamp": [[34, "example-5-get-date-from-a-timestamp"]], "Example 6: Print today\u2019s year, month and day": [[34, "example-6-print-todays-year-month-and-day"]], "datetime.time": [[34, "datetime-time"]], "Example 7: Time object to represent time": [[34, "example-7-time-object-to-represent-time"]], "Example 8: Print hour, minute, second and microsecond": [[34, "example-8-print-hour-minute-second-and-microsecond"]], "datetime.datetime": [[34, "datetime-datetime"]], "Example 9: Python datetime object": [[34, "example-9-python-datetime-object"]], "Example 10: Print year, month, hour, minute and timestamp": [[34, "example-10-print-year-month-hour-minute-and-timestamp"]], "datetime.timedelta": [[34, "datetime-timedelta"]], "Example 11: Difference between two dates and times": [[34, "example-11-difference-between-two-dates-and-times"]], "Example 12: Difference between two timedelta objects": [[34, "example-12-difference-between-two-timedelta-objects"]], "Example 13: Printing negative timedelta object": [[34, "example-13-printing-negative-timedelta-object"]], "Example 14: Time duration in seconds": [[34, "example-14-time-duration-in-seconds"]], "Python format datetime": [[34, "python-format-datetime"]], "Python strftime() - datetime object to string": [[34, "python-strftime-datetime-object-to-string"]], "Example 15: Format date using strftime()": [[34, "example-15-format-date-using-strftime"]], "Python strptime() - string to datetime": [[34, "python-strptime-string-to-datetime"]], "Example 16: strptime()": [[34, "example-16-strptime"]], "Handling timezone in Python": [[34, "handling-timezone-in-python"]], "Python strftime()": [[35, "python-strftime"]], "Example 1: datetime to string using strftime()": [[35, "example-1-datetime-to-string-using-strftime"]], "How strftime() works?": [[35, "how-strftime-works"]], "Example 2: Creating string from a timestamp": [[35, "example-2-creating-string-from-a-timestamp"]], "Format Code List": [[35, "format-code-list"], [36, "format-code-list"]], "Example 3: Locale\u2019s appropriate date and time": [[35, "example-3-locales-appropriate-date-and-time"]], "Python strptime()": [[36, "python-strptime"]], "Example 1: string to datetime object": [[36, "example-1-string-to-datetime-object"]], "How strptime() works?": [[36, "how-strptime-works"]], "Example 2: string to datetime object": [[36, "example-2-string-to-datetime-object"]], "ValueError in strptime()": [[36, "valueerror-in-strptime"]], "How to get current date and time in Python?": [[37, "how-to-get-current-date-and-time-in-python"]], "Example 1: Python get today\u2019s date": [[37, "example-1-python-get-todays-date"]], "Example 2: Current date in different formats": [[37, "example-2-current-date-in-different-formats"]], "Example 3: Get the current date and time": [[37, "example-3-get-the-current-date-and-time"]], "Python Get Current time": [[38, "python-get-current-time"]], "Example 1: Current time using datetime object": [[38, "example-1-current-time-using-datetime-object"]], "Example 2: Current time using time module": [[38, "example-2-current-time-using-time-module"]], "Example 3: Current time of a timezone": [[38, "example-3-current-time-of-a-timezone"]], "Example 4: Time Objects to Represent Time": [[38, "example-4-time-objects-to-represent-time"]], "Example 5: Difference Between Two Points in Time Using": [[38, "example-5-difference-between-two-points-in-time-using"]], "Example 6: Difference Between Two Points in Time Using timedelata": [[38, "example-6-difference-between-two-points-in-time-using-timedelata"]], "Python timestamp to datetime and vice-versa": [[39, "python-timestamp-to-datetime-and-vice-versa"]], "Example 1: Python timestamp to datetime": [[39, "example-1-python-timestamp-to-datetime"]], "Example 2: Python datetime to timestamp": [[39, "example-2-python-datetime-to-timestamp"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Date and Time</span>": [[39, "exercises-date-and-time"]], "Python time Module": [[40, "python-time-module"]], "Python time.time()": [[40, "python-time-time"]], "Python time.ctime()": [[40, "python-time-ctime"]], "Python time.sleep()": [[40, "python-time-sleep"]], "time.struct_time Class": [[40, "time-struct-time-class"]], "Python time.localtime()": [[40, "python-time-localtime"]], "Python time.gmtime()": [[40, "python-time-gmtime"]], "Python time.mktime()": [[40, "python-time-mktime"]], "Python time.asctime()": [[40, "python-time-asctime"]], "Python time.strftime()": [[40, "python-time-strftime"]], "Python time.strptime()": [[40, "python-time-strptime"]], "Python sleep()": [[41, "python-sleep"]], "Example 1: Python sleep()": [[41, "example-1-python-sleep"]], "Example 2: Python create a digital clock": [[41, "example-2-python-create-a-digital-clock"]], "Multithreading in Python": [[41, "multithreading-in-python"]], "Example 3: Python multithreading": [[41, "example-3-python-multithreading"]], "time.sleep() in multithreaded programs": [[41, "time-sleep-in-multithreaded-programs"]], "Example 4: sleep() in a multithreaded program": [[41, "example-4-sleep-in-a-multithreaded-program"]], "Python File I/O": [[43, "python-file-i-o"]], "Files": [[43, "files"]], "1. Opening Files in Python": [[43, "opening-files-in-python"]], "2. Closing Files in Python": [[43, "closing-files-in-python"]], "The file Object Attributes": [[43, "the-file-object-attributes"]], "3. Writing to Files in Python": [[43, "writing-to-files-in-python"]], "4. Reading Files in Python": [[43, "reading-files-in-python"]], "File Positions": [[43, "file-positions"]], "Python File Methods": [[43, "python-file-methods"]], "Deleting Files": [[43, "deleting-files"]], "File Types": [[43, "file-types"]], "File with txt Extension": [[43, "file-with-txt-extension"]], "File with json Extension": [[43, "file-with-json-extension"]], "Changing JSON to Dictionary": [[43, "changing-json-to-dictionary"]], "Changing Dictionary to JSON": [[43, "changing-dictionary-to-json"]], "Saving as JSON File": [[43, "saving-as-json-file"]], "File with csv Extension": [[43, "file-with-csv-extension"]], "File with xlsx Extension": [[43, "file-with-xlsx-extension"]], "File with xml Extension": [[43, "file-with-xml-extension"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Files</span>": [[43, "exercises-files"]], "Python Directory and Files Management": [[44, "python-directory-and-files-management"]], "Python Directory": [[44, "python-directory"]], "Get Current Directory getcwd() -": [[44, "get-current-directory-getcwd"]], "Changing Directory chdir() -": [[44, "changing-directory-chdir"]], "List Directories and Files listdir() -": [[44, "list-directories-and-files-listdir"]], "Making a New Directory mkdir() -": [[44, "making-a-new-directory-mkdir"]], "Renaming a Directory or a File rename() -": [[44, "renaming-a-directory-or-a-file-rename"]], "Removing a Directory or a File remove() and rmdir() -": [[44, "removing-a-directory-or-a-file-remove-and-rmdir"]], "Python Errors and Built-in Exceptions": [[45, "python-errors-and-built-in-exceptions"]], "1. Python Syntax Errors": [[45, "python-syntax-errors"]], "2. Python Logical Errors (Exceptions)": [[45, "python-logical-errors-exceptions"]], "3. Python NameError": [[45, "python-nameerror"]], "4. Python IndexError": [[45, "python-indexerror"]], "5. Python ModuleNotFoundError": [[45, "python-modulenotfounderror"]], "6. Python AttributeError": [[45, "python-attributeerror"]], "7. Python KeyError": [[45, "python-keyerror"]], "8. Python TypeError": [[45, "python-typeerror"]], "9. Python ValueError": [[45, "python-valueerror"]], "Python Built-in Exceptions": [[45, "python-built-in-exceptions"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Python Errors</span>": [[45, "exercises-python-errors"]], "Python Exceptions Handling Using try, except and finally statement": [[46, "python-exceptions-handling-using-try-except-and-finally-statement"]], "Exceptions in Python": [[46, "exceptions-in-python"]], "Catching Exceptions in Python": [[46, "catching-exceptions-in-python"]], "Catching Specific Exceptions in Python": [[46, "catching-specific-exceptions-in-python"]], "Raising Exceptions in Python": [[46, "raising-exceptions-in-python"]], "Python try with else clause": [[46, "python-try-with-else-clause"]], "The except Clause with No Exceptions": [[46, "the-except-clause-with-no-exceptions"]], "The except Clause with Multiple Exceptions": [[46, "the-except-clause-with-multiple-exceptions"]], "Python try-finally Clause": [[46, "python-try-finally-clause"]], "Argument of an Exception": [[46, "argument-of-an-exception"]], "Raising an Exception": [[46, "raising-an-exception"]], "Writing the \u201cHello, World!\u201d Program": [[46, "writing-the-hello-world-program"], [62, "writing-the-hello-world-program"]], "Packing and Unpacking Arguments in Python": [[46, "packing-and-unpacking-arguments-in-python"]], "Unpacking": [[46, "unpacking"]], "Unpacking Lists": [[46, "unpacking-lists"]], "Unpacking List or a Tuple": [[46, "unpacking-list-or-a-tuple"]], "Unpacking Dictionaries": [[46, "unpacking-dictionaries"]], "Packing": [[46, "packing"]], "Packing Lists": [[46, "packing-lists"]], "Packing Dictionaries": [[46, "packing-dictionaries"]], "Spreading in Python": [[46, "spreading-in-python"]], "Enumerate": [[46, "enumerate"]], "Zip": [[46, "zip"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Exceptions Handling</span>": [[46, "exercises-exceptions-handling"]], "Python Custom Exceptions": [[47, "python-custom-exceptions"]], "Creating Custom Exceptions": [[47, "creating-custom-exceptions"]], "Example: User-Defined Exception in Python": [[47, "example-user-defined-exception-in-python"]], "Customizing Exception Classes": [[47, "customizing-exception-classes"]], "What is a function in Python?": [[49, "what-is-a-function-in-python"]], "Types of Functions": [[49, "types-of-functions"]], "Defining a Function": [[49, "defining-a-function"]], "Defining a function without any parameters": [[49, "defining-a-function-without-any-parameters"]], "Defining a function without parameters and return value": [[49, "defining-a-function-without-parameters-and-return-value"]], "Defining a function with parameters": [[49, "defining-a-function-with-parameters"]], "Single Parameter:": [[49, "single-parameter"]], "Two Parameter:": [[49, "two-parameter"]], "Defining a function with parameters and return value": [[49, "defining-a-function-with-parameters-and-return-value"]], "Function return Statement": [[49, "function-return-statement"]], "Return Single Value": [[49, "return-single-value"]], "Passing Arguments with Key and Value": [[49, "passing-arguments-with-key-and-value"]], "Return Multiple Values": [[49, "return-multiple-values"]], "Return Boolean Values": [[49, "return-boolean-values"]], "Return a List": [[49, "return-a-list"]], "How to call a function in python?": [[49, "how-to-call-a-function-in-python"]], "Docstrings": [[49, "docstrings"]], "Function pass Statement": [[49, "function-pass-statement"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Functions</span>": [[49, "exercises-functions"]], "Python Global, Local and Nonlocal variables": [[50, "python-global-local-and-nonlocal-variables"]], "Global Variables": [[50, "global-variables"]], "Local Variables": [[50, "local-variables"]], "Global and local variables": [[50, "global-and-local-variables"]], "Nonlocal Variables": [[50, "nonlocal-variables"]], "Python global Keyword": [[51, "python-global-keyword"]], "What is global keyword?": [[51, "what-is-global-keyword"]], "Rules of global Keyword": [[51, "rules-of-global-keyword"]], "Use of global Keyword": [[51, "use-of-global-keyword"]], "Global Variables Across Python Modules": [[51, "global-variables-across-python-modules"]], "Example : Share a global Variable Across Python Modules": [[51, "example-share-a-global-variable-across-python-modules"]], "Global in Nested Functions": [[51, "global-in-nested-functions"]], "Function Argument and Parameter": [[52, "function-argument-and-parameter"]], "Python Function Arguments": [[52, "python-function-arguments"]], "Positional Arguments (Basic)": [[52, "positional-arguments-basic"]], "Variable Function Arguments": [[52, "variable-function-arguments"]], "Python Default Arguments": [[52, "python-default-arguments"]], "Python Keyword Arguments": [[52, "python-keyword-arguments"]], "Python Arbitrary/Variable-length Arguments": [[52, "python-arbitrary-variable-length-arguments"]], "Function as a Parameter of Another Function": [[52, "function-as-a-parameter-of-another-function"]], "Python Recursion": [[53, "python-recursion"]], "What is recursion?": [[53, "what-is-recursion"]], "Python Recursive Function": [[53, "python-recursive-function"]], "Advantages of Recursion": [[53, "advantages-of-recursion"]], "Disadvantages of Recursion": [[53, "disadvantages-of-recursion"]], "Python Anonymous/lambda Function": [[54, "python-anonymous-lambda-function"]], "What are lambda functions in Python?": [[54, "what-are-lambda-functions-in-python"]], "Use of lambda Function in python": [[54, "use-of-lambda-function-in-python"]], "lambda function use with filter()": [[54, "lambda-function-use-with-filter"]], "lambda function with map()": [[54, "lambda-function-with-map"]], "lambda function with reduce()": [[54, "lambda-function-with-reduce"]], "Python Modules": [[55, "python-modules"]], "What are modules in Python?": [[55, "what-are-modules-in-python"]], "Advantage": [[55, "advantage"]], "Creating a module in Python": [[55, "creating-a-module-in-python"]], "How to import modules in Python?": [[55, "how-to-import-modules-in-python"]], "Python import statement": [[55, "python-import-statement"]], "import multiple modules": [[55, "import-multiple-modules"]], "Python from-import statement": [[55, "python-from-import-statement"]], "import with renaming": [[55, "import-with-renaming"]], "import all names": [[55, "import-all-names"]], "Python Module Search Path": [[55, "python-module-search-path"]], "Reloading a module": [[55, "reloading-a-module"]], "The dir() built-in function": [[55, "the-dir-built-in-function"]], "Python Modules List": [[55, "python-modules-list"]], "Python Built-In Modules Examples": [[55, "python-built-in-modules-examples"]], "Example Using os Module": [[55, "example-using-os-module"]], "Example Using sys Module": [[55, "example-using-sys-module"]], "Example Using operator Module": [[55, "example-using-operator-module"]], "Example Using string Module": [[55, "example-using-string-module"]], "Example Using decimal Module": [[55, "example-using-decimal-module"]], "Example Using random Module": [[55, "example-using-random-module"]], "Comparision operators in Python": [[55, "comparision-operators-in-python"]], "Example Using math Module": [[55, "example-using-math-module"]], "math module Functions:": [[55, "math-module-functions"]], "Constants  -": [[55, "constants"]], "Example Using statistics Module": [[55, "example-using-statistics-module"]], "Wrap up": [[55, "wrap-up"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Module</span>": [[55, "exercises-module"]], "Python Random Module": [[56, "python-random-module"]], "Python Mathematical Functions": [[57, "python-mathematical-functions"]], "What is math module in Python?": [[57, "what-is-math-module-in-python"]], "Functions in Python Math Module": [[57, "functions-in-python-math-module"]], "Python Package": [[58, "python-package"]], "What are packages?": [[58, "what-are-packages"]], "Importing module from a package": [[58, "importing-module-from-a-package"]], "Python Docstrings": [[59, "python-docstrings"]], "Python Comments vs Docstrings": [[59, "python-comments-vs-docstrings"]], "Python Comments": [[59, "python-comments"]], "Python Comments Using Strings": [[59, "python-comments-using-strings"]], "Python docstrings": [[59, "id1"]], "Python __doc__ attribute": [[59, "python-doc-attribute"]], "Single-line docstrings in Python": [[59, "single-line-docstrings-in-python"]], "Multi-line Docstrings in Python": [[59, "multi-line-docstrings-in-python"]], "1. Docstrings for Python Modules": [[59, "docstrings-for-python-modules"]], "2. Docstrings for Python Functions": [[59, "docstrings-for-python-functions"]], "3. Docstrings for Python Classes": [[59, "docstrings-for-python-classes"]], "Using the help() Function for Docstrings": [[59, "using-the-help-function-for-docstrings"]], "4. Docstrings for Python Scripts": [[59, "docstrings-for-python-scripts"]], "5. Docstrings for Python Packages": [[59, "docstrings-for-python-packages"]], "Docstring Formats": [[59, "docstring-formats"]], "Python User-defined Functions": [[60, "python-user-defined-functions"]], "What are user-defined functions in Python?": [[60, "what-are-user-defined-functions-in-python"]], "Advantages of user-defined functions": [[60, "advantages-of-user-defined-functions"]], "Python Hello, World": [[62, "python-hello-world"]], "Let\u2019s break down the different components of the code.": [[62, "lets-break-down-the-different-components-of-the-code"]], "Running the \u201cHello, World!\u201d Program": [[62, "running-the-hello-world-program"]], "How to print blank lines": [[62, "how-to-print-blank-lines"]], "Print end command": [[62, "print-end-command"]], "Python Keywords and Identifiers": [[63, "python-keywords-and-identifiers"]], "1. Python Keywords": [[63, "python-keywords"]], "2. Python Identifiers": [[63, "python-identifiers"]], "Rules for writing identifiers": [[63, "rules-for-writing-identifiers"]], "Things to Remember": [[63, "things-to-remember"]], "Python Statement, Indentation and Comments": [[64, "python-statement-indentation-and-comments"]], "1. Python Statement": [[64, "python-statement"]], "Multi-line statement": [[64, "multi-line-statement"]], "2. Python Indentation": [[64, "python-indentation"]], "3. Python Comments": [[64, "python-comments"]], "1. Single lined comment:": [[64, "single-lined-comment"]], "2. Inline comments": [[64, "inline-comments"]], "3. Multi lined comment:": [[64, "multi-lined-comment"]], "4. Docstrings in Python": [[64, "docstrings-in-python"]], "Help topics": [[64, "help-topics"]], "Python Variables and Constants": [[65, "python-variables-and-constants"]], "1. Python Variables": [[65, "python-variables"]], "Let us see valid variable names": [[65, "let-us-see-valid-variable-names"]], "Assigning values to Variables in Python": [[65, "assigning-values-to-variables-in-python"]], "Example 1: Declaring and assigning value to a variable": [[65, "example-1-declaring-and-assigning-value-to-a-variable"]], "Example 2: Declaring multiple variables in one line** using comma  ,  and semicolon ;": [[65, "example-2-declaring-multiple-variables-in-one-line-using-comma-and-semicolon"]], "Example 3: Changing the value of a variable": [[65, "example-3-changing-the-value-of-a-variable"]], "2. Constants": [[65, "constants"]], "Assigning value to constant in Python": [[65, "assigning-value-to-constant-in-python"]], "Example 1: Declaring and assigning value to a constant": [[65, "example-1-declaring-and-assigning-value-to-a-constant"]], "Rules and Naming Convention for Variables and constants": [[65, "rules-and-naming-convention-for-variables-and-constants"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Variables</span>": [[65, "exercises-variables"]], "Python Literals": [[66, "python-literals"]], "1. Numeric Literals": [[66, "numeric-literals"]], "Type Conversion of Numbers in Python": [[66, "type-conversion-of-numbers-in-python"]], "2. String literals (unicode character strings)": [[66, "string-literals-unicode-character-strings"]], "3. Boolean literals": [[66, "boolean-literals"]], "Special literals": [[66, "special-literals"]], "Literal Collections": [[66, "literal-collections"]], "1. Python Numbers": [[67, "python-numbers"]], "2. Python List []": [[67, "python-list"]], "3. Python Tuple ()": [[67, "python-tuple"]], "4. Python Strings": [[67, "python-strings"]], "5. Python Set {}": [[67, "python-set"]], "6. Python Dictionary {}": [[67, "python-dictionary"]], "Python Type Conversion and Type Casting": [[68, "python-type-conversion-and-type-casting"]], "1. Implicit Type Conversion": [[68, "implicit-type-conversion"]], "2. Explicit Type Conversion": [[68, "explicit-type-conversion"]], "Python Input, Output and Import": [[69, "python-input-output-and-import"]], "1. Python Output Using print() function": [[69, "python-output-using-print-function"]], "Output formatting": [[69, "output-formatting"]], "2. Python Input Using input() function": [[69, "python-input-using-input-function"]], "Accepting User Inputs (as both integer and string)": [[69, "accepting-user-inputs-as-both-integer-and-string"]], "Accepting User Inputs (only as integer)": [[69, "accepting-user-inputs-only-as-integer"]], "Practice Problem": [[69, "practice-problem"]], "Accept float input from User": [[69, "accept-float-input-from-user"]], "Get multiple input values from a user in one line": [[69, "get-multiple-input-values-from-a-user-in-one-line"]], "Accept multiline input from a user": [[69, "accept-multiline-input-from-a-user"]], "Format output strings by its positions": [[69, "format-output-strings-by-its-positions"]], "Accessing output string arguments by name": [[69, "accessing-output-string-arguments-by-name"]], "Output text alignment specifying a width": [[69, "output-text-alignment-specifying-a-width"]], "Specifying a sign while displaying output numbers": [[69, "specifying-a-sign-while-displaying-output-numbers"]], "Display output Number in various type format": [[69, "display-output-number-in-various-type-format"]], "Display numbers in floating-point format": [[69, "display-numbers-in-floating-point-format"]], "Output String justification": [[69, "output-string-justification"]], "3. Python Import function": [[69, "python-import-function"]], "Python Operators": [[70, "python-operators"]], "1. Arithmatic Operators": [[70, "arithmatic-operators"]], "Example : Arithmetic operators in Python": [[70, "example-arithmetic-operators-in-python"]], "2. Comparison/Relational operators": [[70, "comparison-relational-operators"]], "Example : Comparison operators in Python": [[70, "example-comparison-operators-in-python"]], "3. Logical/Boolean operators": [[70, "logical-boolean-operators"]], "Example : Logical operators in Python": [[70, "example-logical-operators-in-python"]], "4. Bitwise operators": [[70, "bitwise-operators"]], "5. Assignment operators": [[70, "assignment-operators"]], "6. Special operators": [[70, "special-operators"]], "1. Identity operators": [[70, "identity-operators"]], "Example : Identity operators in Python": [[70, "example-identity-operators-in-python"]], "2. Membership operators": [[70, "membership-operators"]], "Example : Membership operators in Python": [[70, "example-membership-operators-in-python"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Operators</span>": [[70, "exercises-operators"]], "Python Namespace and Scope": [[71, "python-namespace-and-scope"]], "What is Name in Python?": [[71, "what-is-name-in-python"]], "What is a Namespace in Python?": [[71, "what-is-a-namespace-in-python"]], "Python Variable Scope": [[71, "python-variable-scope"]], "Data structures and algorithms": [[72, "data-structures-and-algorithms"]], "Unpacking a sequence into separate variables": [[72, "unpacking-a-sequence-into-separate-variables"]], "Differences Between Interpreter and Compiler": [[73, "differences-between-interpreter-and-compiler"]], "What is Interpreter?": [[73, "what-is-interpreter"]], "What is Compiler?": [[73, "what-is-compiler"]], "Programming Steps Comparision:": [[73, "programming-steps-comparision"]], "Interpreter Vs Compiler": [[73, "interpreter-vs-compiler"]], "HIGH-LEVEL LANGUAGES": [[73, "high-level-languages"]], "MACHINE CODE": [[73, "machine-code"]], "OBJECT CODE": [[73, "object-code"]], "Java is both Compiled and Interpreted.": [[73, "java-is-both-compiled-and-interpreted"]], "KEY DIFFERENCE": [[73, "key-difference"]], "KEY SIMILARITIES": [[73, "key-similarities"]], "Python OOPs Concepts": [[76, "python-oops-concepts"]], "Object Oriented Programming": [[76, "object-oriented-programming"]], "Class": [[76, "class"]], "Object": [[76, "object"]], "Class Constructor": [[76, "class-constructor"]], "Instance Variables and Methods": [[76, "instance-variables-and-methods"]], "Object Method": [[76, "object-method"]], "Object Default Methods": [[76, "object-default-methods"]], "Method to Modify Class Default Values": [[76, "method-to-modify-class-default-values"]], "Inheritance": [[76, "inheritance"]], "Use of inheritance": [[76, "use-of-inheritance"]], "Overriding parent method": [[76, "overriding-parent-method"]], "Encapsulation": [[76, "encapsulation"]], "Need of Encapsulation": [[76, "need-of-encapsulation"]], "Polymorphism": [[76, "polymorphism"]], "Key Points to Remember:": [[76, "key-points-to-remember"]], "\ud83d\udcbb Exercises \u279e <span class='label label-default'>Objects and Classes</span>": [[76, "exercises-objects-and-classes"]], "you output should look like this:": [[76, "you-output-should-look-like-this"]], "Python  Classes and Objects": [[77, "python-classes-and-objects"]], "Python Classes and Objects": [[77, "id1"]], "Defining a Class in Python": [[77, "defining-a-class-in-python"]], "Creating an Object in Python": [[77, "creating-an-object-in-python"]], "Constructors in Python": [[77, "constructors-in-python"]], "Types of Constructors": [[77, "types-of-constructors"]], "Creating Instance Objects": [[77, "creating-instance-objects"]], "Accessing Attributes with self Parameter": [[77, "accessing-attributes-with-self-parameter"]], "Built-In Class Attributes": [[77, "built-in-class-attributes"]], "Object Properties": [[77, "object-properties"]], "Modify Object Properties": [[77, "modify-object-properties"]], "Delete object properties": [[77, "delete-object-properties"]], "Delete Objects": [[77, "delete-objects"]], "Data Hiding": [[77, "data-hiding"]], "Python Inheritance": [[78, "python-inheritance"]], "Inheritance in Python": [[78, "inheritance-in-python"]], "Types Of Inheritance": [[78, "types-of-inheritance"]], "Python Single Inheritance": [[78, "python-single-inheritance"]], "Python Multiple Inheritance": [[78, "python-multiple-inheritance"]], "Why super() keyword": [[78, "why-super-keyword"]], "Private members of parent class": [[78, "private-members-of-parent-class"]], "Python Multilevel Inheritance": [[78, "python-multilevel-inheritance"]], "Hierarchical Inheritance": [[78, "hierarchical-inheritance"]], "Hybrid Inheritance": [[78, "hybrid-inheritance"]], "Example of Inheritance in Python": [[78, "example-of-inheritance-in-python"]], "Python super() function": [[78, "python-super-function"]], "issubclass()": [[78, "issubclass"]], "Method Overriding": [[78, "method-overriding"]], "Example of Method Overriding in Python": [[78, "example-of-method-overriding-in-python"]], "Method Resolution Order in Python": [[78, "method-resolution-order-in-python"]], "Python Operator Overloading": [[79, "python-operator-overloading"], [79, "id1"]], "Python Special Functions": [[79, "python-special-functions"]], "Overloading the + Operator": [[79, "overloading-the-operator"]], "Overloading Comparison Operators": [[79, "overloading-comparison-operators"]], "self in Python, Demystified": [[81, "self-in-python-demystified"]], "What is self in Python?": [[81, "what-is-self-in-python"]], "Why is self explicitly defined everytime?": [[81, "why-is-self-explicitly-defined-everytime"]], "What Happens Internally?": [[81, "what-happens-internally"]], "Self Can Be Avoided": [[81, "self-can-be-avoided"]], "Self Is Here To Stay": [[81, "self-is-here-to-stay"]], "__init__() is not a constructor": [[81, "init-is-not-a-constructor"]], "Use __new__ or __init__?": [[81, "use-new-or-init"]], "Sample Roles and Directives": [[83, "sample-roles-and-directives"], [87, "sample-roles-and-directives"]], "Introduction to HuggingFace": [[89, "introduction-to-huggingface"]], "Tools to get a launch \ud83d\ude80\ud83d\udc68\u200d\ud83d\ude80": [[90, "tools-to-get-a-launch"]], "Table of Contents": [[91, "table-of-contents"]], "Introduction": [[91, "introduction"]], "Installation": [[91, "installation"]], "Using Langchain": [[91, "using-langchain"]], "Importing the Package": [[91, "importing-the-package"]], "Initializing the Langchain": [[91, "initializing-the-langchain"]], "Utilizing Langchain Features": [[91, "utilizing-langchain-features"]], "Feature 1": [[91, "feature-1"]], "Feature 2": [[91, "feature-2"]], "Feature 3": [[91, "feature-3"]], "Error Handling": [[91, "error-handling"]], "Conclusion": [[91, "conclusion"]], "Langchain modules": [[92, "langchain-modules"]], "LangGraphs": [[93, "langgraphs"]], "LangServe": [[94, "langserve"]], "LangSmith": [[95, "langsmith"]], "Langchain expression language": [[96, "langchain-expression-language"]], "Python NumPy": [[97, "python-numpy"]], "Why use NumPy?": [[97, "why-use-numpy"]], "Python NumPy Array:": [[97, "python-numpy-array"], [98, "python-numpy-array"]], "How to Install NumPy?": [[97, "how-to-install-numpy"]], "Import NumPy and Check Version": [[97, "import-numpy-and-check-version"]], "NumPy Basics": [[97, "numpy-basics"], [97, "id1"]], "Placeholders": [[97, "placeholders"]], "Array": [[97, "array"]], "Copying/Sorting": [[97, "copying-sorting"]], "Array Manipulation": [[97, "array-manipulation"]], "Adding or Removing Elements": [[97, "adding-or-removing-elements"]], "Combining Arrays": [[97, "combining-arrays"]], "More": [[97, "more"], [97, "id2"]], "Slicing and Subsetting": [[97, "slicing-and-subsetting"]], "Mathematics": [[97, "mathematics"]], "Operations": [[97, "operations"]], "Comparison": [[97, "comparison"]], "Basic Statistics": [[97, "basic-statistics"]], "NumPy Array Types:": [[98, "numpy-array-types"]], "Create a NumPy Array": [[98, "create-a-numpy-array"]], "Load in NumPy Library": [[98, "load-in-numpy-library"]], "Numpy Array basics": [[98, "numpy-array-basics"]], "Array datatypes": [[98, "array-datatypes"]], "Random number": [[98, "random-number"]], "rand": [[98, "rand"]], "randn": [[98, "randn"]], "randint": [[98, "randint"]], "Array Attributes and Methods": [[98, "array-attributes-and-methods"]], "max, min, argmax, argmin": [[98, "max-min-argmax-argmin"]], "Numpy also provides many functions to create arrays:": [[98, "numpy-also-provides-many-functions-to-create-arrays"]], "Array indexing": [[99, "array-indexing"]], "Indexing a 1D array": [[99, "indexing-a-1d-array"]], "Be careful when copying arrays!!!": [[99, "be-careful-when-copying-arrays"]], "Indexing a 2D array (matrices)": [[99, "indexing-a-2d-array-matrices"]], "Summary:": [[99, "summary"], [104, "id1"]], "Integer array indexing": [[99, "integer-array-indexing"]], "Quiz time": [[99, "quiz-time"]], "Boolean array indexing": [[99, "boolean-array-indexing"]], "Array math": [[100, "array-math"]], "Universal  Array Functions (Mathematical operations)": [[100, "universal-array-functions-mathematical-operations"]], "Matrix Multiplication": [[100, "matrix-multiplication"]], "Determinant": [[100, "determinant"]], "Broadcasting": [[100, "broadcasting"]], "Arrays reorganizing": [[101, "arrays-reorganizing"]], "asarray()": [[101, "asarray"]], "arange()": [[101, "arange"]], "Reshape Data": [[101, "reshape-data"]], "Broadcasting with array reorganizing": [[101, "broadcasting-with-array-reorganizing"]], "Flatten Data": [[101, "flatten-data"]], "What is hstack?": [[101, "what-is-hstack"]], "What is vstack?": [[101, "what-is-vstack"]], "Generate Random Numbers": [[101, "generate-random-numbers"]], "Linspace": [[101, "linspace"]], "LogSpace": [[101, "logspace"]], "Statistics": [[101, "statistics"], [104, "statistics"]], "Miscellaneous": [[101, "miscellaneous"]], "Load Data from File": [[101, "load-data-from-file"]], "Boolean Masking and Advanced Indexing": [[101, "boolean-masking-and-advanced-indexing"]], "Numpy Documentation": [[101, "numpy-documentation"]], "Python NumPy Exercises": [[102, "python-numpy-exercises"]], "1. Import the numpy package under the name np and print the numpy version and the configuration (\u2605\u2606\u2606)": [[102, "import-the-numpy-package-under-the-name-np-and-print-the-numpy-version-and-the-configuration"]], "2. Convert a list of numeric value into a one-dimensional NumPy array (\u2605\u2606\u2606)": [[102, "convert-a-list-of-numeric-value-into-a-one-dimensional-numpy-array"]], "3. Create a null vector of size 9 (\u2605\u2606\u2606)": [[102, "create-a-null-vector-of-size-9"]], "4. How to find the memory size of any array (\u2605\u2606\u2606)": [[102, "how-to-find-the-memory-size-of-any-array"]], "5. How to get the documentation of the numpy add function from the command line? (\u2605\u2606\u2606)": [[102, "how-to-get-the-documentation-of-the-numpy-add-function-from-the-command-line"]], "6. Create a null vector of size 12 but the sixth value which is 1 (\u2605\u2606\u2606)": [[102, "create-a-null-vector-of-size-12-but-the-sixth-value-which-is-1"]], "7. Create a vector with values ranging from 20 to 59 (\u2605\u2606\u2606)": [[102, "create-a-vector-with-values-ranging-from-20-to-59"]], "8. Reverse a vector (first element becomes last) (\u2605\u2606\u2606)": [[102, "reverse-a-vector-first-element-becomes-last"]], "9. Create a 3x3 matrix with values ranging from 12 to 20 (\u2605\u2606\u2606)": [[102, "create-a-3x3-matrix-with-values-ranging-from-12-to-20"]], "10. Find indices of non-zero elements from [3,7,0,0,9,0] (\u2605\u2606\u2606)": [[102, "find-indices-of-non-zero-elements-from-3-7-0-0-9-0"]], "11. Create a 4x4 identity matrix (\u2605\u2606\u2606)": [[102, "create-a-4x4-identity-matrix"]], "12. Create a 2x2x2 array with random values (\u2605\u2606\u2606)": [[102, "create-a-2x2x2-array-with-random-values"]], "13. Create a 9x9 array with random values and find the minimum and maximum values (\u2605\u2606\u2606)": [[102, "create-a-9x9-array-with-random-values-and-find-the-minimum-and-maximum-values"]], "6# 6# 14. Create a random vector of size 20 and find the mean value (\u2605\u2606\u2606)": [[102, "create-a-random-vector-of-size-20-and-find-the-mean-value"]], "15. Create a 2d array with 1 on the border and 0 inside (\u2605\u2606\u2606)": [[102, "create-a-2d-array-with-1-on-the-border-and-0-inside"]], "16. How to add a border (filled with 0\u2019s) around an existing array? (\u2605\u2606\u2606)": [[102, "how-to-add-a-border-filled-with-0s-around-an-existing-array"]], "17. What is the result of the following expression? (\u2605\u2606\u2606)": [[102, "what-is-the-result-of-the-following-expression"]], "18. Create a 6x6 matrix with values 1,2,3,4 just below the diagonal (\u2605\u2606\u2606)": [[102, "create-a-6x6-matrix-with-values-1-2-3-4-just-below-the-diagonal"]], "19. Create a 6x6 matrix and fill it with a checkerboard pattern (\u2605\u2606\u2606)": [[102, "create-a-6x6-matrix-and-fill-it-with-a-checkerboard-pattern"]], "20. Consider a (8,9,10) shape array, what is the index (x,y,z) of the 100th element? (\u2605\u2606\u2606)": [[102, "consider-a-8-9-10-shape-array-what-is-the-index-x-y-z-of-the-100th-element"]], "21. Create a checkerboard 8x8 matrix using the tile function (\u2605\u2606\u2606)": [[102, "create-a-checkerboard-8x8-matrix-using-the-tile-function"]], "22. Normalize a 6x6 random matrix (\u2605\u2606\u2606)": [[102, "normalize-a-6x6-random-matrix"]], "23. find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements. (\u2605\u2606\u2606)": [[102, "find-the-number-of-elements-of-an-array-length-of-one-array-element-in-bytes-and-total-bytes-consumed-by-the-elements"]], "24. Multiply a 6x3 matrix by a 3x4 matrix (real matrix product) (\u2605\u2606\u2606)": [[102, "multiply-a-6x3-matrix-by-a-3x4-matrix-real-matrix-product"]], "25. Given a 1D array, negate all elements which are between 3 and 8, in place. (\u2605\u2606\u2606)": [[102, "given-a-1d-array-negate-all-elements-which-are-between-3-and-8-in-place"]], "26. What is the output of the following script? (\u2605\u2606\u2606)": [[102, "what-is-the-output-of-the-following-script"]], "27. Write a Python program compare two arrays using numpy (\u2605\u2606\u2606)": [[102, "write-a-python-program-compare-two-arrays-using-numpy"]], "28. What are the result of the following expressions? (\u2605\u2606\u2606)": [[102, "what-are-the-result-of-the-following-expressions"]], "29. How to round away from zero a float array ? (\u2605\u2606\u2606)": [[102, "how-to-round-away-from-zero-a-float-array"]], "30. How to find common values between two arrays? (\u2605\u2606\u2606)": [[102, "how-to-find-common-values-between-two-arrays"]], "31. How to ignore all numpy warnings (not recommended)? (\u2605\u2606\u2606)": [[102, "how-to-ignore-all-numpy-warnings-not-recommended"]], "32. Is the following expressions true? (\u2605\u2606\u2606)": [[102, "is-the-following-expressions-true"]], "33. How to get the dates of yesterday, today and tomorrow? (\u2605\u2606\u2606)": [[102, "how-to-get-the-dates-of-yesterday-today-and-tomorrow"]], "34. How to get all the dates corresponding to the month of January 2016? (\u2605\u2605\u2606)": [[102, "how-to-get-all-the-dates-corresponding-to-the-month-of-january-2016"]], "35. How to compute ((A+B)*(-A/2)) in place (without copy)? (\u2605\u2605\u2606)": [[102, "how-to-compute-a-b-a-2-in-place-without-copy"]], "36. Extract the integer part of a random array of positive numbers using 4 different methods (\u2605\u2605\u2606)": [[102, "extract-the-integer-part-of-a-random-array-of-positive-numbers-using-4-different-methods"]], "37. Create a 3x3 matrix with row values ranging from 0 to 2 (\u2605\u2605\u2606)": [[102, "create-a-3x3-matrix-with-row-values-ranging-from-0-to-2"]], "38. Consider a generator function that generates 9 integers and use it to build an array (\u2605\u2606\u2606)": [[102, "consider-a-generator-function-that-generates-9-integers-and-use-it-to-build-an-array"]], "39. Create a vector of size 10 with values ranging from 0 to 1, both excluded (\u2605\u2605\u2606)": [[102, "create-a-vector-of-size-10-with-values-ranging-from-0-to-1-both-excluded"]], "40. Create a random vector of size 10 and sort it (\u2605\u2605\u2606)": [[102, "create-a-random-vector-of-size-10-and-sort-it"]], "41. How to sum a small array faster than np.sum? (\u2605\u2605\u2606)": [[102, "how-to-sum-a-small-array-faster-than-np-sum"]], "42. Consider two random array A and B, check if they are equal (\u2605\u2605\u2606)": [[102, "consider-two-random-array-a-and-b-check-if-they-are-equal"]], "43. Make an array immutable (read-only) (\u2605\u2605\u2606)": [[102, "make-an-array-immutable-read-only"]], "44. Consider a random 5x2 matrix representing cartesian coordinates, convert them to polar coordinates (\u2605\u2605\u2606)": [[102, "consider-a-random-5x2-matrix-representing-cartesian-coordinates-convert-them-to-polar-coordinates"]], "45. Create random vector of size 5 and replace the maximum value by 0 (\u2605\u2605\u2606)": [[102, "create-random-vector-of-size-5-and-replace-the-maximum-value-by-0"]], "46. Create a structured array with x and y coordinates covering the [0,1]x[0,1] area (\u2605\u2605\u2606)": [[102, "create-a-structured-array-with-x-and-y-coordinates-covering-the-0-1-x-0-1-area"]], "47. Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj)) (\u2605\u2605\u2606)": [[102, "given-two-arrays-x-and-y-construct-the-cauchy-matrix-c-cij-1-xi-yj"]], "48. Print the minimum and maximum representable value for each numpy scalar type (\u2605\u2605\u2606)": [[102, "print-the-minimum-and-maximum-representable-value-for-each-numpy-scalar-type"]], "49. How to print all the values of an array? (\u2605\u2605\u2606)": [[102, "how-to-print-all-the-values-of-an-array"]], "50. How to find the closest value (to a given scalar) in a vector? (\u2605\u2605\u2606)": [[102, "how-to-find-the-closest-value-to-a-given-scalar-in-a-vector"]], "51. Create a structured array representing a position (x,y) and a color (r,g,b) (\u2605\u2605\u2606)": [[102, "create-a-structured-array-representing-a-position-x-y-and-a-color-r-g-b"]], "52. Consider a random vector with shape (100,2) representing coordinates, find point by point distances (\u2605\u2605\u2606)": [[102, "consider-a-random-vector-with-shape-100-2-representing-coordinates-find-point-by-point-distances"]], "53. How to convert a float (32 bits) array into an integer (32 bits) in place?": [[102, "how-to-convert-a-float-32-bits-array-into-an-integer-32-bits-in-place"]], "54. How to read the following file? (\u2605\u2605\u2606)": [[102, "how-to-read-the-following-file"]], "55. What is the equivalent of enumerate for numpy arrays? (\u2605\u2605\u2606)": [[102, "what-is-the-equivalent-of-enumerate-for-numpy-arrays"]], "56. Generate a generic 2D Gaussian-like array (\u2605\u2605\u2606)": [[102, "generate-a-generic-2d-gaussian-like-array"]], "57. How to randomly place e elements in a 2D array? (\u2605\u2605\u2606)": [[102, "how-to-randomly-place-e-elements-in-a-2d-array"]], "58. Subtract the mean of each row of a matrix (\u2605\u2605\u2606)": [[102, "subtract-the-mean-of-each-row-of-a-matrix"]], "59. How to sort an array by the nth column? (\u2605\u2605\u2606)": [[102, "how-to-sort-an-array-by-the-nth-column"]], "60. How to tell if a given 2D array has null columns? (\u2605\u2605\u2606)": [[102, "how-to-tell-if-a-given-2d-array-has-null-columns"]], "61. Find the nearest value from a given value in an array (\u2605\u2605\u2606)": [[102, "find-the-nearest-value-from-a-given-value-in-an-array"]], "62. Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (\u2605\u2605\u2606)": [[102, "considering-two-arrays-with-shape-1-3-and-3-1-how-to-compute-their-sum-using-an-iterator"]], "63. Create an array class that has a name attribute (\u2605\u2605\u2606)": [[102, "create-an-array-class-that-has-a-name-attribute"]], "64. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (\u2605\u2605\u2605)": [[102, "consider-a-given-vector-how-to-add-1-to-each-element-indexed-by-a-second-vector-be-careful-with-repeated-indices"]], "65. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (\u2605\u2605\u2605)": [[102, "how-to-accumulate-elements-of-a-vector-x-to-an-array-f-based-on-an-index-list-i"]], "66. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (\u2605\u2605\u2606)": [[102, "considering-a-w-h-3-image-of-dtype-ubyte-compute-the-number-of-unique-colors"]], "67. Considering a four dimensions array, how to get sum over the last two axis at once? (\u2605\u2605\u2605)": [[102, "considering-a-four-dimensions-array-how-to-get-sum-over-the-last-two-axis-at-once"]], "68. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset  indices? (\u2605\u2605\u2605)": [[102, "considering-a-one-dimensional-vector-d-how-to-compute-means-of-subsets-of-d-using-a-vector-s-of-same-size-describing-subset-indices"]], "69. How to get the diagonal of a dot product? (\u2605\u2605\u2605)": [[102, "how-to-get-the-diagonal-of-a-dot-product"]], "70. Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value? (\u2605\u2605\u2605)": [[102, "consider-the-vector-1-2-3-4-5-how-to-build-a-new-vector-with-3-consecutive-zeros-interleaved-between-each-value"]], "71. Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (\u2605\u2605\u2605)": [[102, "consider-an-array-of-dimension-5-5-3-how-to-mulitply-it-by-an-array-with-dimensions-5-5"]], "72. How to swap two rows of an array? (\u2605\u2605\u2605)": [[102, "how-to-swap-two-rows-of-an-array"]], "73. Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the  triangles (\u2605\u2605\u2605)": [[102, "consider-a-set-of-10-triplets-describing-10-triangles-with-shared-vertices-find-the-set-of-unique-line-segments-composing-all-the-triangles"]], "74. Given a sorted array C that corresponds to a bincount, how to produce an array A such that np.bincount(A) == C? (\u2605\u2605\u2605)": [[102, "given-a-sorted-array-c-that-corresponds-to-a-bincount-how-to-produce-an-array-a-such-that-np-bincount-a-c"]], "75. How to compute averages using a sliding window over an array? (\u2605\u2605\u2605)": [[102, "how-to-compute-averages-using-a-sliding-window-over-an-array"]], "76. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is  shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1]) (\u2605\u2605\u2605)": [[102, "consider-a-one-dimensional-array-z-build-a-two-dimensional-array-whose-first-row-is-z-0-z-1-z-2-and-each-subsequent-row-is-shifted-by-1-last-row-should-be-z-3-z-2-z-1"]], "77. How to negate a boolean, or to change the sign of a float inplace? (\u2605\u2605\u2605)": [[102, "how-to-negate-a-boolean-or-to-change-the-sign-of-a-float-inplace"]], "78. Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i (P0[i],P1[i])? (\u2605\u2605\u2605)": [[102, "consider-2-sets-of-points-p0-p1-describing-lines-2d-and-a-point-p-how-to-compute-distance-from-p-to-each-line-i-p0-i-p1-i"]], "79. Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P[j]) to each line i (P0[i],P1[i])? (\u2605\u2605\u2605)": [[102, "consider-2-sets-of-points-p0-p1-describing-lines-2d-and-a-set-of-points-p-how-to-compute-distance-from-each-point-j-p-j-to-each-line-i-p0-i-p1-i"]], "80. Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary) (\u2605\u2605\u2605)": [[102, "consider-an-arbitrary-array-write-a-function-that-extract-a-subpart-with-a-fixed-shape-and-centered-on-a-given-element-pad-with-a-fill-value-when-necessary"]], "81. Consider an array a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to generate an array b = [[1,2,3,4], [2,3,4,5], [3,4,5,6], \u2026, [11,12,13,14]]? (\u2605\u2605\u2605)": [[102, "consider-an-array-a-1-2-3-4-5-6-7-8-9-10-11-12-13-14-how-to-generate-an-array-b-1-2-3-4-2-3-4-5-3-4-5-6-11-12-13-14"]], "82. Compute a matrix rank (\u2605\u2605\u2605)": [[102, "compute-a-matrix-rank"]], "83. How to find the most frequent value in an array?": [[102, "how-to-find-the-most-frequent-value-in-an-array"]], "84. Extract all the contiguous 3x3 blocks from a random 10x10 matrix (\u2605\u2605\u2605)": [[102, "extract-all-the-contiguous-3x3-blocks-from-a-random-10x10-matrix"]], "85. Create a 2D array subclass such that a[i,j] == a[j,i] (\u2605\u2605\u2605)": [[102, "create-a-2d-array-subclass-such-that-a-i-j-a-j-i"]], "86. Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (\u2605\u2605\u2605)": [[102, "consider-a-set-of-p-matrices-wich-shape-n-n-and-a-set-of-p-vectors-with-shape-n-1-how-to-compute-the-sum-of-of-the-p-matrix-products-at-once-result-has-shape-n-1"]], "87. Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (\u2605\u2605\u2605)": [[102, "consider-a-16x16-array-how-to-get-the-block-sum-block-size-is-4x4"]], "88. How to implement the Game of Life using numpy arrays? (\u2605\u2605\u2605)": [[102, "how-to-implement-the-game-of-life-using-numpy-arrays"]], "89. How to get the n largest values of an array (\u2605\u2605\u2605)": [[102, "how-to-get-the-n-largest-values-of-an-array"]], "90. Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (\u2605\u2605\u2605)": [[102, "given-an-arbitrary-number-of-vectors-build-the-cartesian-product-every-combinations-of-every-item"]], "91. How to create a record array from a regular array? (\u2605\u2605\u2605)": [[102, "how-to-create-a-record-array-from-a-regular-array"]], "92. Consider a large vector A, compute A to the power of 3 using 3 different methods (\u2605\u2605\u2605)": [[102, "consider-a-large-vector-a-compute-a-to-the-power-of-3-using-3-different-methods"]], "93. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (\u2605\u2605\u2605)": [[102, "consider-two-arrays-a-and-b-of-shape-8-3-and-2-2-how-to-find-rows-of-a-that-contain-elements-of-each-row-of-b-regardless-of-the-order-of-the-elements-in-b"]], "94. Considering a 10x3 matrix, extract rows with unequal values (e.g. [2,2,3]) (\u2605\u2605\u2605)": [[102, "considering-a-10x3-matrix-extract-rows-with-unequal-values-e-g-2-2-3"]], "95. Convert a vector of ints into a matrix binary representation (\u2605\u2605\u2605)": [[102, "convert-a-vector-of-ints-into-a-matrix-binary-representation"]], "96. Given a two dimensional array, how to extract unique rows? (\u2605\u2605\u2605)": [[102, "given-a-two-dimensional-array-how-to-extract-unique-rows"]], "97. Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (\u2605\u2605\u2605)": [[102, "considering-2-vectors-a-b-write-the-einsum-equivalent-of-inner-outer-sum-and-mul-function"]], "98. Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (\u2605\u2605\u2605)?": [[102, "considering-a-path-described-by-two-vectors-x-y-how-to-sample-it-using-equidistant-samples"]], "99. Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (\u2605\u2605\u2605)": [[102, "given-an-integer-n-and-a-2d-array-x-select-from-x-the-rows-which-can-be-interpreted-as-draws-from-a-multinomial-distribution-with-n-degrees-i-e-the-rows-which-only-contain-integers-and-which-sum-to-n"]], "100. Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (\u2605\u2605\u2605)": [[102, "compute-bootstrapped-95-confidence-intervals-for-the-mean-of-a-1d-array-x-i-e-resample-the-elements-of-an-array-with-replacement-n-times-compute-the-mean-of-each-sample-and-then-compute-percentiles-over-the-means"]], "Resources": [[103, "resources"], [117, "resources"]], "Python Pandas": [[104, "python-pandas"], [115, "python-pandas"], [116, "python-pandas"]], "Python DataFrame": [[104, "python-dataframe"]], "What is DataFrame in Pandas": [[104, "what-is-dataframe-in-pandas"]], "DataFrame creation": [[104, "dataframe-creation"]], "DataFrame constructor": [[104, "dataframe-constructor"]], "Parameters:": [[104, "parameters"]], "Dataframe from dict": [[104, "dataframe-from-dict"]], "Indexing": [[104, "indexing"]], "Series": [[104, "series"]], "Index": [[104, "index"]], "Dataframe from CSV": [[104, "dataframe-from-csv"]], "DataFrame Options": [[104, "dataframe-options"]], "To customize the display of DataFrame while printing": [[104, "to-customize-the-display-of-dataframe-while-printing"]], "DataFrame metadata": [[104, "dataframe-metadata"]], "Metadata info of DataFrame": [[104, "metadata-info-of-dataframe"]], "Get the statistics of DataFrame": [[104, "get-the-statistics-of-dataframe"]], "DataFrame Attributes": [[104, "dataframe-attributes"]], "DataFrame selection": [[104, "dataframe-selection"]], "DataFrame modification": [[104, "dataframe-modification"]], "Insert columns": [[104, "insert-columns"]], "Drop columns": [[104, "drop-columns"]], "Apply condition": [[104, "apply-condition"]], "DataFrame filter columns": [[104, "dataframe-filter-columns"]], "DataFrame rename columns": [[104, "dataframe-rename-columns"]], "DataFrame Join": [[104, "dataframe-join"]], "DataFrame GroupBy": [[104, "dataframe-groupby"]], "DataFrame Iteration": [[104, "dataframe-iteration"]], "DataFrame Sorting": [[104, "dataframe-sorting"]], "DataFrame conversion": [[104, "dataframe-conversion"]], "Create Test Objects": [[104, "create-test-objects"]], "Viewing/Inspecting Data": [[104, "viewing-inspecting-data"]], "Selection": [[104, "selection"]], "Data Cleaning": [[104, "data-cleaning"]], "Filter, Sort, and Groupby": [[104, "filter-sort-and-groupby"]], "Join/Combine": [[104, "join-combine"]], "Importing Data": [[104, "importing-data"]], "Exporting Data": [[104, "exporting-data"]], "Create Pandas DataFrame from Python Dictionary": [[105, "create-pandas-dataframe-from-python-dictionary"]], "Create DataFrame from dict using constructor": [[105, "create-dataframe-from-dict-using-constructor"]], "DataFrame from dict with required columns only": [[105, "dataframe-from-dict-with-required-columns-only"]], "DataFrame from dict with user-defined indexes": [[105, "dataframe-from-dict-with-user-defined-indexes"]], "DataFrame from dict by changing the column data type": [[105, "dataframe-from-dict-by-changing-the-column-data-type"]], "DataFrame from dict with a single value": [[105, "dataframe-from-dict-with-a-single-value"]], "DataFrame from dict with key and value as a column": [[105, "dataframe-from-dict-with-key-and-value-as-a-column"]], "Create DataFrame from list of dict": [[105, "create-dataframe-from-list-of-dict"]], "The from_dict() function": [[105, "the-from-dict-function"]], "DataFrame from dict with dict keys as a row": [[105, "dataframe-from-dict-with-dict-keys-as-a-row"]], "DataFrame from dict where values are variable-length lists": [[105, "dataframe-from-dict-where-values-are-variable-length-lists"]], "DataFrame from dict nested dict": [[105, "dataframe-from-dict-nested-dict"]], "DataFrame constructor vs from_dict()": [[105, "dataframe-constructor-vs-from-dict"]], "Create Pandas DataFrame from Python List": [[106, "create-pandas-dataframe-from-python-list"]], "Create DataFrame from list using constructor": [[106, "create-dataframe-from-list-using-constructor"]], "Create DataFrame from list with a customized column name": [[106, "create-dataframe-from-list-with-a-customized-column-name"]], "Create DataFrame from list with a customized index": [[106, "create-dataframe-from-list-with-a-customized-index"]], "Create DataFrame from list by changing data type": [[106, "create-dataframe-from-list-by-changing-data-type"]], "Create DataFrame from hierarchical lists as rows": [[106, "create-dataframe-from-hierarchical-lists-as-rows"]], "Create DataFrame from Hierarchical lists as columns": [[106, "create-dataframe-from-hierarchical-lists-as-columns"]], "Create DataFrame from multiple lists": [[106, "create-dataframe-from-multiple-lists"]], "Pandas DataFrame head, tail, at, iat": [[107, "pandas-dataframe-head-tail-at-iat"]], "How to use DataFrame.head() function": [[107, "how-to-use-dataframe-head-function"]], "Select top n rows in pandas DataFrame": [[107, "select-top-n-rows-in-pandas-dataframe"]], "Select top rows except for last n rows": [[107, "select-top-rows-except-for-last-n-rows"]], "Select top rows from multi-index DataFrames": [[107, "select-top-rows-from-multi-index-dataframes"]], "How to use DataFrame.tail() function": [[107, "how-to-use-dataframe-tail-function"]], "Select bottom n rows in pandas DataFrame": [[107, "select-bottom-n-rows-in-pandas-dataframe"]], "Select bottom rows except for first n rows": [[107, "select-bottom-rows-except-for-first-n-rows"]], "Select bottom rows from the multi index DataFrame": [[107, "select-bottom-rows-from-the-multi-index-dataframe"]], "Select value using row and column labels using DataFrame.at": [[107, "select-value-using-row-and-column-labels-using-dataframe-at"]], "Set specific value in pandas DataFrame": [[107, "set-specific-value-in-pandas-dataframe"], [107, "id1"]], "Select value using row and column position using DataFrame.iat": [[107, "select-value-using-row-and-column-position-using-dataframe-iat"]], "Drop columns in pandas DataFrame": [[108, "drop-columns-in-pandas-dataframe"]], "The DataFrame.drop() function": [[108, "the-dataframe-drop-function"]], "Drop single column": [[108, "drop-single-column"]], "Drop multiple columns": [[108, "drop-multiple-columns"]], "Using drop with axis='columns' or axis=1": [[108, "using-drop-with-axis-columns-or-axis-1"]], "Drop column in place": [[108, "drop-column-in-place"]], "Drop column by suppressing errors": [[108, "drop-column-by-suppressing-errors"]], "Drop column by index position": [[108, "drop-column-by-index-position"]], "Drop the last column": [[108, "drop-the-last-column"]], "Drop range of columns using iloc": [[108, "drop-range-of-columns-using-iloc"]], "Drop first n columns": [[108, "drop-first-n-columns"]], "Drop column from multi-index DataFrame": [[108, "drop-column-from-multi-index-dataframe"]], "Drop column using a function": [[108, "drop-column-using-a-function"]], "Drop all the columns using loc": [[108, "drop-all-the-columns-using-loc"]], "Drop column using pandas DataFrame.pop() function": [[108, "drop-column-using-pandas-dataframe-pop-function"]], "Drop column using pandas DataFrame delete": [[108, "drop-column-using-pandas-dataframe-delete"]], "Compare DataFrame drop() vs. pop() vs. del": [[108, "compare-dataframe-drop-vs-pop-vs-del"]], "Drop duplicates in pandas DataFrame": [[109, "drop-duplicates-in-pandas-dataframe"]], "The DataFrame.drop_duplicates() function": [[109, "the-dataframe-drop-duplicates-function"]], "Drop duplicates but keep first": [[109, "drop-duplicates-but-keep-first"]], "Drop duplicates from defined columns": [[109, "drop-duplicates-from-defined-columns"]], "Drop duplicates but keep last": [[109, "drop-duplicates-but-keep-last"]], "Drop all duplicates": [[109, "drop-all-duplicates"]], "Drop duplicates in place": [[109, "drop-duplicates-in-place"]], "Drop duplicates and reset the index": [[109, "drop-duplicates-and-reset-the-index"], [110, "drop-duplicates-and-reset-the-index"]], "Drop columns with NA in pandas DataFrame": [[110, "drop-columns-with-na-in-pandas-dataframe"]], "The DataFrame.dropna() function": [[110, "the-dataframe-dropna-function"]], "Drop column where at least one value is missing": [[110, "drop-column-where-at-least-one-value-is-missing"]], "Drop column where all values are missing": [[110, "drop-column-where-all-values-are-missing"]], "Drop column with the number of NA": [[110, "drop-column-with-the-number-of-na"]], "Drop NA from defined rows": [[110, "drop-na-from-defined-rows"]], "Drop column with missing values in place": [[110, "drop-column-with-missing-values-in-place"]], "Rename columns in Pandas DataFrame": [[111, "rename-columns-in-pandas-dataframe"]], "The DataFrame.rename() function": [[111, "the-dataframe-rename-function"]], "Rename a single column": [[111, "rename-a-single-column"]], "Rename multiple columns": [[111, "rename-multiple-columns"]], "Using rename with axis='columns' or axis=1": [[111, "using-rename-with-axis-columns-or-axis-1"]], "Rename columns in place": [[111, "rename-columns-in-place"]], "Rename column using a function": [[111, "rename-column-using-a-function"]], "Use lambda expressions to rename": [[111, "use-lambda-expressions-to-rename"]], "Rename columns by removing leading and trailing spaces": [[111, "rename-columns-by-removing-leading-and-trailing-spaces"]], "Rename all columns with a list": [[111, "rename-all-columns-with-a-list"]], "Rename column by index position": [[111, "rename-column-by-index-position"]], "Raise error while renaming a column": [[111, "raise-error-while-renaming-a-column"]], "Rename column by adding prefix/suffix": [[111, "rename-column-by-adding-prefix-suffix"]], "Rename column using DataFrame.set_axis()": [[111, "rename-column-using-dataframe-set-axis"]], "Rename column in multi-index DataFrame": [[111, "rename-column-in-multi-index-dataframe"]], "Rename columns in all levels": [[111, "rename-columns-in-all-levels"]], "Rename columns in defined level": [[111, "rename-columns-in-defined-level"]], "Convert Pandas DataFrame to Python dictionary": [[112, "convert-pandas-dataframe-to-python-dictionary"]], "The DataFrame.to_dict() function": [[112, "the-dataframe-to-dict-function"]], "Example to convert pandas DataFrame to dict": [[112, "example-to-convert-pandas-dataframe-to-dict"]], "DataFrame to dict with a list of values": [[112, "dataframe-to-dict-with-a-list-of-values"]], "DataFrame to dict with pandas series of values": [[112, "dataframe-to-dict-with-pandas-series-of-values"]], "DataFrame to dict without header and index": [[112, "dataframe-to-dict-without-header-and-index"]], "DataFrame to dict by row": [[112, "dataframe-to-dict-by-row"]], "DataFrame to dict by row index": [[112, "dataframe-to-dict-by-row-index"]], "DataFrame to dict with one column as the key": [[112, "dataframe-to-dict-with-one-column-as-the-key"]], "DataFrame to dict using into parameter": [[112, "dataframe-to-dict-using-into-parameter"]], "Set index in pandas DataFrame": [[113, "set-index-in-pandas-dataframe"]], "The DataFrame.set_index() function": [[113, "the-dataframe-set-index-function"]], "Set index using a column": [[113, "set-index-using-a-column"]], "Set index using a list": [[113, "set-index-using-a-list"]], "Set index using multiple columns": [[113, "set-index-using-multiple-columns"]], "Set multi-index using a list and column": [[113, "set-multi-index-using-a-list-and-column"]], "Set multi-index using two Python series": [[113, "set-multi-index-using-two-python-series"]], "Set index using a Python range": [[113, "set-index-using-a-python-range"]], "Set index but keep column": [[113, "set-index-but-keep-column"]], "Set index by keeping old index": [[113, "set-index-by-keeping-old-index"]], "Set index in place": [[113, "set-index-in-place"]], "Set index using a column with duplicates": [[113, "set-index-using-a-column-with-duplicates"]], "Set index by column number": [[113, "set-index-by-column-number"]], "Reset index in pandas DataFrame": [[114, "reset-index-in-pandas-dataframe"]], "The DataFrame.reset_index() function": [[114, "the-dataframe-reset-index-function"]], "Reset index to starts at 0": [[114, "reset-index-to-starts-at-0"]], "Reset index without new column": [[114, "reset-index-without-new-column"]], "Reset index in place": [[114, "reset-index-in-place"]], "Reset index starts from 1": [[114, "reset-index-starts-from-1"]], "Reset index to the range of numbers": [[114, "reset-index-to-the-range-of-numbers"]], "Reset index and change column name": [[114, "reset-index-and-change-column-name"]], "Reset multi-level index": [[114, "reset-multi-level-index"]], "Reset index by level": [[114, "reset-index-by-level"]], "Reset index and creates new column in level": [[114, "reset-index-and-creates-new-column-in-level"]], "Reset index and name other level": [[114, "reset-index-and-name-other-level"]], "Loading data into Pandas": [[115, "loading-data-into-pandas"]], "Reading Data in Pandas": [[115, "reading-data-in-pandas"]], "Sorting/Describing Data": [[115, "sorting-describing-data"]], "Making changes to the data": [[115, "making-changes-to-the-data"]], "Saving our Data (Exporting into Desired Format)": [[115, "saving-our-data-exporting-into-desired-format"]], "Filtering Data": [[115, "filtering-data"]], "Conditional Changes": [[115, "conditional-changes"]], "Aggregate Statistics (Groupby)": [[115, "aggregate-statistics-groupby"]], "Working with large amounts of data": [[115, "working-with-large-amounts-of-data"]], "Exercise 1: From the given dataset print the first and last five rows": [[116, "exercise-1-from-the-given-dataset-print-the-first-and-last-five-rows"]], "Exercise 2: Clean the dataset and update the CSV file": [[116, "exercise-2-clean-the-dataset-and-update-the-csv-file"]], "Exercise 3: Find the most expensive car company name": [[116, "exercise-3-find-the-most-expensive-car-company-name"]], "Exercise 4: Print All Toyota Cars details": [[116, "exercise-4-print-all-toyota-cars-details"]], "Exercise 5: Count total cars per company": [[116, "exercise-5-count-total-cars-per-company"]], "Exercise 6: Find each company\u2019s Higesht price car": [[116, "exercise-6-find-each-companys-higesht-price-car"]], "Exercise 7: Find the average mileage of each car making company": [[116, "exercise-7-find-the-average-mileage-of-each-car-making-company"]], "Exercise 8: Sort all cars by Price column": [[116, "exercise-8-sort-all-cars-by-price-column"]], "Exercise 9: Concatenate two data frames using the following conditions": [[116, "exercise-9-concatenate-two-data-frames-using-the-following-conditions"]], "Exercise 10: Merge two data frames using the following condition": [[116, "exercise-10-merge-two-data-frames-using-the-following-condition"]], "AI/ML Learning Path": [[121, "ai-ml-learning-path"]], "Beginner Level": [[121, "beginner-level"]], "Intermediate Level": [[121, "intermediate-level"]], "Advanced Level": [[121, "advanced-level"]], "Expert Level": [[121, "expert-level"]], "Topics on Learning Data Science and Machine Learning": [[121, "topics-on-learning-data-science-and-machine-learning"]], "Welcome to my technical diary \ud83e\udd2f": [[122, "welcome-to-my-technical-diary"]], "Good news is \ud83d\ude0d": [[122, "good-news-is"]], "Target Audience \ud83e\uddd0": [[122, "target-audience"]], "Course Structure": [[122, "course-structure"]], "Essentials": [[122, "essentials"]], "Toolbox": [[122, "toolbox"]], "Concepts": [[122, "concepts"]], "Core engineering": [[122, "core-engineering"]], "Real world use cases": [[122, "real-world-use-cases"]], "Enjoy Learning \ud83d\ude03": [[122, "enjoy-learning"]]}, "indexentries": {}})